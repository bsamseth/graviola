/// Tests generated from wycheproof input data
use super::{PrivateKey, PublicKey};
use crate::Error;

#[test]
fn test_point_on_curve_1() {
    // normal case
    // flags: Normal
    // expect: valid
    let public = b"\x04\
\x62\xd5\xbd\x33\x72\xaf\x75\xfe\x85\xa0\x40\x71\x5d\x0f\x50\x24\x28\xe0\x70\x46\x86\x8b\x0b\xfd\xfa\x61\xd7\x31\xaf\xe4\x4f\x26\
\xac\x33\x3a\x93\xa9\xe7\x0a\x81\xcd\x5a\x95\xb5\xbf\x8d\x13\x99\x0e\xb7\x41\xc8\xc3\x88\x72\xb4\xa0\x7d\x27\x5a\x01\x4e\x30\xcf";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_2() {
    // compressed public key
    // flags: CompressedPublic,CompressedPoint
    // expect: acceptable
    let public = b"\x03\x62\xd5\xbd\x33\x72\xaf\x75\xfe\x85\xa0\x40\x71\x5d\x0f\x50\x24\x28\xe0\x70\x46\x86\x8b\x0b\xfd\xfa\x61\xd7\x31\xaf\xe4\x4f\x26";
    match PublicKey::from_x962_uncompressed(public) {
        Err(Error::NotUncompressed) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_3() {
    // shared secret has x-coordinate that satisfies x**2 = 0
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x58\xfd\x41\x68\xa8\x77\x95\x60\x3e\x2b\x04\x39\x02\x85\xbd\xca\x6e\x57\xde\x60\x27\xfe\x21\x1d\xd9\xd2\x5e\x22\x12\xd2\x9e\x62\
\x08\x0d\x36\xbd\x22\x4d\x74\x05\x50\x92\x95\xee\xd0\x2a\x17\x15\x0e\x03\xb3\x14\xf9\x6d\xa3\x74\x45\xb0\xd1\xd2\x93\x77\xd1\x2c";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_4() {
    // shared secret has x-coordinate p-3
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xa1\xec\xc2\x4b\xf0\xd0\x05\x3d\x23\xf5\xfd\x80\xdd\xf1\x73\x5a\x19\x25\x03\x9d\xc1\x17\x6c\x58\x1a\x7e\x79\x51\x63\xc8\xb9\xba\
\x2c\xb5\xa4\xe4\xd5\x10\x9f\x45\x27\x57\x5e\x31\x37\xb8\x3d\x79\xa9\xbc\xb3\xfa\xef\xf9\x0d\x2a\xca\x2b\xed\x71\xbb\x52\x3e\x7e";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_5() {
    // shared secret has x-coordinate 2**16 + 0
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x1b\x0e\x74\x37\xc3\x3d\x37\x99\x29\x43\x0d\x3e\xc1\x0d\xf5\x9b\xed\x7f\xe2\xa1\xd9\x50\xc5\x79\x1e\x1e\x9d\xde\xef\x1f\x4d\x70\
\xfb\xdb\x0e\x3b\xbc\xe6\x3a\x27\xf2\x78\x38\xc6\x85\x20\x7f\x2c\xca\xf6\x89\xd2\x5e\xb6\x22\x74\x4d\xb1\x16\x8a\xc9\x26\x19\xe8";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_6() {
    // shared secret has x-coordinate 2**32 + 0
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x08\xd6\x14\x8d\x02\x44\xd2\x43\xb3\xd0\xd1\x77\x7d\xe6\x37\x5f\xa7\xeb\xea\xb4\x77\xf1\x99\x15\xd0\x59\x94\xdb\x04\xdf\x21\x97\
\x27\x73\x7d\x4f\x8c\xe0\xa7\xf3\x90\xbe\xcc\xe9\x2b\x2b\xcd\x5c\x05\x4f\x18\xec\xb5\x8e\x5d\xd5\x9b\xaf\x88\xb4\xed\x6a\xbe\xa8";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_7() {
    // shared secret has x-coordinate 2**64 + 0
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x24\x24\xf9\xd7\xba\x0a\x89\xce\x3c\x7c\x1e\x8f\x15\xdf\xd8\x30\x04\xd8\x66\x80\x96\x7a\x82\xcb\xf9\xbb\x6b\x11\xda\xe5\xfd\x72\
\xe0\x5c\x36\x87\x18\x7b\x1c\xf2\x84\x38\xa1\x7a\x74\x69\xfa\x3b\x09\x4b\x7d\x6f\x36\xcc\xcc\x34\x92\xc0\xb0\xa6\x1f\xab\x2a\x38";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_8() {
    // shared secret has x-coordinate 2**96 + 0
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x4c\x96\x95\xb7\x66\x84\x34\xfc\x85\x76\x9a\xcb\x10\xf0\xed\xcf\x87\xa9\x6b\x7d\x5d\xc3\x47\xb4\x6b\xb3\x04\xb0\xb1\xd3\x26\x7f\
\xcf\x5d\x99\x3b\xff\x2a\x8c\x77\x48\x08\x23\x1a\x34\xf4\x1b\x33\x66\x7d\x8e\xbe\xaf\xd0\x06\x89\xfa\x3a\x9b\xfa\x05\xa4\x0c\x1c";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_9() {
    // shared secret has x-coordinate that satisfies x**2 = -3
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xa4\x92\xfe\x4b\x49\x08\xb6\xd6\x75\xd6\x87\x55\x1f\x99\xc6\x17\xe4\xe5\xc9\x7a\xa2\x66\x95\x89\x53\x12\x9e\xb3\x81\xf0\x15\x3b\
\x11\x1b\x95\xc9\x4f\xa1\xd1\xec\xd1\xd4\x1d\x27\x85\xc1\xdb\x51\x95\x87\x5a\xe9\x80\x51\x73\x2a\x59\xba\x77\x20\xf9\x08\x9a\xf6";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_10() {
    // shared secret has x-coordinate that satisfies x**2 = 2
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xd5\xc9\x6e\xfd\x19\x07\xfd\x48\xde\x2a\xd7\x15\xac\xf8\x2e\xae\x5c\x66\x90\xfe\x3e\xfe\x16\xa7\x8d\x61\xc6\x8d\x3b\xfd\x10\xdf\
\x03\xea\xc8\x16\xb9\xe7\xb7\x76\x19\x2a\x3f\x50\x75\x88\x7c\x0e\x22\x56\x17\x50\x58\x33\xca\x99\x7c\xda\x32\xfd\x0f\x67\x3c\x5e";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_11() {
    // shared secret has x-coordinate that satisfies x**2 = 5
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xc7\x4d\x54\x6f\x2f\xcc\x6d\xd3\x92\xf8\x5e\x5b\xe1\x67\xe3\x58\xde\x90\x87\x56\xb0\xc0\xbb\x01\xcb\x69\xd8\x64\xca\x08\x3e\x1c\
\x93\xf9\x59\xee\xce\x6e\x10\xee\x11\xbd\x39\x34\x20\x7d\x65\xae\x28\xaf\x68\xb0\x92\x58\x5a\x15\x09\x26\x0e\xce\xb3\x9b\x92\xef";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_12() {
    // shared secret has x-coordinate that satisfies x**2 = 7
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x34\xfc\x9f\x1e\x7a\x09\x4c\xd2\x95\x98\xd1\x84\x1f\xa9\x61\x3d\xbe\x82\x31\x3d\x63\x3a\x51\xd6\x3f\xb6\xef\xf0\x74\xcc\x9b\x9a\
\x4e\xcf\xd9\xf2\x58\xc5\xc4\xd4\x21\x0b\x49\x75\x12\x13\xa2\x4c\x59\x69\x82\xbd\x1d\x54\xe0\x44\x54\x43\xf2\x1e\xf1\x54\x92\xa5";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_13() {
    // shared secret has x-coordinate that satisfies x**2 = 8
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xf4\x75\xf5\x03\xa7\x70\xdf\x72\xc4\x5a\xed\xfe\x42\xc0\x08\xf5\x9a\xa5\x7e\x72\xb2\x32\xf2\x66\x00\xbd\xd0\x35\x39\x57\xcb\x20\
\xbd\xb8\xf6\x40\x5b\x49\x18\x05\x0a\x35\x49\xf4\x4c\x07\xa8\xeb\xa8\x20\xcd\xce\x4e\xce\x69\x98\x88\xc6\x38\xdf\x66\xf5\x4f\x7c";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_14() {
    // shared secret has x-coordinate that satisfies x**2 = 2**96 + 2
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x94\x93\x04\x88\x90\x50\x83\x40\x06\xec\xf1\x1e\xba\x0e\x73\xf0\xdd\x2a\x5e\x77\xa5\xea\x64\x2a\x34\xa3\xf9\x98\x9e\xda\x2d\x57\
\x38\x45\x09\xcd\x42\x76\x3c\x87\xcf\x46\x0d\x1a\xd7\x56\x64\x40\x29\x86\xbb\x8c\xca\x0a\xcd\xfc\x36\x85\xd2\xc9\xc7\xd3\x29\x33";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_15() {
    // shared secret has x-coordinate with repeating bit-pattern of size 2
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xe2\x5e\xad\x83\x42\x88\x8d\x1f\xbd\x2b\xd2\x11\xe9\xdb\x5b\xc7\x61\xda\x9c\xfa\x1e\x80\x50\x78\xb5\x36\x06\xdf\x9e\x54\x44\x40\
\x3d\x34\x21\xfa\x70\xf9\x40\xdb\xa1\x04\xd8\x42\x03\x4d\x2e\xfe\xc9\x33\x21\x61\xcc\xfb\x65\x4a\x8e\x9f\x2e\xc4\x2f\xc1\xa8\x37";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_16() {
    // shared secret has x-coordinate with repeating bit-pattern of size 2
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xcb\x32\xab\x95\x1d\x75\x81\xe7\x60\x2c\x89\x32\x0d\x91\xd7\x04\x3e\x9d\xc5\x6a\x10\x34\x8d\x58\x6a\x08\xd1\x87\x07\x53\x15\x2b\
\xf9\x6b\xd5\x3e\x7c\xfc\x24\x34\xdc\x61\xa0\x9f\x8f\x48\x53\xe4\xc6\xdd\x49\xe7\x86\x19\x4e\xc0\xa9\x88\xd0\xe8\xd2\x93\x78\xb8";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_17() {
    // shared secret has x-coordinate with repeating bit-pattern of size 4
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x0b\x9d\x56\x42\x2e\xd9\xc2\x08\x2d\xd9\xd4\x6d\x23\x1f\xd0\x14\x1f\x92\xe7\x9f\x5a\x12\xda\x4c\x77\xc4\x88\xc8\x73\x63\xf9\x44\
\xe6\xe3\xc2\xec\x97\x79\x61\x5f\x24\x2b\xc3\x0d\x1c\x28\xc1\xf9\x84\xb8\xc2\x52\x24\x3f\x5f\x1e\xaa\x3d\x85\x5e\x1c\xc2\xd8\xa6";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_18() {
    // shared secret has x-coordinate with repeating bit-pattern of size 4
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x05\x07\xfa\xbb\x16\x75\x5f\x48\x85\xae\x45\xb3\xd4\x97\x82\x23\x88\xf4\xe6\xa5\x31\xde\x51\x2c\x20\x04\x80\xb4\xe5\x6b\x89\x2a\
\xb7\x07\x46\xc1\xd8\xa2\x06\x37\xef\xf1\x79\x48\xe5\x57\xa2\xb4\xda\x25\x62\xba\x6b\x62\x99\x1b\x42\x6b\x7b\x37\x87\xa1\x96\x93";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_19() {
    // shared secret has x-coordinate with repeating bit-pattern of size 8
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x3b\x18\xca\xef\x2c\xd9\x82\xc3\xb5\x8f\x25\x8c\xb7\x6d\xaa\x02\x93\x83\xf4\x2c\x8f\x3f\x08\x34\x93\xf4\x2c\x91\x59\x35\x24\x3a\
\x26\x08\x30\xb7\xd2\x5b\x66\x37\x8c\x5d\x25\xfb\x0c\xf2\x3d\x32\x52\x7a\x2c\xdb\x7f\x7d\x7e\x6c\x89\xeb\xea\x82\x77\x73\x8e\xd8";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_20() {
    // shared secret has x-coordinate with repeating bit-pattern of size 8
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x12\x3b\x19\x21\x23\x1b\xee\x31\x5e\x1e\xa6\x6c\xb9\x53\x18\xd6\x39\x2f\x85\x69\x5b\xbe\xc0\x3c\x33\x47\x40\xce\x7a\xdd\x76\x8e\
\xfe\xc9\xa1\x08\x77\x0f\xf0\xeb\x44\x8e\xee\x9f\x06\x36\x74\x16\xd7\x4b\x22\xa2\xf3\x81\x57\xbb\x00\xd8\xc0\xbe\x44\xeb\xf1\x52";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_21() {
    // shared secret has x-coordinate with repeating bit-pattern of size 16
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x92\x4f\xb3\x39\x85\xc8\xa6\x87\xfc\x04\xc9\xdd\x05\xe5\x31\xca\x0e\x02\x23\xaa\x58\xd5\x83\x51\xe9\x22\xef\x48\x20\x43\xd3\x0c\
\xf5\x04\x74\x5e\x76\x9b\x6d\xcb\xef\xe4\x04\xda\x37\xf7\x17\xb3\x10\x9d\x2a\xf2\x34\x50\xfc\xfe\x2f\x07\x5c\x2d\xab\xbe\x71\x94";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_22() {
    // shared secret has x-coordinate with repeating bit-pattern of size 16
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x22\x49\x5c\x68\x84\x93\x7a\x1b\xc0\x58\x71\xe9\xee\x1a\x2c\x43\xf8\xf1\x4d\xb1\x9e\xe6\x0b\xd2\xd8\x9c\x42\x93\x04\x2f\x5a\x94\
\x52\xce\xa2\x7e\x6f\xe5\x74\xa0\x0e\x5f\x15\xfe\x11\xaa\x54\xf5\x4e\xbd\x8b\xde\x3a\xa4\x1c\x80\xbf\x9d\x5f\x7b\x1d\xc6\xef\xec";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_23() {
    // shared secret has x-coordinate with repeating bit-pattern of size 30
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xf3\xcb\x67\x54\xb7\xe2\xa8\x6d\x06\x4d\xfb\x9f\x90\x31\x85\xaa\xa4\xc9\x2b\x48\x1c\x2c\x1a\x1f\xf2\x76\x30\x3b\xbc\x41\x83\xe4\
\x9c\x31\x85\x99\xb0\x98\x4c\x35\x63\xdf\x33\x93\x11\xfe\x14\x3a\x7d\x92\x1e\xe7\x5b\x75\x5a\x52\xc6\xf8\x04\xf8\x97\xb8\x09\xf7";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_24() {
    // shared secret has x-coordinate with repeating bit-pattern of size 30
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xa8\xd9\x3b\xeb\xba\xf2\x5f\xa9\xa1\xf9\x8c\x44\xb5\x4d\xbf\x28\x63\x4a\x5f\xd0\x84\x02\xdb\xa5\xd9\xe4\x87\x3f\x81\x23\xda\x1d\
\xb9\x72\xd9\x1a\x0e\xab\xad\xb6\x30\xb2\x71\xe6\x55\x1b\x75\x7d\x96\x93\x01\xbe\xdd\xd1\x1f\x82\xde\xcd\xfb\xe4\xf9\x65\x7f\x50";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_25() {
    // shared secret has x-coordinate with repeating bit-pattern of size 32
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x8d\x00\x86\xe6\x78\xa0\xfe\x7b\x4a\xd7\xbd\x4f\x94\xa3\x82\x67\xb9\xf9\xf1\xd2\xb8\x24\x52\xdb\x4c\xfb\x33\x55\x95\xc2\x6c\x55\
\xf7\x84\x76\xa0\x0a\x01\x53\x94\x1d\xa0\xb0\xb8\x1c\x83\x46\x82\xed\xc9\xfc\xc8\xbc\x21\xa7\xb5\xba\xcb\x46\x0d\xbb\x56\x6c\x19";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_26() {
    // shared secret has x-coordinate with repeating bit-pattern of size 32
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x02\xa9\x68\x34\xfe\x3b\x54\xd4\x40\x00\x35\x21\xf2\x35\x5a\xea\x48\xd0\xbb\xc5\x76\x47\x3f\xec\xc6\x97\x51\x00\xc5\x89\x86\x52\
\x63\x25\x57\x64\x89\x1f\xfc\x10\x8c\xfe\x75\x4a\xf5\x2a\x43\x62\x95\x39\x55\xdd\xfa\xdc\xf7\x52\x63\x7c\x11\xed\xea\xa6\xa8\x07";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_27() {
    // shared secret has x-coordinate with repeating bit-pattern of size 51
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x87\x21\x29\x4f\x9e\xb3\xba\x69\xa1\x3a\xe7\xd9\x33\xfa\x51\xc4\x83\x93\xfe\x1b\x9b\x9b\x17\xa0\x8c\xec\xff\x2e\xe6\xad\x43\x4d\
\x2c\x23\xcd\x11\xd2\x66\x94\xc4\x72\xdd\xa8\xce\xa4\x13\x3b\xbc\x68\xe1\xf2\x34\xbc\x7e\x8b\xff\xce\xa9\x44\x60\x91\x85\x54\x91";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_28() {
    // shared secret has x-coordinate with repeating bit-pattern of size 51
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x3e\x99\xec\x3c\x58\xac\x38\x98\x93\x6e\x4a\x61\x18\x2b\x19\x88\x23\xc9\x99\x22\x09\xf6\x7b\xf5\x29\x1a\xa3\x54\xfc\xeb\x2f\x13\
\x12\x95\x25\x18\x63\x6a\xdd\x66\x63\x20\xc8\xb7\xfa\x63\x15\x41\xd0\xca\x50\x79\x6d\xbf\xf0\xc1\xe7\x2f\x94\x71\x87\x76\xbd\x60";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_29() {
    // shared secret has x-coordinate with repeating bit-pattern of size 52
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xe9\x48\x4e\x58\xf3\x33\x1b\x66\xff\xed\x6d\x90\xcb\x1c\x78\x06\x5f\xa2\x8c\xfb\xa5\xc7\xdd\x43\x52\x01\x3d\x32\x52\xee\x42\x77\
\xbd\x75\x03\xb0\x45\xa3\x8b\x4b\x24\x7b\x32\xc5\x95\x93\x58\x0f\x39\xe6\xab\xfa\x37\x6c\x3d\xca\x20\xcf\x7f\x9c\xfb\x65\x9e\x13";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_30() {
    // shared secret has x-coordinate with repeating bit-pattern of size 52
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xeb\x6e\xb5\x32\xfe\x4a\xf2\xa5\xa2\x75\xab\x4e\x9f\x72\x8a\xe6\x4e\x9d\xbc\x08\xe9\x35\x90\x91\xd7\x5e\x53\x34\xa6\xe0\x8d\xb6\
\x4c\x14\x63\x39\xc0\x5d\x1d\x57\x82\xeb\xee\xb8\x6d\x3e\xb5\xc6\x3e\x9f\x99\xf1\x71\x87\xc0\x39\x66\x6c\x52\x37\xb7\x36\xe9\xcd";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_31() {
    // shared secret has x-coordinate with repeating bit-pattern of size 60
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x8e\x7b\x50\xf7\xd8\xc4\x4d\x5d\x34\x96\xc4\x31\x41\xa5\x02\xf4\xa4\x3f\x15\x3d\x03\xad\x43\xed\xa8\xe3\x95\x97\xf1\xd4\x77\xb8\
\x64\x7f\x3d\xa6\x79\x69\xb7\xf9\x89\xff\x4a\xdd\xc3\x93\x51\x5a\xf4\x0c\x82\x08\x5c\xe1\xf2\xee\x19\x54\x12\xc6\xf5\x83\x77\x4f";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_32() {
    // shared secret has x-coordinate with repeating bit-pattern of size 60
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x40\xd4\xf4\xf6\xd9\xa4\x1a\xb6\xea\x90\xd4\x66\x10\xb9\x24\xab\x15\xed\x4f\x25\x9f\xd0\x9d\xdd\x41\xa7\x07\x78\x2f\xa9\xe2\x03\
\xa5\x08\x0a\x7e\x11\x8a\x50\xc4\xb3\xd2\xc4\x3d\xcb\xbf\x35\xc3\x9e\x27\x6a\x0a\x50\xb3\x3a\x9f\xfb\xe7\xc9\x09\x50\x55\xfc\x25";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_33() {
    // shared secret has x-coordinate with repeating bit-pattern of size 62
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xa3\x86\xac\xe5\x73\xf8\x75\x58\xa6\x8e\xad\x2a\x20\x08\x8e\x3f\xe9\x28\xbd\xae\x9e\x10\x94\x46\xf9\x3a\x07\x8c\x15\x74\x1f\x04\
\x21\x26\x1e\x6d\xb2\xbf\x12\x10\x6e\x4c\x6b\xf8\x5b\x95\x81\xb4\xc0\x30\x2a\x52\x62\x22\xf9\x0a\xbc\x5a\x54\x92\x06\xb1\x10\x11";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_34() {
    // shared secret has x-coordinate with repeating bit-pattern of size 62
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x73\x9b\x5c\x21\x89\x72\x9b\x57\x7b\xa1\xa4\x67\xa1\xa0\x85\x1c\x55\x6b\x86\x0f\x6b\x20\x16\xbc\xd5\x0b\xeb\x22\xee\x9c\x0d\x79\
\x61\xea\x43\xcf\x1e\xa7\xaa\xd1\xa2\x36\x0b\x0f\x37\xa7\x4c\xa5\x32\xdc\x8d\x1a\xf2\x6c\xdf\x89\xa8\x7d\x93\xdc\xaa\x0c\x95\x64";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_35() {
    // shared secret has x-coordinate with repeating bit-pattern of size 64
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x6c\x03\xf0\x55\xf7\x10\xae\xa8\x93\x41\xf0\xef\x7a\x1c\x6d\x5c\x45\xa5\x09\x23\xce\x8a\xdb\x33\xc2\x52\x0f\x78\x81\x54\x77\x48\
\x69\x1f\x4d\xaf\xcf\x6d\x5d\xf8\xd9\xe6\xaf\xda\x66\xca\x81\x71\x8b\xea\x81\x71\xab\xc8\x70\x36\xa9\xc3\x70\x38\x5b\x60\xd9\x69";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_36() {
    // shared secret has x-coordinate with repeating bit-pattern of size 64
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x8a\x3f\x60\xcf\xec\x64\x74\x5b\xf6\x25\x69\x6f\x2f\xe4\xb6\xe4\xce\x82\x08\x95\x4f\x4f\xc4\xda\x21\xf8\x7f\x9f\x7a\x2c\x32\x75\
\xb5\x4d\x90\x85\x1b\x39\x70\x75\x86\xdc\x6c\xce\xcc\xc5\xe5\x0a\x1e\x4a\x95\x54\x63\x10\x7d\x1d\x87\xc8\x25\x2d\xf2\x11\x0d\x6d";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_37() {
    // shared secret has x-coordinate with repeating bit-pattern of size 112
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xc8\x27\xfb\x93\x0f\xd5\x1d\x92\x60\x86\x19\x1b\x50\x2a\xf8\x3a\xbb\x5f\x71\x7d\xeb\xc8\xde\x29\x89\x7a\x39\x34\xb2\x57\x1c\xa0\
\x59\x90\xc0\x59\x7b\x0b\x7a\x2e\x42\xfe\xbd\x56\xb1\x32\x35\xd1\xd4\x08\xd7\x6e\xd2\xc9\x3b\x3f\xac\xf5\x14\xd9\x02\xf6\x91\x0a";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_38() {
    // shared secret has x-coordinate with repeating bit-pattern of size 112
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xfc\x85\xbf\xee\x05\x64\x78\xa1\x71\x75\x82\xac\xcd\x11\xed\x49\x00\x98\x91\xcb\xda\x5f\xe4\x0b\x9f\x4c\x17\x42\xe1\x27\xdb\x2c\
\x97\x03\x3f\x5f\x64\x05\xac\xfa\x57\x55\x3f\x1e\x37\x5a\x13\xe8\xd6\xe3\xa1\x15\x19\x58\xc7\x09\xbe\x50\x8e\x0b\xac\x78\x04\xd6";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_39() {
    // shared secret has x-coordinate with repeating bit-pattern of size 128
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x38\xbf\x17\x1c\xdb\xd4\xe2\xe7\x12\x85\x28\xdb\x43\xd8\x06\x55\xb7\x89\xe6\x9e\x6b\xa1\xd3\x6b\x62\xe4\xe5\x9d\x8e\xcf\x4c\x51\
\xbb\xe3\x24\x4e\x4f\xbf\x79\xf2\x45\x12\xf3\x0c\x4a\x60\x53\x14\x74\x9e\x2f\x20\xd8\x58\xec\x96\x10\x60\xa2\xca\xb4\x67\x01\x3f";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_40() {
    // shared secret has x-coordinate with repeating bit-pattern of size 128
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x24\x9f\x4f\x51\x7d\x77\x88\xd4\x62\x2d\x76\x2c\x43\x12\x10\x1f\xba\x71\xfe\x26\x57\xf1\xf2\xc3\x3c\x06\x13\xd2\xe2\x18\x90\xb7\
\x78\xf3\x2d\xa1\xb6\x1e\xd9\x38\x5c\xd5\x2f\x5e\x71\x03\xf7\x7b\x01\xb4\x03\xfb\x65\x37\xa0\xc0\xe8\x66\x19\x5d\x0a\x44\x8f\x34";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_41() {
    // shared secret has an x-coordinate of approx p//3
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xe9\xc0\xaf\x0b\xf6\xda\xdd\x8f\xbe\x04\xc5\xcf\x3f\xce\x80\x68\x3a\x9c\x26\x7b\x0d\xc9\x85\x0c\xbc\x1b\xcd\xfe\xb7\x44\xc3\x51\
\x6e\xfe\x87\x82\x23\xdd\x9d\xd9\x24\xe8\x3e\x3a\xb2\x2c\x9b\xf3\x04\x12\x9a\xb5\x9c\x1f\x3d\x30\xfb\x58\xb8\x77\x0b\xf9\xd9\xbf";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_42() {
    // shared secret has an x-coordinate of approx p//5
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x2b\x29\xf4\x82\xbc\x43\x55\x9f\x70\x44\x75\x84\x91\x9d\xf1\xe0\x37\x06\xee\x63\xc9\x87\xb6\xf7\x49\x9a\xe2\x9a\xb0\x1c\xa8\x28\
\xa4\xbd\x05\xd6\x1f\x59\x6e\x01\x62\x3a\x8e\x20\x76\xc0\x13\x88\x9f\xbb\x0f\x99\x37\xe4\x75\xa0\x0d\xdd\x75\xe6\xa9\x92\xe7\x76";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_43() {
    // shared secret has an x-coordinate of approx p//7
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x27\x66\xdc\x8e\x28\x9f\xd2\x76\x25\xd4\x76\x5e\xb0\x14\xaa\x54\xa4\x4a\x7d\x57\x24\x05\x0b\x94\x46\xe3\x63\x07\x1c\x26\x09\x13\
\xaf\xf9\xf1\xdc\x5e\x71\xb6\x66\x50\x1b\x24\xd7\x08\x05\xcb\x8e\x1a\x01\xee\x90\xca\x84\xcb\x0c\x6f\x7e\xa4\x53\xdf\x85\xf5\x20";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_44() {
    // shared secret has an x-coordinate of approx p//9
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xd3\x33\x14\xf1\x3a\x7f\xe8\x35\x7b\xfd\x7a\x11\x79\x94\x98\xe5\x5b\xc7\x82\xc6\xf4\x34\x85\x6d\x73\x3b\x66\x8e\x1d\x05\x44\x83\
\x48\xdc\x5a\xae\x3f\x64\x31\xdd\x20\xc0\x18\xf5\x4b\x1d\x65\xfd\x18\x64\xdd\xfe\xea\x04\xad\x75\x33\x97\x12\x37\xc6\x0a\xc0\xc7";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_45() {
    // y-coordinate of the public key is small
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x3c\xbc\x1b\x31\xb4\x3f\x17\xdc\x20\x0d\xd7\x0c\x29\x44\xc0\x4c\x6c\xb1\xb0\x82\x82\x0c\x23\x4a\x30\x0b\x05\xb7\x76\x38\x44\xc7\
\x4f\xde\x0a\x4e\xf9\x38\x87\x46\x97\x93\x27\x0e\xb2\xff\x14\x82\x87\xda\x92\x65\xb0\x33\x4f\x9e\x26\x09\xaa\xc1\x6e\x8a\xd5\x03";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_46() {
    // y-coordinate of the public key is small
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x28\x30\xd9\x64\x89\xae\x24\xb7\x9c\xad\x42\x50\x56\xe8\x27\x46\xf9\xe3\xf4\x19\xab\x9a\xa2\x1c\xa1\xfb\xb1\x1c\x73\x25\xe7\xd3\
\x18\xab\xe6\x6f\x57\x5e\xe8\xa2\xf1\xc4\xa8\x0e\x35\x26\x0a\xe8\x2a\xd7\xd6\xf6\x61\xd1\x5f\x06\x96\x79\x30\xa5\x85\x09\x7e\xf7";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_47() {
    // y-coordinate of the public key is small
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x45\x0b\x6b\x6e\x20\x97\x17\x8e\x9d\x28\x50\x10\x95\x18\xd2\x8e\xb3\xb6\xde\xd2\x92\x2a\x54\x52\x00\x3b\xc2\xe4\xa4\xec\x77\x5c\
\x89\x4e\x90\xf0\xdf\x1b\x0e\x6c\xad\xb0\x3b\x9d\xe2\x4f\x6a\x22\xd1\xbd\x0a\x4a\x58\xcd\x64\x5c\x27\x3c\xae\x1c\x61\x9b\xfd\x61";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_48() {
    // y-coordinate of the public key is small
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\xcf\x22\x30\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\x00\x00\x00\x01\xc7\xc3\x06\x43\xab\xed\x0a\xf0\xa4\x9f\xe3\x52\xcb\x48\x3f\xf9\xb9\x7d\xcc\xdf\x42\x7c\x65\x8e\x87\x93\x24\x0d";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_49() {
    // y-coordinate of the public key is small
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x11\x24\xf4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x0d\x12\xd3\x81\xb0\x76\x0b\x1c\x50\xbe\x8a\xcf\x85\x93\x85\x05\x2c\x7f\x53\xcd\xe6\x7c\xe1\x37\x59\xde\x31\x23\xa0";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_50() {
    // y-coordinate of the public key is small
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xea\x77\xd4\x49\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\x00\x00\x00\x00\x7a\xfb\xc0\xb3\x25\xe8\x20\x64\x6d\xec\x62\x2f\xb5\x58\xa5\x1c\x34\x2a\xa2\x57\xf4\xb6\xa8\xec\x5d\xdf\x14\x4f";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_51() {
    // y-coordinate of the public key is large
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x3c\xbc\x1b\x31\xb4\x3f\x17\xdc\x20\x0d\xd7\x0c\x29\x44\xc0\x4c\x6c\xb1\xb0\x82\x82\x0c\x23\x4a\x30\x0b\x05\xb7\x76\x38\x44\xc7\
\xb0\x21\xf5\xb0\x06\xc7\x78\xba\x68\x6c\xd8\xf1\x4d\x00\xeb\x7d\x78\x25\x6d\x9b\x4f\xcc\xb0\x61\xd9\xf6\x55\x3e\x91\x75\x2a\xfc";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_52() {
    // y-coordinate of the public key is large
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x28\x30\xd9\x64\x89\xae\x24\xb7\x9c\xad\x42\x50\x56\xe8\x27\x46\xf9\xe3\xf4\x19\xab\x9a\xa2\x1c\xa1\xfb\xb1\x1c\x73\x25\xe7\xd3\
\xe7\x54\x19\x8f\xa8\xa1\x17\x5e\x0e\x3b\x57\xf1\xca\xd9\xf5\x17\xd5\x28\x29\x0a\x9e\x2e\xa0\xf9\x69\x86\xcf\x5a\x7a\xf6\x81\x08";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_53() {
    // y-coordinate of the public key is large
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x45\x0b\x6b\x6e\x20\x97\x17\x8e\x9d\x28\x50\x10\x95\x18\xd2\x8e\xb3\xb6\xde\xd2\x92\x2a\x54\x52\x00\x3b\xc2\xe4\xa4\xec\x77\x5c\
\x76\xb1\x6f\x0e\x20\xe4\xf1\x94\x52\x4f\xc4\x62\x1d\xb0\x95\xdd\x2e\x42\xf5\xb6\xa7\x32\x9b\xa3\xd8\xc3\x51\xe3\x9e\x64\x02\x9e";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_54() {
    // y-coordinate of the public key is large
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\xcf\x22\x30\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xfd\x38\x3c\xf9\xbd\x54\x12\xf5\x0f\x5b\x60\x1c\xad\x34\xb7\xc0\x07\x46\x82\x33\x20\xbd\x83\x9a\x71\x78\x6c\xdb\xf2";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_55() {
    // y-coordinate of the public key is large
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x11\x24\xf4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\xff\xff\xff\xf1\xed\x2c\x7e\x50\x89\xf4\xe3\xaf\x41\x75\x30\x7a\x6c\x7a\xfa\xd4\x80\xac\x32\x19\x83\x1e\xc8\xa6\x21\xce\xdc\x5f";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_56() {
    // y-coordinate of the public key is large
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xea\x77\xd4\x49\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xfe\x85\x04\x3f\x4d\xda\x17\xdf\x9b\x92\x13\x9d\xd0\x4a\xa7\x5a\xe4\xcb\xd5\x5d\xa8\x0b\x49\x57\x13\xa2\x20\xeb\xb0";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_57() {
    // y-coordinate of the public key has many trailing 1's
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x9a\x0f\x0e\x3d\xd3\x14\x17\xbb\xd9\xe2\x98\xbc\x06\x8a\xb6\xd5\xc3\x67\x33\xaf\x26\xed\x67\x67\x6f\x41\x0c\x80\x4b\x8b\x2c\xa1\
\xb0\x2c\x82\xf3\xa6\x1a\x37\x6d\xb7\x95\x62\x6e\x94\x00\x55\x71\x12\x27\x3a\x36\xcd\xdb\x08\xca\xaa\x43\x95\x39\x65\x45\x47\x30";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_58() {
    // y-coordinate of the public key has many trailing 1's
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x8e\x5d\x22\xd5\xe5\x3e\xc7\x97\xc5\x5e\xcd\x68\xa0\x8a\x7c\x33\x61\xcd\x99\xca\x7f\xad\x1a\x68\xea\x80\x2a\x6a\x4c\xb5\x8a\x91\
\x8e\xa7\xa0\x70\x23\xef\x67\x67\x70\x24\xbd\x38\x41\xe1\x87\xc6\x4b\x30\xa3\x0a\x37\x50\xeb\x2e\xe8\x73\xfb\xe5\x8f\xa1\x35\x7b";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_59() {
    // y-coordinate of the public key has many trailing 1's
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x29\x3a\xa3\x49\xb9\x34\xab\x2c\x83\x9c\xf5\x4b\x8a\x73\x7d\xf2\x30\x4e\xf9\xb2\x0f\xa4\x94\xe3\x1a\xd6\x2b\x31\x5d\xd6\xa5\x3c\
\x11\x81\x82\xb8\x5e\xf4\x66\xeb\x9a\x8e\x87\xf9\x66\x1f\x7d\x01\x79\x84\xc1\x5e\xa8\x20\x43\xf5\x36\xd1\xee\x6a\x6d\x95\xb5\x09";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_60() {
    // y-coordinate of the public key has many trailing 1's
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xca\x08\x90\x11\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\x26\x7b\xfd\xf8\xa6\x11\x48\xde\xcd\x80\x28\x37\x32\xdd\x4c\x10\x95\xe4\xbb\x40\xb9\x65\x84\x08\x20\x8d\xc1\x14\x7f\xff\xff\xff";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_61() {
    // y-coordinate of the public key has many trailing 1's
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x6b\xd1\xe5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x40\x96\xed\xd6\x87\x1c\x32\x0c\xb8\xa9\xf4\x53\x17\x51\x10\x5c\x97\xb4\xc2\x57\x81\x1b\xbc\x32\x96\x3e\xaf\x39\xff\xff\xff\xff";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_62() {
    // y-coordinate of the public key has many trailing 1's
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x09\x9f\x55\xd5\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\x15\x2c\x1a\x22\xd8\x23\xa2\x78\x55\xed\x03\xf8\xe2\xab\x50\x38\xbb\x1d\xf4\xd8\x7e\x43\x86\x5f\x2d\xaf\x69\x48\xff\xff\xff\xff";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_63() {
    // y-coordinate of the public key has many trailing 0's
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x9a\x0f\x0e\x3d\xd3\x14\x17\xbb\xd9\xe2\x98\xbc\x06\x8a\xb6\xd5\xc3\x67\x33\xaf\x26\xed\x67\x67\x6f\x41\x0c\x80\x4b\x8b\x2c\xa1\
\x4f\xd3\x7d\x0b\x59\xe5\xc8\x93\x48\x6a\x9d\x91\x6b\xff\xaa\x8e\xed\xd8\xc5\xca\x32\x24\xf7\x35\x55\xbc\x6a\xc6\x9a\xba\xb8\xcf";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_64() {
    // y-coordinate of the public key has many trailing 0's
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x8e\x5d\x22\xd5\xe5\x3e\xc7\x97\xc5\x5e\xcd\x68\xa0\x8a\x7c\x33\x61\xcd\x99\xca\x7f\xad\x1a\x68\xea\x80\x2a\x6a\x4c\xb5\x8a\x91\
\x71\x58\x5f\x8e\xdc\x10\x98\x99\x8f\xdb\x42\xc7\xbe\x1e\x78\x39\xb4\xcf\x5c\xf6\xc8\xaf\x14\xd1\x17\x8c\x04\x1a\x70\x5e\xca\x84";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_65() {
    // y-coordinate of the public key has many trailing 0's
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x29\x3a\xa3\x49\xb9\x34\xab\x2c\x83\x9c\xf5\x4b\x8a\x73\x7d\xf2\x30\x4e\xf9\xb2\x0f\xa4\x94\xe3\x1a\xd6\x2b\x31\x5d\xd6\xa5\x3c\
\xee\x7e\x7d\x46\xa1\x0b\x99\x15\x65\x71\x78\x06\x99\xe0\x82\xfe\x86\x7b\x3e\xa2\x57\xdf\xbc\x0a\xc9\x2e\x11\x95\x92\x6a\x4a\xf6";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_66() {
    // y-coordinate of the public key has many trailing 0's
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xca\x08\x90\x11\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xd9\x84\x02\x06\x59\xee\xb7\x22\x32\x7f\xd7\xc8\xcd\x22\xb3\xef\x6a\x1b\x44\xc0\x46\x9a\x7b\xf7\xdf\x72\x3e\xeb\x80\x00\x00\x00";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_67() {
    // y-coordinate of the public key has many trailing 0's
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x6b\xd1\xe5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\xbf\x69\x12\x28\x78\xe3\xcd\xf4\x47\x56\x0b\xac\xe8\xae\xef\xa3\x68\x4b\x3d\xa9\x7e\xe4\x43\xcd\x69\xc1\x50\xc6\x00\x00\x00\x00";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_68() {
    // y-coordinate of the public key has many trailing 0's
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x09\x9f\x55\xd5\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xea\xd3\xe5\xdc\x27\xdc\x5d\x88\xaa\x12\xfc\x07\x1d\x54\xaf\xc7\x44\xe2\x0b\x28\x81\xbc\x79\xa0\xd2\x50\x96\xb7\x00\x00\x00\x00";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_69() {
    // ephemeral key has x-coordinate that satisfies x**2 = 0
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x66\x48\x5c\x78\x0e\x2f\x83\xd7\x24\x33\xbd\x5d\x84\xa0\x6b\xb6\x54\x1c\x2a\xf3\x1d\xae\x87\x17\x28\xbf\x85\x6a\x17\x4f\x93\xf4";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_70() {
    // ephemeral key has x-coordinate p-3
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfc\
\x19\x71\x9b\xeb\xf6\xae\xa1\x3f\x25\xc9\x6d\xfd\x7c\x71\xf5\x22\x5d\x4c\x8f\xc0\x9e\xb5\xa0\xab\x9f\x39\xe9\x17\x8e\x55\xc1\x21";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_71() {
    // ephemeral key has x-coordinate 2**16 + 0
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\
\x73\xca\x30\x64\x1a\xca\xbe\x58\x11\x70\xb4\xd5\x25\x3f\x7a\x34\x2b\x03\x9a\x87\xab\x24\x47\xba\xda\xd0\x8e\xce\x2c\xf1\x9f\x52";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_72() {
    // ephemeral key has x-coordinate 2**32 + 0
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\
\x32\x8b\xbc\x85\x09\x9a\xcc\x76\x85\xcf\x4b\xb5\xe1\x8d\x72\xc5\x72\x71\x61\x5c\xcd\x46\x37\x7b\xfa\xcb\x0e\x85\x01\xaa\x76\xfb";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_73() {
    // ephemeral key has x-coordinate 2**64 + 0
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\
\x10\x04\x8b\x68\x76\x75\xaf\x98\x15\x29\x7d\x73\xa7\xf2\x5b\x1a\x3c\x42\xd3\x3c\x64\xb4\x66\x99\x1a\x75\x73\xb4\x95\x4a\xa0\xb0";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_74() {
    // ephemeral key has x-coordinate 2**96 + 0
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x7d\x12\xde\x58\xd5\x44\x23\xeb\x85\xae\x8d\x15\x7a\xe4\x16\xfb\x00\x4a\x7e\xb5\x22\xac\x1b\x67\x04\x7e\xf3\xcd\xf9\xac\xdc\x3f";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_75() {
    // ephemeral key has x-coordinate that satisfies x**2 = -3
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x65\x22\xae\xd9\xea\x48\xf2\x62\x3b\x8e\xea\xe3\xe2\x13\xb9\x9d\xa3\x2e\x74\xc9\x42\x18\x35\x80\x4d\x37\x4c\xe2\x8f\xcc\xa6\x62\
\x2c\x7f\xda\x3c\x84\xb7\x04\xf2\x7f\xfc\x0b\x2a\xb3\x50\xd8\xcb\xc3\x3a\x34\xdf\x0c\x81\x11\x55\xed\x43\x89\xd2\x71\x0e\x3f\xa9";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_76() {
    // ephemeral key has x-coordinate that satisfies x**2 = 2
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x50\x74\x42\x00\x73\x22\xaa\x89\x53\x40\xcb\xa4\xab\xc2\xd7\x30\xbf\xd0\xb1\x6c\x2c\x79\xa4\x68\x15\xf8\x78\x0d\x2c\x55\xa2\xdd\
\x46\x19\xd6\x9f\x99\x40\xf5\x16\x63\xaa\x12\x38\x1b\xc7\xcf\x67\x8b\xd1\xa7\x2a\x49\xfb\xc1\x1b\x0b\x69\xcb\x22\xd1\xaf\x9f\x2d";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_77() {
    // ephemeral key has x-coordinate that satisfies x**2 = 5
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x08\x5e\xc5\xa4\xaf\x40\x17\x6b\x63\x18\x90\x69\xae\xff\xcb\x22\x9c\x96\xd3\xe0\x46\xe0\x28\x3e\xd2\xf9\xda\xc2\x1b\x15\xad\x3c\
\x78\x59\xf9\x7c\xb6\xe2\x03\xf4\x6b\xf3\x43\x8f\x61\x28\x23\x25\xe9\x4e\x68\x1b\x60\xb5\x66\x97\x88\xae\xb0\x65\x5b\xf1\x9d\x38";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_78() {
    // ephemeral key has x-coordinate that satisfies x**2 = 7
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x19\x0c\x25\xf8\x8a\xd9\xae\x3a\x09\x8e\x6c\xff\xe6\xfd\x0b\x1b\xea\x42\x11\x4e\xb0\xce\xdd\x58\x68\xa4\x5c\x5f\xe2\x77\xdf\xf3\
\x21\xb8\x34\x2e\xf0\x77\xbc\x67\x24\x11\x24\x03\xea\xee\x5a\x15\xb4\xc3\x1a\x71\x58\x9f\x02\xde\xd0\x9c\xd9\x9c\xc5\xdb\x9c\x83";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_79() {
    // ephemeral key has x-coordinate that satisfies x**2 = 8
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x5f\x17\x7b\xfe\x19\xba\xaa\xee\x59\x7e\x68\xb6\xa8\x7a\x51\x9e\x80\x5e\x9d\x28\xa7\x0c\xb7\x2f\xd4\x0f\x0f\xe5\xa7\x54\xba\x45\
\x62\xca\x11\x03\xf7\x0a\x20\x06\xcd\x1f\x67\xf5\xf6\xa3\x58\x0b\x29\xdc\x44\x6a\xbc\x90\xe0\xe9\x10\xc1\xe0\x5a\x9a\xa7\x88\xcd";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_80() {
    // ephemeral key has x-coordinate that satisfies x**2 = 2**96 + 2
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x34\x76\xa8\xfa\x9c\x74\x48\x12\x4a\xa9\x45\xa2\xe1\x10\x3e\xb9\x1f\x95\xc7\xb4\xd9\x1a\xaa\x1c\x35\xb8\x96\x51\x91\xfc\x0f\xe0\
\x4d\xda\xc1\x38\x68\x8d\xf5\x12\x3f\xa5\x76\x0d\x67\x02\x47\x89\x3f\x9a\xd5\xca\xd5\xe8\x88\x95\xa0\xae\x7f\xdf\x97\xb8\xf4\x12";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_81() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 2
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x54\
\x0a\x46\x71\x27\x90\xe6\x3f\x98\x1f\x01\x03\xb2\xa6\x09\xfa\x69\x1c\x52\x91\xa1\x79\x74\xeb\x0c\x3b\x51\x8f\xaa\xc2\x15\x35\xd6";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_82() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 2
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xa9\
\x38\x91\x42\xd4\x67\x6c\xee\x23\x32\xeb\x89\x09\xfa\x13\xf9\x5f\x20\xcd\xb3\xac\xc8\x31\xa2\x31\x80\x2a\x48\x58\xa9\x73\xca\x63";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_83() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 4
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\
\x11\x48\x92\x12\xaf\xf7\x9c\xbe\xd5\xb6\x44\x01\x61\xd5\x7c\x98\xa3\x4e\x6b\x80\xec\x38\x54\xc3\xb2\x85\x5a\xf3\x5f\x0d\x17\xe1";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_84() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 4
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\
\x75\x55\x24\x86\xfd\x8e\x6b\xc4\x24\x49\x22\x04\x20\x7f\xec\xe5\x9d\x93\xfb\x12\x43\x90\x49\x7f\x84\x1d\x9c\x80\x8c\x8c\xc3\xec";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_85() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 8
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\
\x03\x42\x5b\xa0\xd8\xa0\x18\xb4\x28\x61\xe8\x16\xc7\x9a\x17\xd3\xb4\x7d\xf8\xf5\xf7\x10\x7c\x18\x11\x68\xe9\xed\xc6\x2c\xb3\xcf";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_86() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 8
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\
\x17\xb4\x1b\xf7\x2c\x9f\x5e\xc2\x04\xdb\xa0\xde\xb5\xdf\xaa\x43\xb7\x93\xa8\x3b\x24\x30\x60\xd0\x37\x5b\x96\x9e\x04\x16\xbd\x56";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_87() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 16
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xf9\
\x18\x46\x11\x38\xbc\xa4\x61\xc0\x0f\xc4\x74\xda\x0e\x4e\x35\x30\x9b\xe5\x20\xe2\xe1\x09\xe1\x7a\x1c\xec\xb8\x92\xb9\x65\x98\xf6";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_88() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 16
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xfe\xff\
\x2d\x6c\x62\xa4\x78\x83\xc5\x89\x9c\xac\x06\xb1\x36\x7c\x21\x94\x86\x89\xd5\x22\x67\x4a\x60\xf4\x3f\x4b\x80\x8a\xdf\x61\x8b\x0b";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_89() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 30
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x7f\xff\x00\x01\xff\xfc\x00\x07\xff\xf0\x00\x1f\xff\xc0\x00\x7f\xff\x00\x01\xff\xfc\x00\x07\xff\xf0\x00\x1f\xff\xc0\x00\x7f\xff\
\x2e\x22\x13\xca\xf0\x30\x33\xe0\xfd\x0f\x79\x51\x15\x4f\x6e\x6c\x3a\x92\x44\xa7\x2f\xac\xa6\x5e\x9c\xe9\xee\xb5\xc8\xe1\xce\xa9";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_90() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 30
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x80\x00\xff\xfe\x00\x03\xff\xf8\x00\x0f\xff\xe0\x00\x3f\xff\x80\x00\xff\xfe\x00\x03\xff\xf8\x00\x0f\xff\xe0\x00\x3f\xff\x7f\xfe\
\x1d\x3b\x68\x4a\x87\x95\x81\x43\xf2\x50\xbf\x5a\x2f\x78\x59\xfd\x03\x66\x20\xb4\xdc\x18\xda\xcd\x1d\x0c\x8c\x42\xee\xb2\xe5\x4a";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_91() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 32
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xfe\
\x7c\xcb\x5c\x10\xc0\x28\xf3\x31\x23\x0d\xd0\xa0\x05\xe9\xfa\xf3\x78\x64\xc1\x98\xc5\xbf\x7d\x91\xbd\xd7\x16\x24\x52\x0d\x4b\x04";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_92() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 32
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xfe\xff\xfd\
\x62\x0b\xbe\x0a\x62\x17\x48\xea\x2b\x0e\x0d\xfa\x46\x31\x69\xe7\xc8\x05\x41\x2f\x43\x74\xdc\x97\x55\xc4\xdb\x93\x98\x9a\x75\x29";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_93() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 51
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x80\x00\x00\x3f\xff\xff\xf0\x00\x00\x07\xff\xff\xfe\x00\x00\x00\xff\xff\xff\xc0\x00\x00\x1f\xff\xff\xf8\x00\x00\x03\xff\xff\xfc\
\x0c\x35\x27\xbd\x08\x1c\x1c\x07\xb3\x13\xbc\x1a\x0c\x3f\x84\x5f\xb2\xfe\x22\x55\x76\x99\xcc\xc8\xf1\x35\x4e\x61\xa2\x7b\x7f\x88";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_94() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 51
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x7f\xff\xff\xe0\x00\x00\x0f\xff\xff\xfc\x00\x00\x01\xff\xff\xff\x80\x00\x00\x3f\xff\xff\xf0\x00\x00\x07\xff\xff\xfd\xff\xff\xfe\
\x23\x2a\xa1\xc6\x7f\x77\xcf\xb0\x0e\x73\x89\x8c\xf4\x31\x83\x10\x73\xc6\xb2\xa4\xbf\xa1\x13\x58\x81\xa0\x59\x57\x20\x75\x9e\xce";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_95() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 52
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x03\xff\xff\xff\x00\x00\x00\x3f\xff\xff\xf0\x00\x00\x03\xff\xff\xff\x00\x00\x00\x3f\xff\xff\xf0\x00\x00\x03\xff\xff\xff\
\x15\x82\xfa\x32\xe2\xd4\xa8\x9d\xfc\xfb\x3d\x0b\x14\x9f\x66\x7d\xba\x33\x29\x49\x0f\x4d\x64\xee\x2a\xd5\x86\xc0\xc9\xe8\xc5\x08";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_96() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 52
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\xff\xff\xfc\x00\x00\x00\xff\xff\xff\xc0\x00\x00\x0f\xff\xff\xfc\x00\x00\x00\xff\xff\xff\xc0\x00\x00\x0f\xff\xff\xfb\xff\xff\xff\
\x73\xf4\x71\x90\x9c\xfd\xe3\xdb\x2c\x13\x52\x3b\xcf\x37\x28\x77\xc2\x8d\x23\xed\x1f\xf6\xa3\x32\x6d\xf6\xbb\xc4\xb7\x56\x72\x3e";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_97() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 60
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\xff\xff\x00\x00\x00\x03\xff\xff\xff\xf0\x00\x00\x00\x3f\xff\xff\xff\x00\x00\x00\x03\xff\xff\xff\xf0\x00\x00\x00\x3f\xff\xff\xff\
\x2c\x63\x65\x0e\x6a\x5d\x33\x2e\x29\x87\xdd\x09\xa7\x90\x08\xe8\xfa\xab\xbd\x37\xe4\x9c\xb0\x16\xbf\xb9\x2c\x8c\xd0\xf5\xda\x77";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_98() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 60
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\xff\xff\xff\xfc\x00\x00\x00\x0f\xff\xff\xff\xc0\x00\x00\x00\xff\xff\xff\xfc\x00\x00\x00\x0f\xff\xff\xff\xbf\xff\xff\xff\
\x71\x66\x4e\xf9\x0d\x87\x52\x5d\xdf\x78\x15\xe6\x76\xae\x3b\x96\xc2\x5e\xd9\xe7\xbd\xaa\x05\xda\x96\x22\x7a\x1f\xe3\x8c\x3d\x11";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_99() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 62
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\xff\x00\x00\x00\x01\xff\xff\xff\xfc\x00\x00\x00\x07\xff\xff\xff\xf0\x00\x00\x00\x1f\xff\xff\xff\xc0\x00\x00\x00\x7f\xff\xff\xff\
\x5d\xf8\x0f\xc6\xca\xe2\x6b\x6c\x19\x52\xfb\xd0\x0e\xd1\x74\xee\x12\x09\xd0\x69\x33\x5f\x5b\x48\x58\x8e\x29\xe8\x0b\x91\x91\xad";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_100() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 62
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\xff\xff\xff\xfe\x00\x00\x00\x03\xff\xff\xff\xf8\x00\x00\x00\x0f\xff\xff\xff\xe0\x00\x00\x00\x3f\xff\xff\xff\x80\x00\x00\x00\
\x07\xbc\x25\xfb\x4d\x2b\x4c\xd1\x2a\x16\x51\x57\x25\xd6\x4c\xdb\xd5\xbc\x86\xb7\xf8\x4e\xf0\x05\xc9\xe5\x1d\x07\x00\xa3\xa4\xb8";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_101() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 64
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xfc\
\x4d\xe9\xde\x69\x42\xe7\x70\x03\x3f\x5f\x1d\xef\xbb\x36\x24\x9e\x6b\xdf\x45\xa3\x3e\x2e\xf4\xec\x75\xa7\xad\x88\x0b\x54\x32\xc8";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_102() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 64
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\
\x46\x2e\x0f\x73\x77\xa8\x1a\x3a\x47\xa2\x8e\x62\xdd\x81\x05\x68\x7e\x45\x74\x96\xc6\x1f\xdc\xe4\x9b\xa1\xaa\xee\xfc\xf1\x0b\x44";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_103() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 112
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\
\x7a\x11\x6c\x96\x4a\x4c\xd6\x06\x68\xbf\x89\xcf\xfe\x15\x77\x14\xa3\xce\x21\xb9\x3b\x3c\xa6\x07\xc8\xa5\xb9\x3a\xc5\x4f\xfc\x0a";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_104() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 112
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\
\x12\xa6\x9a\xaa\x5d\x3a\xc4\xce\xe0\x75\x92\xea\x09\x89\xdd\x9f\x42\x6a\x0e\x4d\x16\x80\x7b\x6c\x6d\x04\xba\xa6\x28\xa6\x59\xc0";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_105() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 128
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xfd\
\x13\x7b\xd0\x06\x82\x0a\x8b\xe2\x34\x75\xea\x25\xd8\xfa\x05\xc8\xed\x47\xfc\xa1\x23\x6c\xd5\xd1\xf0\x76\x67\xdb\x6f\xcd\x29\x79";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_106() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 128
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x7f\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\
\x32\x2a\x53\x13\xa9\x94\x31\x2a\x3f\x04\x7d\x5a\x9c\x6c\xde\xda\x17\x3f\x1d\x3b\x35\x14\x3b\x3b\x1a\x59\x4f\x7d\xbe\x54\x4d\x0e";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_107() {
    // ephemeral key has an x-coordinate of approx p//3
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x55\x55\x55\x55\x00\x00\x00\x00\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xab\
\x79\xdf\xbf\xa5\xe6\x6f\xbe\xa3\x0e\x75\xec\xc7\x03\xe6\x5d\xb4\x3e\x02\x74\x16\xc0\x1f\x6e\x20\xfe\x12\x9b\xe0\xe4\x34\x57\xd8";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_108() {
    // ephemeral key has an x-coordinate of approx p//5
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x33\x33\x33\x33\x00\x00\x00\x00\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x66\x66\x66\x66\x66\x66\x66\x66\x66\x66\x66\x66\
\x10\xa4\xea\x9b\xc3\x65\xe1\xb2\x24\xb1\x73\xe9\xfd\x68\x8a\x52\x34\x93\x2e\xc9\x0a\x5c\xb9\xec\xc0\xa2\x2a\x10\x99\x27\xe7\x3b";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_109() {
    // ephemeral key has an x-coordinate of approx p//7
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x24\x92\x49\x24\x6d\xb6\xdb\x6d\xdb\x6d\xb6\xdb\x6d\xb6\xdb\x6d\xb6\xdb\x6d\xb7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x5e\xbb\xe9\x06\xd1\x4c\xfa\x3e\x7e\x90\xd3\x97\x97\x3f\x09\x3a\x6c\x67\x8a\x23\xbc\xb2\x89\x61\x89\xff\xec\xe5\xa1\xca\x39\x8e";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_110() {
    // ephemeral key has an x-coordinate of approx p//9
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x1c\x71\xc7\x1c\x55\x55\x55\x55\x71\xc7\x1c\x71\xc7\x1c\x71\xc7\x1c\x71\xc7\x1c\x8e\x38\xe3\x8e\x38\xe3\x8e\x38\xe3\x8e\x38\xe4\
\x6e\xf4\x88\x58\x1f\xbb\xd6\xb4\xef\x78\xd0\x3c\xdd\x16\x12\x72\x24\x3f\xdc\xc1\x09\x79\xfd\x8e\x8f\xd1\x99\xb9\x8a\x63\xd3\x78";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_111() {
    // edge case for computation of x with projective coordinates
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x85\x1e\xb1\xb8\x69\x9d\x1c\xc0\x1c\x6b\x60\x48\x13\x97\x97\xda\xb3\x98\x1c\x92\x4f\x9e\xf8\x1b\xd1\xf4\x64\xc3\x18\x2c\x87\x09\
\x01\x28\x5b\x2a\xe7\xcb\xca\xbf\xd5\xbc\xcb\x94\x41\xeb\x33\x76\xb4\x91\x59\x5f\x60\xa1\xec\x21\xdb\xe9\xf9\x72\xbc\x32\xab\xbe";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_112() {
    // edge case for computation of x with projective coordinates
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xf5\x76\xe2\x27\x47\xf6\xc7\x7a\x8f\x68\x5a\x7a\x7b\x52\x73\x63\xe0\xfe\x7d\x35\x1a\x9e\x3f\x59\x23\xff\xf2\xbf\x97\xe9\x1a\xf4\
\x1e\x57\x5d\x40\x03\x31\xcf\xc9\xf9\x71\x80\xd8\xa4\x8c\x41\x8c\x5a\x98\x26\x09\xfa\xb8\x89\x37\xd2\x59\x0b\xfd\xaf\x37\xd6\xa4";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_113() {
    // edge case for computation of x with projective coordinates
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x31\x07\x85\xfa\x42\xc3\x7b\xd2\x00\x78\x1d\x70\xe3\x85\x9b\x39\xb2\xfa\x1d\x28\x6a\x3b\x6c\x4f\x60\x5a\x41\xe0\x45\x63\x4b\x81\
\xb8\xd3\x25\x64\xa7\xa2\x32\xc5\xd4\x74\x07\xa7\x79\x5c\x01\xed\xa8\x19\xf2\x3a\x5a\x19\x01\x49\xeb\x8c\x9a\xbf\x94\xed\x7c\x49";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_114() {
    // edge case for computation of x with projective coordinates
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x81\xbf\xb5\x5b\x01\x0b\x1b\xdf\x08\xb8\xd9\xd8\x59\x00\x87\xaa\x27\x8e\x28\xfe\xbf\xf3\xb0\x56\x32\xee\xff\x09\x01\x1c\x55\x79\
\x73\x2d\x0e\x65\x26\x7e\xa2\x8b\x7a\xf8\xcf\xcb\x14\x89\x36\xc2\xaf\x86\x64\xcb\xb4\xf0\x4e\x18\x81\x48\xa1\x45\x74\x00\xc2\xa7";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_115() {
    // edge case for computation of x with projective coordinates
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x02\x49\x5a\xc9\xf4\x3e\x45\xaa\xe3\x0d\x33\x66\xe3\x51\xcc\x08\x82\x8c\xf3\xe1\x1c\xc3\xb7\x20\x9f\xbd\x17\x30\xc4\xa1\x4f\x4e\
\x4a\xaa\x98\xdb\xe0\xd9\x4c\xaa\x44\x53\x8f\xcf\x79\x49\xeb\x44\xde\xbb\x7b\xcd\x22\x8a\x54\xd9\xcd\x9b\x3c\x2e\xdd\xf9\x46\x11";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_116() {
    // edge case for computation of x with projective coordinates
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xef\xe7\x75\x4e\xd4\xc0\xb3\xc1\xdd\x30\x1b\xc1\xed\x69\x80\x0a\xa2\xff\x5d\x51\xfb\x85\x93\x77\x15\xe6\x0d\x2e\x7b\xca\xda\x8e\
\x4e\xa7\xe5\x47\xa0\x4c\x38\x69\x10\x6b\x56\x24\x5c\x27\xda\x97\x37\xb9\xe8\x16\x0c\x05\xfb\x0d\x86\x04\x02\x76\x70\x8f\xb9\xfb";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_117() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x66\xae\xda\x76\xd7\x39\x83\xca\xf2\xde\x92\x1a\xf3\x89\x26\x8c\xef\xfd\x27\x8f\xb9\xec\xcf\x92\x87\x02\xb1\xf4\x27\x1b\x43\xf1\
\xd6\x46\xd6\xcf\x8b\xc1\x1a\x0e\xf9\x7c\xd6\x4c\x08\xa1\x1f\x72\xf9\x4a\xf4\xe6\xb3\xc9\x87\x0b\x8e\xb3\xa5\xb0\x36\xc0\x4f\xb8";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_118() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xf4\x83\x60\x27\x87\x97\x2c\xf7\xb7\x58\x2d\x8e\x2f\x2c\x79\x98\xe5\x37\xca\x57\xeb\xa6\x97\x18\xb6\x8d\x96\x24\x0f\x03\x5b\x1b\
\x55\xdc\xb4\xf7\xbe\x7b\x79\xc4\x69\xba\x8a\x0b\x10\x49\x00\xd7\x05\x3f\xfc\xac\x04\xf3\x94\xbe\x92\x5f\xe0\xcf\xf2\xe9\x69\xc3";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_119() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x57\x9b\xe7\x7f\xa6\x69\x8c\x4b\xaf\x01\x32\xd2\xf7\x99\x3e\xd7\x6d\xfd\x36\xd7\x8b\x58\x46\x05\xe1\xbe\x02\x45\x95\xe3\xad\x51\
\xc0\x69\x47\x3e\x1b\x25\xfd\x94\xa4\x2b\x68\xcc\xb3\x00\x4a\x85\x15\x93\xa3\xaf\x78\xf9\x22\xd9\x09\x20\xd8\xa8\x77\xc3\x65\xf3";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_120() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x7f\x81\x28\xd8\x83\xbe\x31\x87\x3e\xfe\xda\xb6\x99\x20\x6f\x88\x9b\x77\x6b\xe2\x70\xe1\x63\xdf\x43\x03\x54\x09\xfa\x52\x15\xf1\
\xf3\x6c\x35\x81\xf8\xf8\xd5\x69\xa4\x32\x3f\x87\x00\xca\x09\x79\x21\x50\x42\x15\x21\xe2\xef\x0a\x96\xae\x9a\x4c\xae\xd0\xe0\x2c";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_121() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xee\x5d\x94\xbf\xb5\xdb\x9c\xfe\x51\x1a\x3a\xa7\x0b\xaf\xc9\x3d\xb9\x31\x07\x38\x3c\x12\xf5\xbe\xbf\xfd\x90\xc6\x21\xa2\x05\x1d\
\xb4\xfc\xe1\x32\x61\xd5\x4a\xb2\x9c\x3c\x69\x9b\x77\x35\x8e\xdb\x54\xc7\x18\x01\xf3\xfe\x2a\x0d\x5c\xdf\x2e\xe3\xf1\x84\xb4\xd6";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_122() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x0e\xc4\xf8\x84\x52\x26\xe8\x64\xc0\x88\x50\x5d\x72\x1a\x21\x55\x19\x0d\x4c\xaa\x9a\x1f\x5a\x3f\x0a\xfd\xf2\xff\x49\xcf\x6d\x8b\
\xad\x01\xfd\x38\x08\xaa\x03\x44\x2c\xf5\x39\x6e\x10\xe1\x3e\xfd\x24\xcb\xd5\xa5\x28\x62\x82\x2e\xb6\x2d\xfd\x27\xb5\x04\x06\x00";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_123() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x31\x07\x89\x2f\x34\x27\x84\x2c\x8d\x6a\xa6\x0a\xfb\x1d\x3b\x14\x41\xe2\x8a\x67\xf1\x0e\x11\x98\xa0\x72\x65\x12\x5b\xbd\xa7\xe2\
\xca\x9d\x6d\xf7\x58\x90\x4f\x22\x07\xcd\xdb\x86\x28\x06\xaf\x0b\x8c\xb6\x6a\xd7\x2b\x16\x1b\x4d\xc9\x59\xac\xf6\x14\xfc\x2f\x90";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_124() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x09\xe5\xc4\x14\xb7\xf5\x07\x38\x58\x55\x3b\x8b\x8b\x42\x95\x48\x8e\x3f\x3a\xb9\x66\x58\x1f\x24\x0a\x61\x24\x25\x15\x12\x27\x0f\
\x8f\xc1\x25\x63\xfb\x9b\xd6\xf9\x7b\x44\x54\x17\xcf\xb1\x4c\xf9\x94\x4b\xac\x1a\x26\xc1\x76\xb5\x32\xb6\x98\xea\x8c\x1b\xed\x6f";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_125() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xf9\x3b\x07\x96\x92\x11\xca\xfc\x1a\x30\xc5\xc5\x78\xc8\xbf\x35\xbe\x63\xa0\x4d\xaa\x2b\xa4\x34\xda\x8b\x5e\x4b\x83\x76\x9e\xf5\
\x54\xb0\x22\xe4\xf7\xf4\x06\xbc\x93\xe7\x1a\x87\x19\xad\x0c\xcc\x39\x27\x55\xce\xb2\x74\xe2\x48\x82\x9a\x72\x54\x0e\x95\xf1\x69";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_126() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x51\x36\x09\x65\x7f\x90\x29\x24\xe9\x21\xda\xb1\x41\x16\x85\x31\x6b\x41\xd2\xbf\xc0\xbe\x53\xd1\xde\x49\xdb\x9c\x1c\xa7\x8e\x55\
\x14\x1d\x36\x50\x1a\xac\x4b\x47\xdb\xf2\x4f\xad\x43\xe4\x7b\xac\x11\x15\x96\xc0\x5f\x66\xef\x69\x25\x8d\xdf\x02\x27\xe8\xe7\xad";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_127() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x93\xeb\xaf\x5e\xcc\x0a\xa4\x86\xe7\xe7\x35\x13\x06\x11\xab\x5b\x16\x5f\xe3\x95\xa4\xf1\xea\x8f\x82\x09\x7c\xe4\x22\xf4\x42\x02\
\xae\x85\x5c\x1e\xb4\xc3\x34\xf5\x3b\x87\xe4\x26\x80\x1a\x03\x76\x83\x7d\xb2\xc8\x61\x37\x52\x28\x94\xef\x6d\x9d\x69\x52\x01\x63";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_128() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x11\xfd\x00\xb1\x8e\xfc\x4e\xfa\x07\xe8\x78\x78\xb5\xdf\x2e\x7a\x59\x6f\x93\xb9\x50\xe5\x0e\x9a\xdd\xa4\x0d\x4e\x6a\xc8\x54\xc0\
\xcc\x47\xed\xcf\x53\x3f\xe0\x3a\x61\x4c\x03\xa7\x09\xc9\xd0\xc0\xcf\x8d\xbf\xd4\xe2\x14\x0b\x5b\x2d\xf2\x38\x48\xb4\x95\x48\xc2";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_129() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x50\x1a\x72\x04\x4f\x83\xc5\x17\x31\x66\x28\xb0\xbc\x9d\x89\xab\x82\x13\x1b\xc1\x2d\xf3\x6c\x7a\x42\xb9\x52\xd5\xbc\x23\xc8\x51\
\x82\xba\x29\x06\xe1\x04\xdd\x0a\x7e\xed\x7b\x0b\x17\x72\xe1\x2b\x3b\x3b\x7f\x40\xa2\xdf\x04\x91\x74\xfa\xb0\x9a\x02\xa1\xa5\xbf";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_130() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x1f\x3d\x7d\x05\xb8\x46\xea\xb4\xda\xc4\xdb\x69\x5a\x44\x1f\x19\x4c\x22\x68\x21\xf5\x42\x9f\x66\xab\xa4\xae\x0e\x6b\xa5\xb9\x04\
\x00\x33\x4b\x91\xfd\x40\x73\xd1\xb7\xc3\x54\xbd\x62\xf6\xbc\xed\x7c\xdb\xbb\xd7\xc2\xd3\x92\xb0\x3a\xc1\xfe\x52\xdf\x08\x40\x69";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_131() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x11\xcc\xde\x06\xe8\xde\x88\xd1\x92\x89\x7f\xd0\xf7\xbb\x58\x96\x55\x3a\x52\x4d\xf3\x19\xe4\x59\x4a\x55\x62\x3b\xc7\x64\x62\xe1\
\x22\xa1\x70\xde\x0b\x94\x42\x31\x4a\x94\x7f\xbf\x5e\x03\x58\x80\xb5\x62\xef\x88\xe3\xac\x98\x59\x4f\x48\xab\xc6\x37\x41\x33\x7b";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_132() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x59\x4b\x08\x52\x72\xf8\x9f\xae\x68\x13\xfd\x39\x44\xba\xdd\xbb\x9f\x2b\x18\x23\x62\x73\xcd\xab\xf3\xe6\x07\xa7\x37\x14\xa2\x52\
\x95\x60\x35\xb2\x53\x1b\x98\xfd\xaf\xa6\x3e\xe7\xe7\x27\x52\xef\x03\xca\xa9\xeb\xbb\x16\x97\xa1\x8e\x6d\x31\xe1\x49\x48\x5e\x5d";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_133() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x82\x38\xf0\x48\xc2\x92\xe0\x8d\x49\xbd\xb5\xda\xb1\xf0\x8d\xa6\xd3\x9c\xdb\xef\xb1\xd7\x5e\x03\xe7\x60\x48\xb9\x03\xd6\xba\xf9\
\xc7\x61\xb2\x5a\xfb\xf0\x41\xe0\xe6\x5e\xb9\xe0\x13\xc3\x36\xfb\xfc\x36\x41\x34\x35\x5f\xd1\x0a\x86\xc2\x58\xde\x3e\x19\xa8\x57";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_134() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x2d\x08\xcf\x12\x30\x46\x3b\x71\x02\xe8\xa5\x41\x85\x98\x6a\x62\xa3\xf2\x52\x0c\x0c\x15\x1a\xce\x12\xf5\xd0\x73\xa4\x0c\xbb\x2f\
\xec\xb8\xc2\xed\x0a\x72\x21\x85\xe9\x87\xcf\x7c\x32\xac\xc4\x21\x33\xf6\xdd\xb7\x23\x0e\xa4\x8d\xc0\xf7\xc6\xb5\xa4\x3a\x4c\x0f";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_135() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xbc\xd1\xf2\xa7\x5e\xee\x0b\xaf\x7e\x0f\x55\xbb\xb1\xc8\x76\x96\x6d\x9d\x5d\x21\xf0\x2a\x14\x5a\xc9\x66\x84\x91\xe4\xca\x5e\x51\
\x1c\x5b\xe7\x4b\x40\x82\x59\x6f\x2c\x6c\xdb\xdb\x6c\xc9\x08\x38\x95\xf3\x33\xce\xe8\x07\x5c\x26\x50\x96\x3e\x7e\x72\x79\x06\xe6";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_136() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x47\x00\xbc\x54\x8e\x9d\x62\x56\xec\xe3\x82\x11\x2b\x93\xf8\x78\x0f\xd2\xe4\x27\xf6\x90\xc3\x5b\xf3\x1f\x68\x22\x84\x11\x9c\x72\
\x5e\xa4\x08\xd7\xfc\x65\x99\xbd\x2b\x0e\x75\x4f\x9d\xe1\x66\xea\x47\xa4\xe4\x8b\x14\x92\x5f\xa7\xbb\x63\x5e\xf0\x96\x42\xaf\x05";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_137() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xa0\xb3\x51\x86\x4a\x8c\x47\xba\x44\x56\x34\xbc\x10\x7f\xed\x06\x45\x1f\x97\x39\x1c\x55\x92\x1d\xb6\x1e\x74\xca\x52\x7a\x6a\x45\
\xfa\xb2\x7b\x18\x96\xd5\x2d\xf4\x61\x1f\x62\x74\x14\xc4\x8b\xa7\xa1\x31\x76\x60\x02\xd5\x52\x3f\xf8\x83\xa4\x99\x76\x9a\x42\x2b";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_138() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x13\x50\xca\xc3\x74\xbb\x07\x6e\xe8\x9e\xb8\xaf\x43\xd0\x76\xaf\xc7\x31\x20\x21\x00\x64\x31\xfd\x90\x9d\x22\xdf\x06\x4f\x66\x37\
\x24\x4f\x23\x6a\x65\xe7\xc1\xc7\x78\xf6\xca\xc2\xd9\xb4\xec\x3b\xd9\x99\xac\x18\x57\x97\xa2\x27\xcf\x00\x55\x2d\x6a\xa5\x16\x3a";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_139() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xc1\x85\x50\x8f\x46\x4f\x67\xaa\xcc\x24\xfa\x85\x9e\x74\x4f\xe5\x7c\x3e\xce\xf2\xfa\x91\x1c\x16\xdd\x2c\xbd\x07\x3b\x30\x8a\xaa\
\x8f\xef\x47\xdc\xef\x6b\x0f\xba\x62\x05\xf0\xb7\xe2\x3d\x17\x75\x8f\x1d\xf5\x40\x1c\xd9\xa3\x9d\xe4\x2b\x07\xb9\x2d\x15\x36\x25";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_140() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xdc\xcf\xf1\x94\xa9\xd3\x07\xb5\x90\x0a\x13\xf2\xd7\xa1\x92\xf6\xe8\x28\x45\xaf\x10\x07\xc9\x51\xb5\xb9\x72\x0b\xff\x98\xd0\xa0\
\x28\xfb\x8b\xa9\x23\x8a\xd5\x37\xe0\xd7\xf3\x14\x44\x08\x66\x11\x43\x0a\xba\xea\x54\x79\x13\xa0\x59\x1d\xd9\x08\xec\xd8\x64\xb5";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_141() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x0c\xb0\x5c\xb7\xa4\xb0\x1d\xb1\x38\x26\x20\xca\x75\x62\x85\xe1\xa7\xc6\x84\x6b\xbb\x59\x5c\xbb\xac\x9f\x89\xe0\xa6\x24\x89\xcc\
\xa8\x88\x29\xc9\x5f\x6b\x2e\x81\x87\xd2\xe1\xc3\xa7\x44\xf4\x1d\x3e\xbc\x98\xfa\x01\x74\x8b\x12\x48\x46\x2b\x35\x02\x56\xa5\xe8";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_142() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xf9\x58\x94\xcf\xe4\xf1\x4c\xcc\x48\x3a\xdf\x9c\xdf\x10\x67\x09\xe3\xec\xa5\xce\xb2\x0e\x7c\x14\x5d\x3b\xf1\x8b\x6a\xea\xa8\x03\
\x9c\x42\xc0\xc8\xc3\xdb\x57\xe0\xbb\xb2\x59\x3e\xbe\x08\x87\x71\xeb\xd0\xe2\x85\x7f\xc2\xa8\x77\xc3\x74\x8a\xda\xcd\x03\x85\x42";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_143() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x16\xa8\xb9\x3a\x6b\x95\x29\xb5\x92\x05\x66\x13\x1a\x79\x2c\x55\x4a\xc4\x21\xaf\x3a\x4b\xfc\x34\x14\x08\xd1\x4d\xdc\x89\x71\xc5\
\xf6\x0e\xa4\x66\x34\x49\xbf\x3e\xc7\x47\x48\x1d\x73\x0c\x4d\x97\xa1\x56\x5b\x5b\xb2\x07\xe2\x7e\x55\xae\xc8\x89\x69\xf2\x02\x3e";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_144() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x7d\x9c\x0f\x7a\x01\x1d\xe0\x80\xda\x8e\x6e\x22\x5f\x72\x11\xe7\x29\xc2\x94\x25\xc9\xdc\x9a\x28\x9d\x5c\xf8\xa0\xf6\x35\x89\xaa\
\x12\x9b\x3b\xfc\xb4\x33\xff\x08\x44\x09\xe3\x2f\x73\x74\x1e\x59\x29\x13\x00\x33\x67\x12\x3b\x3e\x6e\xc4\xb7\xfc\x39\x8d\x1b\x29";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_145() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xfe\xa5\x45\x80\xf4\x09\x62\x99\xc1\x7c\x28\x1a\x3f\xcf\x67\x38\x22\x6b\x63\x6c\x85\xe8\xef\xd3\x60\xa4\x41\x38\x48\xb0\x78\x81\
\xfd\x47\x18\x1a\xe8\xc3\xad\x89\x48\xf6\x5d\x8c\x84\x5a\x86\x3b\x2f\x86\xa6\xce\x8a\xa3\x7a\x5e\x5c\x20\xd3\xe9\x6f\xc9\xc8\x84";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_146() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x08\xbe\xac\xc0\x4a\xc2\x7e\x38\x39\xce\x74\xd5\x15\xd2\x38\xaa\x98\xe1\xaa\x1b\x5e\x58\x0f\xc5\xfa\xe0\x11\x6e\x52\x0d\x88\x0c\
\xba\x05\x85\xf7\x23\xc4\x4f\x24\x38\x13\xb0\x7e\x2d\x76\x26\x60\x5e\xe5\x86\x15\x23\xd1\xac\x07\x54\x79\xda\x77\x3e\xfe\x02\x6e";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_147() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x8c\xc2\x80\x70\x89\xcc\xab\x7b\xdf\xbf\x16\x97\xf1\x53\xd4\xee\xa6\x3f\x30\x43\xce\x63\x13\x5f\x6b\x90\x6f\x82\x35\xf7\x6b\xf9\
\x9e\xbd\xb2\xc2\x6b\x09\xf4\x9b\x12\x2d\x1a\xc7\x3a\x8b\xa3\x7c\xe9\xc3\x85\xc0\x26\x9c\x4e\x40\xac\x3a\x9c\x20\x31\x4a\x44\x37";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_148() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xe8\x54\xfe\xd8\x84\xe6\xc7\x62\x77\xaf\x9d\x8d\xc8\x3d\xf6\x6b\x81\x47\x8a\x8f\xff\xf2\xc3\x13\xf2\x2a\xbf\x0f\x8d\x44\x42\xf5\
\x0f\x57\x24\x44\x19\xb2\x07\x5c\xe2\xb2\x82\x44\x09\x44\x21\x3d\x87\xc5\x0f\x58\xb9\xe7\xb7\x17\x65\xd4\x5f\xca\xd1\x52\xb3\x33";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_149() {
    // edge case for computation of x with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xc1\xf3\x19\x27\x9a\x7b\xae\x9f\x3d\xc5\x27\xc4\x23\x08\xa7\xa6\x25\x57\x63\xcc\xcd\x6f\x24\xd2\x66\xe7\x5f\x88\xeb\x4d\x02\x2f\
\x6b\x3a\x3c\xf1\x4e\xd3\xb5\xe6\x91\x5f\xf3\x22\xb7\x05\xb1\x75\xda\x07\x22\x3c\xff\x4e\x9a\xd4\x52\x0d\xec\x70\x28\xe1\xe3\x96";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_150() {
    // edge case for computation of x with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x47\x53\xee\x2e\x3a\xc2\x01\xe9\xa4\xbf\x25\xe3\x15\x13\xa4\x53\x65\xb5\xd0\x52\x6d\xcb\x2e\x0a\x88\x73\x6f\xc8\xae\x26\x81\xc1\
\xcc\x49\xb1\xe8\x68\xd4\xde\x22\x45\x93\xec\x7e\x00\xe9\xf2\xc2\x09\xf3\xb9\x35\x42\x8d\x3b\xfa\x97\x8f\x74\x86\x9a\xf8\x89\xe2";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_151() {
    // edge case for computation of x with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x29\xc1\xe7\x74\xc9\xd3\xa8\x93\x0d\xf8\xa6\x63\xfa\xdc\x8b\x9a\x60\x92\xd8\x05\x4f\xf3\x7a\xdf\x59\x8e\xdd\x78\xd0\xa3\xff\xc5\
\x71\x73\xa3\x59\x4b\xe6\x8b\x7a\xd1\x91\xe0\xff\x27\xd7\x9e\xb4\xe7\xbb\x22\xf1\x09\x08\x73\xcf\x30\x7c\xd0\x73\xb2\x73\x68\xfc";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_152() {
    // edge case for computation of x with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x89\x3c\xb0\xc3\x08\xaa\xa2\x09\x2d\x9a\xf9\x3e\x0f\x02\xcd\x95\x1e\xc3\x86\xe8\x66\x48\x0e\xec\xe4\x43\xcc\x89\xe6\x72\x73\x3f\
\xf6\xc6\xf4\x3c\xaa\x1e\x1d\x16\x8b\xa3\xea\xd9\xea\x04\x1c\xf4\xf2\x27\xd7\x6b\x90\xe9\xe2\x5f\x49\x7f\x2e\xce\x89\x35\x51\x2b";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_153() {
    // edge case for computation of x with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xc5\xa2\xdc\x34\x0e\x09\x83\xaa\xd4\xf8\x95\xbf\x54\xbe\x9d\x9e\x17\x6d\x6b\xa1\xba\x6c\x85\x9c\xa0\x85\x18\x89\xa9\x7b\x7d\xc5\
\xc9\x0d\xab\x79\x20\x7b\x86\x1f\xd9\x96\x42\x96\x39\xcd\x8f\x31\xbe\x02\x98\xb6\x3f\x49\x34\x92\x3a\x48\x3a\x9e\x6f\x7c\x5a\xb9";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_154() {
    // edge case for computation of x with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xe9\xdb\x2c\xf8\x03\x75\x05\xfd\x8a\x80\x44\xf4\xb3\xf8\x0f\x67\xf9\x68\x88\x15\xc6\x9c\x78\x8d\xdb\x26\xfc\xb3\xc8\x4c\xb8\xad\
\xf0\x2e\x12\x1e\x40\x20\x42\x4c\x6d\x8f\x1d\x26\x9c\x00\xf2\xa7\xf2\x3a\x59\x23\x7f\xb4\x8a\x5b\xa1\x7e\xe5\x7c\x1c\x26\x42\x82";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_155() {
    // edge case for computation of x with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x77\x6a\xef\x1a\xcb\x82\xb6\x28\xe1\x32\xcc\x29\x44\x09\x88\xf0\xa1\x5d\x4c\xc2\xb4\xf3\x28\xae\xcb\x06\x3c\x9b\x86\xe5\x01\x8e\
\x91\xbb\x20\x38\xfb\xbb\x05\x57\x3b\x1c\x94\x3d\xe8\xba\xe0\x85\x3d\x6a\x93\x4d\x4d\x16\x44\x29\xaa\x14\x5d\x68\xe9\xc2\xe0\xcb";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_156() {
    // edge case for computation of x with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x9e\xc0\x6b\x0b\x08\x66\x2c\x0e\x1d\xd9\x11\x16\x96\xa6\x3a\x16\x01\xcc\x83\xce\xe2\x06\x95\x77\x8a\xdf\x84\xd4\x30\x64\xfc\x90\
\xea\x9f\xfe\x0e\x7b\x32\xc3\xe3\x0e\x5f\x78\x09\xd9\xac\xc4\x9a\x8d\xa7\xb7\x77\x42\xc2\xa3\xd3\x66\x0f\x1c\xee\x1d\xd4\xbe\x19";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_157() {
    // edge case for computation of x with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xfa\x51\xd1\x28\xad\xc2\x00\x0f\x09\xff\x12\xc6\xfd\x8e\x25\xaa\x08\x55\x6d\x70\x8b\xf6\xb0\xff\xff\x9e\x8e\xaa\xd4\x78\x3f\x0d\
\x1d\xd4\x0a\xd5\x1a\xe9\x1e\x0a\xb4\x71\xf2\xf6\x06\x70\x52\xb1\xaf\xe9\x6a\x57\xcf\x5e\x4d\xdf\x89\x9a\x62\x58\xf8\x1c\x33\x2f";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_158() {
    // edge case for computation of x with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x61\x4d\xcf\xbe\xa4\x78\x9a\x3f\x3e\xb4\xa8\xe2\xf1\x11\xc8\x87\xf0\x24\x8d\x93\x16\xb9\x9d\x08\x64\xc9\x27\xa0\x45\xd6\x94\x17\
\xac\x5f\x8c\x40\x01\xf7\xb6\xe6\x7f\xaf\x5b\x26\x92\xf7\x45\xb8\x6f\x51\xe7\x25\xc1\x08\x0f\x15\x33\x0a\x63\x1e\xf6\xa5\x03\xab";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_159() {
    // edge case for computation of x with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x83\x21\x76\x3f\x55\x33\x31\x0a\x47\x79\xe8\x3a\x58\xff\x11\x04\x80\x39\x46\x90\xf7\xc2\xf6\x5f\xc2\x29\xc1\xa5\x8f\xfb\xdd\xc8\
\x6d\x17\x01\x41\xa1\x08\xfc\x92\xf2\xbb\x96\xdd\xce\xa0\x65\x2c\xb6\x50\xc5\xe8\x63\xaf\x92\x89\xd3\x7a\xe8\x7a\x29\x02\x2d\x9f";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_160() {
    // edge case for computation of x with projective coordinates in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xaa\x42\xc9\x77\xda\x1e\xd4\x2e\x52\x04\x1c\x0a\xf2\xc0\x90\xf2\x44\xb2\x2a\xe3\x54\xcc\x9b\x10\x78\x1e\x44\xc8\x9e\xeb\xe3\x36\
\xf7\x10\x0a\x0e\xac\x8b\x55\x51\x3c\xe5\x7a\x8d\x0c\x19\x5a\xdc\xf5\x0d\x1b\x05\xfd\x35\xb0\x57\x6c\xd9\x28\x05\xcb\xab\x4c\x1f";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_161() {
    // edge case for computation of x with projective coordinates in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x07\x30\xd7\x7d\x91\x14\xd5\x61\x0d\x49\xa9\x8d\xc1\x96\xca\x9e\x1e\x8f\xd2\xab\xe0\x07\xda\x96\xb5\x74\xf7\x36\xbf\x19\x39\x25\
\x8c\x88\x14\x05\x5a\x77\x4f\x7e\x79\xf7\xb4\xfb\x9c\xfb\x03\xd8\x39\x56\x6a\xfc\x60\x59\x31\x1f\x3d\x55\xd4\x9c\xa4\xdd\xab\x31";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_162() {
    // edge case for computation of x with projective coordinates in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x85\xa8\x2f\xab\xb6\x0c\x76\x64\xe2\x50\x0c\x59\xd0\xf2\x4e\xac\x1a\xab\x00\x60\xc0\x7b\x49\x82\x8c\x55\x00\x9f\xd2\x7a\xa4\x96\
\x47\xb8\x5f\x72\xb4\x67\xbf\xa2\xfe\x1b\x13\x25\x8f\xeb\x12\x1a\xee\x75\xa3\x15\x5b\x30\xe8\xb4\xb5\x66\xb6\x10\xf1\x3b\x6d\xc5";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_163() {
    // edge case for computation of x with projective coordinates in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x83\x3f\x2a\x6e\x5c\x76\xc3\xdd\xd1\x3a\x10\x6c\xee\x4a\xa8\xb2\xa9\xdc\x32\xe0\xbd\x7b\xbe\x2a\x63\x22\xab\xe0\xab\x41\x10\xa2\
\xab\x93\x84\x54\x03\x80\x8a\x7c\xc8\xe8\xb6\x5f\xa4\x2d\xa4\x14\x32\x7e\xc3\xa1\x9d\x53\x9f\xc0\x33\xba\x8d\x8a\xae\x7c\xb2\x3f";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_164() {
    // edge case for computation of x with projective coordinates in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xcf\x81\x16\xba\x09\x01\xb0\xb9\x53\x08\xbc\x68\x6f\xed\x90\xce\xba\x0e\x5d\x42\x4c\x8e\xc2\x06\xca\xb8\xd7\xcf\xfe\x93\xfb\xa2\
\xd5\xe7\xa6\x2c\xde\xab\x84\xa2\x0f\xce\x37\xb5\xb0\xac\x16\x8c\xa2\xa8\x5a\x1d\x18\xcb\x04\xee\x48\xde\xb2\x50\xb5\x46\x91\xaa";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_165() {
    // edge case for computation of x with projective coordinates in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xe7\x54\xcd\xf8\xe5\x69\x44\xd5\xbd\x36\xd0\x25\xb1\xc0\xf5\xfb\x27\x54\xa2\xee\xe0\xfb\x52\x00\xbd\x16\x9c\xdf\xc8\x3f\x07\xc3\
\x8f\x2b\x78\x81\xde\x64\x7c\x2c\x66\x29\x4e\x1a\xdf\x76\x7e\x51\x5a\xdd\xa7\x42\xd3\xa8\x63\xf0\xcd\xd6\x66\x5b\x96\x4e\x60\xa3";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_166() {
    // edge case for computation of x with projective coordinates in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x74\xf1\xfe\xb9\xa6\x41\xfd\x87\xa4\x9e\x16\xfb\xb1\xbe\x36\x32\x97\xef\x97\x12\x13\xbc\x7d\x36\xb6\xab\xbf\x29\xd0\xe8\x8a\xc3\
\x4b\x6c\x24\x6b\x31\x3b\xe6\xc3\xc9\xf3\x3d\xef\xd4\xad\xe9\x47\xaf\x54\x71\x68\xf7\xc2\x22\x78\xdf\x8c\xb7\xb0\x6a\x80\x18\xc5";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_167() {
    // edge case for computation of x with projective coordinates in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x93\x68\x06\x6a\x07\x48\x86\x7a\x7b\x87\x02\x44\xf5\xc9\xf8\x2e\xa8\xbd\x51\x55\x29\x59\xdd\x55\x0b\xb7\x39\x44\x97\x15\x9a\x5d\
\xbf\x89\xb5\x21\xe5\x1d\xb3\x72\xc0\xbc\xd1\x1f\xee\x41\x68\x2c\xec\xf8\xe7\x02\xf5\x95\x6f\x12\x74\xef\xee\x4d\xfc\xb2\xf6\x5f";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_168() {
    // edge case for computation of x with projective coordinates in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x64\xe5\xd7\xb0\xf7\xfc\xf4\xc9\xc1\x61\x56\xcb\x87\x45\xc4\x39\x95\xf8\x23\xe7\xe1\x09\x54\x13\x1e\x61\xf9\xfa\x09\x05\x9e\x2c\
\x2f\x7a\x39\xdd\x0d\xc6\xe8\xa9\xbb\x7c\xc7\x9d\x82\x1e\x7c\x74\x99\x63\xdd\x97\xc7\x07\x01\x29\xdb\x63\x8c\x0d\xd1\xba\x05\x3a";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_169() {
    // edge case for computation of x with projective coordinates in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x3d\xa0\x65\x5a\x52\xe3\xd6\x85\x7a\x39\xfa\xef\x86\x4c\xee\x42\xf1\x81\x6b\xd8\xd8\x3a\xf8\xc6\x57\x99\x08\x46\x82\x1f\x00\x22\
\x8f\x76\xd1\x01\x62\xe2\x95\xfd\x77\x37\xd0\xd2\x2f\xaf\xba\xb2\x4d\x5d\xb0\xff\x43\x2b\x51\x35\x40\x30\xe1\xfb\x09\x27\x3c\x51";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_170() {
    // edge case for computation of y with projective coordinates
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x42\xe8\x31\xd5\xdf\xd2\xb9\xf5\x38\x72\x63\xcd\x68\x6e\xe0\x3d\xfa\x23\x5c\xbc\x07\xf6\xf3\xa8\x7a\x7e\x81\x50\x55\x63\x62\xb3\
\x2b\xe4\x7f\x8e\x30\x11\x57\x28\x55\xca\x48\x7f\xfb\x59\x4f\x77\x22\xef\x9f\xc3\x29\x29\x02\xa2\x31\x46\xc1\x9b\xbf\x6d\xa7\x6a";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_171() {
    // edge case for computation of y with projective coordinates
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x13\x21\x83\x8e\xfd\x80\xe1\xdd\x8e\x4d\x0d\x95\xd1\x78\x95\xc7\xdc\x60\x30\x3a\x5c\x23\x41\x82\xb5\x92\xd9\xd2\x1e\xf1\x47\x52\
\xa4\x4e\xaf\x33\x94\xc6\x37\x08\x76\x3f\x3b\x97\xb2\xd2\x86\x3f\xd3\xb7\x7e\xbd\xa4\x48\x62\xc7\xc2\x3d\xaa\xa4\x37\xd5\xfe\x59";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_172() {
    // edge case for computation of y with projective coordinates
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x24\x07\xbb\x2c\xef\x16\x14\x72\xcc\x79\x9d\xb1\x4e\x70\x31\x83\x67\x6f\x31\x2c\x57\x1e\x9f\x3d\xf1\x37\xf5\x5d\xf9\x44\x2c\x40\
\x77\xbf\x00\x50\x0a\xa7\xbe\xce\x8c\x1f\x76\x2f\xf0\x8a\x0e\xc7\x1b\xfd\xad\xfa\xf1\x33\x80\x70\x4e\x62\x02\xde\x62\xc5\xf2\x2f";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_173() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x24\x77\xb9\xec\x12\x02\x9a\x86\xf5\x0c\xd9\x5d\xda\x6c\xea\xd7\xa3\x4f\x1c\x23\x60\xf3\x9e\x3d\x11\x59\x79\x3c\x8e\xe6\x63\xa6\
\xbc\xfe\xd8\x5b\xd1\x9d\x4e\xd3\x85\x58\x07\x26\x7e\x39\x15\x64\x13\xb4\x1e\x39\xa7\x01\xd8\xd1\x7a\x23\xac\x68\x5f\xe5\x36\x0c";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_174() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xc8\x29\xd3\xa9\x9b\xb4\x7e\x42\x56\xfc\xc6\x32\x10\xc1\x32\x82\xab\x59\xe7\xaa\xe9\x08\x77\xb1\x79\x7b\xd6\x99\xd6\x72\xa3\x8b\
\x86\x96\xa0\x37\x30\x70\x42\x04\x89\x4a\xa9\x67\x27\x3c\x12\x0b\x57\xcb\xb7\x1f\x9f\xca\x62\xc6\x4f\x69\x2e\x7f\x49\x59\x8d\x2b";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_175() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xfd\x61\xec\x55\x52\xfb\xb2\x4b\x57\x5e\xbd\xc9\xd4\xa4\x43\xe1\x56\xbf\xc0\xd1\x3c\x9d\xc6\x11\x14\x9e\x21\xd7\x9c\x48\xc4\x44\
\xb7\xb7\x3a\x8d\xbb\x83\xa5\xe2\x26\x7a\x8b\xcd\x39\x8b\x10\xaf\x08\x43\x47\x4c\x75\x02\x65\xe9\xd4\x8d\x04\xac\x4a\xb6\x04\x05";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_176() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x9c\xd9\xe0\xf1\x7c\x11\xa1\x0f\x8a\xaa\x1f\x47\xea\x71\x41\xf6\x39\x9f\x40\xb0\x79\xb0\x7b\x14\xcd\x38\x8f\x3b\x6b\x0a\x47\xa8\
\xef\xc8\x69\x98\xf7\x17\xa8\x3e\x53\xc8\xe5\x8a\xd2\x3c\x71\xd0\xec\xc8\xbc\x84\x1b\xc1\x6f\xf2\x32\xa5\xe3\x26\x84\x4c\xd4\xc9";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_177() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x38\x46\xb4\x07\x78\x22\x43\xfd\xf3\xb0\x40\x42\x99\x0b\x16\xe2\xab\xdb\x32\x5b\xa0\x98\x53\x28\x79\xd1\x4e\x16\xe9\x14\xc2\x74\
\xde\x57\x1b\xc4\xce\x2e\xdd\x7d\x2d\x37\xdf\x55\x93\x95\x9b\x5c\x7a\xb5\x9a\xc8\xfe\x5e\x06\xc4\x4b\xba\xe6\x96\x0b\x6c\x25\x10";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_178() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xd3\xa0\x7a\x4b\x6f\x9b\x66\x0d\x92\xb3\xfe\x93\x7e\x2e\xbf\x91\xdd\xa8\x00\x5a\x7f\xfd\x02\x92\xda\xd9\x1d\x05\x92\xf1\xa8\x9e\
\xd7\x20\x95\x13\xbd\xe0\x02\x87\xb8\x23\x4e\x28\x0c\x00\xb3\xc5\x9d\xc5\xe3\x33\xc8\xc5\x68\x64\xbb\x6c\xfb\x36\x4e\x3f\x2d\x85";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_179() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x2a\xd9\x55\x07\x28\xf6\x5b\x14\x2e\xd6\x76\x43\x8b\xaf\xe8\x0e\x36\x5c\xff\x4e\xb5\x57\x52\x65\x60\xe4\xad\xfd\x69\x6d\xa7\x78\
\xf0\xf0\x1d\xa8\xe9\x47\x62\x83\x46\x61\x4e\xd7\xfe\xfe\x24\x90\x1f\x9e\xee\x79\xde\x6d\xc0\x6d\x85\xd5\x63\x72\x2e\xc7\x79\x61";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_180() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x19\xf5\xf0\xb4\xed\xd6\x12\x4e\x34\x0a\xdb\xcc\xe7\x91\xb0\x6d\x14\x05\x4c\x7e\xb1\xf9\x91\x4b\x44\x24\x5c\x51\xd6\xc1\x10\x1d\
\x82\x30\x4d\x11\x7f\x72\x9e\xf0\x6d\x97\xeb\x56\xae\xb9\x9a\x62\x22\xdc\x3d\xe5\xe3\x0c\x07\x19\x56\xfd\x73\xee\x8c\xdb\xeb\x81";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_181() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x44\x85\xdc\x2f\xbc\x68\x07\x9c\x35\x7a\x04\xda\xa6\xd5\x30\x6c\xc7\x88\x27\xb0\xfa\x64\x93\x57\x47\xb9\x81\x23\x00\x9b\x26\x60\
\x52\x58\xc4\xa5\x60\x83\x15\x00\x7d\xb0\x8c\x27\xba\x86\xc8\x97\x1b\xdd\xc5\x29\xd1\xc1\x4e\x66\x47\x8e\xf7\xfd\x92\xb3\x3a\xe0";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_182() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x2f\x98\xfd\x0d\xc4\xb3\x78\x07\xd9\xb1\xdd\x01\x5a\x08\xa9\x0d\xc9\x0c\x08\x80\x14\xd1\x30\x5e\x49\x01\x7b\x60\xd5\xb0\x7e\x0e\
\x1e\x8e\xc8\x78\x73\x12\x77\x19\x3c\x54\x99\x13\x53\xd1\xa4\x24\xa1\x15\x3b\x87\xbf\x2c\xf2\x53\x09\xc7\x40\x32\xfd\xc7\x3f\x95";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_183() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xdf\x1a\x49\x93\x87\xec\xe4\x23\x21\x5b\x04\x1d\x19\x07\x6b\x61\x90\x2d\x31\xbe\xc5\x13\x59\x10\xb9\x0d\x88\x19\xdf\x3b\xd2\xfe\
\x9a\x9b\xff\xe9\xf1\xb6\x8a\xca\xb7\xf5\x7f\x9a\x19\xca\x58\x20\x38\x9f\x1d\x73\x53\x3d\xd7\x3f\x65\x32\xd6\x96\x52\x33\x6f\xb7";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_184() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xb8\xc2\xc4\x7d\x8c\x6d\xd3\xbd\xee\x17\xa5\x80\x81\xcb\xa3\x59\xe8\x6e\xf4\xe1\x9b\x36\x8d\x46\xed\x5e\x43\xfb\xe0\x74\xb0\x8c\
\x9b\x30\x31\xb7\x75\x6e\x74\x60\x99\xd2\x2c\x98\x5e\x9f\xd6\x21\x35\x19\x18\x6a\xcb\x53\x7f\xe4\xbc\xdb\x69\xf5\xf3\xa0\x19\x68";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_185() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x21\xa3\x4e\xeb\x4e\x1e\x2e\xd7\xe4\x54\x6a\x81\x44\xa8\xd1\xc8\x3e\xd6\x4f\x33\x18\xf7\x2f\x7a\x2d\x78\x63\x16\xbd\xb5\xe9\x74\
\x12\xa8\xcf\xaa\x2f\xac\x86\x29\xfa\x7e\x20\xd9\x22\x9f\x35\x66\x2f\x5d\x05\xea\x8c\xd3\x88\x36\x53\x7d\x16\xc1\xa6\x46\x05\xaa";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_186() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x7e\x99\x06\x20\x2c\xd1\xab\xf7\x14\x70\x27\xc8\x64\x7b\x3a\x58\x16\xb3\x63\x26\x63\x26\x80\x4d\x6d\x59\x6e\x87\x5f\x02\xe1\xe6\
\x86\xa9\x81\xef\x38\x87\x1a\xd5\x9f\x42\x78\x15\xce\xdc\x1a\xea\xd3\x39\xc9\x0d\x61\xda\x12\xb0\xf7\x27\x5f\x40\x84\x76\x1a\xfb";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_187() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xbc\x21\x00\x4d\x79\x9e\xcb\x47\x32\x53\xe3\xed\x07\xb4\xaf\xf2\xd3\xca\x90\xf1\x29\x43\xa7\x6e\x9e\xbd\xcd\x49\x31\xc4\x38\xea\
\xa9\xb6\xe2\xc6\x83\x4b\xfb\xe5\x6f\x4c\x4e\x5e\x22\xb1\x25\x81\x4d\x83\xf2\x97\x3d\xcd\x64\xdc\x7f\x51\x93\x95\x74\x00\x2f\xac";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_188() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xca\x6b\x6e\x4e\xda\x95\xcc\xcd\x6c\xc8\xe1\x6c\x3c\x6c\x74\x8e\x2a\xcb\xe3\x1b\x70\x52\x9b\xcb\x69\x44\x5c\x11\x40\xe6\x3e\x25\
\x83\xcf\x3c\x33\x72\x36\x59\xb2\xe3\x03\x05\x1c\x3c\x1e\x9f\x70\x2f\x9f\x27\x42\x1f\x6b\x34\x57\xe3\x77\x35\x60\x18\x48\x9b\x46";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_189() {
    // edge case for computation of y with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x88\x4c\xf0\xd1\x7d\xf4\xef\x5e\x48\x8d\x72\x5b\x47\xd0\x69\xcd\x2b\x99\x94\x0b\x05\xb2\x6e\xfc\xd5\x5d\x0e\x5e\xcd\x20\x5b\x61\
\xe3\xb1\x91\xa7\xf9\xf9\x20\xcf\xab\x05\xb0\xf9\xcd\xdd\x02\xfe\xcf\x85\x7d\x0e\x40\x5c\xa3\x6f\x01\x06\xaa\x36\x7d\x49\x24\x60";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_190() {
    // edge case for computation of y with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xb1\xe5\xae\xc6\x27\x2d\xbb\x85\x64\x17\xe7\xce\x61\x02\xba\xce\x3e\x0d\xd7\xc3\x23\x86\x51\x1e\x06\x5c\x1a\x32\xd5\x68\x8f\xc5\
\xc0\x78\xaf\xf9\x4b\x8e\xac\x78\xbd\xb5\x4b\x21\x0b\xc7\x46\x76\xd2\x33\x6a\xb7\xbc\x72\x36\x80\x82\x91\x54\x0f\x65\xc8\x29\x82";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_191() {
    // edge case for computation of y with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xff\x8d\x38\xf6\x1f\x63\x3c\x5e\xb5\x70\xef\x87\x7e\x61\xb4\x46\x6b\x51\x1e\xcc\x3d\xc3\xde\x87\xe6\x22\x4a\x8c\x78\xc0\x89\x3d\
\x71\x53\xd4\xf8\x7b\x7f\x9d\x04\x88\xb6\x58\x8d\xf5\x6c\x99\x34\xae\x75\xd1\x48\x6c\x1e\xbd\xb4\x94\x44\xba\xd8\x32\xd0\x80\x17";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_192() {
    // edge case for computation of y with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x4c\x38\x1e\xf0\x30\x2e\x1b\x42\x8f\x48\x87\xf7\xb4\xfd\xe4\x96\x02\x45\x92\x0f\x40\xc4\x00\x56\x69\xa0\x91\x64\x4c\x27\x48\x2b\
\xef\x73\x9b\xc3\xa3\xd2\x2c\x6e\x70\x75\x57\xf2\x46\x9f\x50\x4a\xea\x9e\x8a\x07\x59\x17\x76\xb3\x32\x4b\xeb\x5c\x49\x8e\x6f\x55";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_193() {
    // edge case for computation of y with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x24\x5a\x53\x0c\x56\xd0\x79\x78\xf9\x11\x77\xe8\xd9\x7c\xb1\x36\x85\x46\xba\xfe\xfb\xf8\x14\x8c\xef\x33\x9f\xe7\xbb\x65\x2b\xa5\
\xb2\x7a\x60\xed\xd2\xf4\x98\xca\x63\x69\x96\xa9\xe5\xe6\x29\xd5\xc9\xec\x20\x32\x17\xc1\xb5\x40\x2f\xf9\x9a\x0d\x2f\xa9\x7c\xad";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_194() {
    // edge case for computation of y with projective coordinates in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x3c\xc5\x66\xa2\x30\xb3\xdf\x27\x2a\x17\x2c\xd8\x0f\xb4\x81\xcf\xdb\x8d\xd1\xc2\x7a\x84\xdb\xb7\xa3\x91\xf1\x14\x84\xf1\x4e\xf9\
\x9b\xe9\xd4\xcf\xd3\x37\x48\xee\x15\x76\x25\xf8\x09\xd0\xfb\xc1\xa6\xf0\x31\x7d\x97\xdb\xfe\xda\x49\x99\x74\x24\x55\xfd\xf7\x8e";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_195() {
    // edge case for computation of y with projective coordinates in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x45\x5f\xc1\x39\x90\x66\x3b\xf2\x4c\xf5\x90\x8c\x59\xe4\xc3\xa0\x84\xfc\x39\xee\x1a\x7b\x14\xd8\x12\xc2\x27\xa8\xda\xbd\x6f\x94\
\x68\x5d\x00\xad\x60\x4b\x20\x6d\x59\xb2\xf4\xd9\xa7\x54\x42\x08\x3b\x85\xa3\x16\xda\xb7\x85\x74\xa3\xbb\xaa\x62\x59\xe8\x9a\x3e";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_196() {
    // edge case for computation of y with projective coordinates in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xf9\x33\x57\x8f\xd1\x93\x8e\x44\xb2\x71\xae\x43\x1f\xfd\x0d\xf5\x54\x84\x96\x94\x5d\x91\xcb\x8d\x31\x1e\xbe\xc9\xdd\x50\xd0\x36\
\xf3\xd8\x8f\xa2\xaa\xe4\x23\x6c\xb0\x88\x58\x15\x8d\x72\x5e\x12\x13\xfd\xb9\x82\x50\x3b\xc9\x10\xa5\xb5\x83\x66\xcd\x85\xee\x0e";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_197() {
    // edge case for computation of y with projective coordinates in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x56\x06\xcb\xf0\xc5\xb5\x2f\x0f\x46\x41\x37\xd0\x13\x35\x59\xfe\xa5\x0a\xf2\x71\xa9\x82\x6f\xf6\x12\x57\x46\x63\x6d\x98\x18\x50\
\xd7\xb1\x0d\xab\x8e\x64\xb2\xf8\xdf\x6f\xaf\xb8\xd5\x94\x3e\x7b\x37\xc6\x50\x0f\xa9\x5b\xfd\x66\x80\xd8\xf2\xff\x74\xc4\x40\x7a";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_198() {
    // edge case for computation of y with projective coordinates in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xbf\x23\x64\x50\xef\x33\xbc\xef\xfb\xb9\x0e\x0b\x86\xf8\xe9\x9d\xea\xa1\x33\x7c\x89\x82\x63\x63\xb3\xcb\x4e\x0a\x66\xd5\x41\x03\
\x06\x76\x70\x3a\xfc\x89\x2b\x80\x59\xc9\x2e\x24\xf6\x53\xb9\xcb\x2a\x11\xa5\xf5\x20\xc8\x48\x30\x3c\x17\xc2\xc4\x86\x00\xc8\x4c";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_199() {
    // point with coordinate x = 0
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x66\x48\x5c\x78\x0e\x2f\x83\xd7\x24\x33\xbd\x5d\x84\xa0\x6b\xb6\x54\x1c\x2a\xf3\x1d\xae\x87\x17\x28\xbf\x85\x6a\x17\x4f\x93\xf4";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_200() {
    // point with coordinate x = 0
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x81\xbf\xb5\x5b\x01\x0b\x1b\xdf\x08\xb8\xd9\xd8\x59\x00\x87\xaa\x27\x8e\x28\xfe\xbf\xf3\xb0\x56\x32\xee\xff\x09\x01\x1c\x55\x79\
\x8c\xd2\xf1\x99\xd9\x81\x5d\x75\x85\x07\x30\x34\xeb\x76\xc9\x3d\x50\x79\x9b\x35\x4b\x0f\xb1\xe7\x7e\xb7\x5e\xba\x8b\xff\x3d\x58";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_201() {
    // point with coordinate x = 0
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x61\x4d\xcf\xbe\xa4\x78\x9a\x3f\x3e\xb4\xa8\xe2\xf1\x11\xc8\x87\xf0\x24\x8d\x93\x16\xb9\x9d\x08\x64\xc9\x27\xa0\x45\xd6\x94\x17\
\x53\xa0\x73\xbe\xfe\x08\x49\x1a\x80\x50\xa4\xd9\x6d\x08\xba\x47\x90\xae\x18\xdb\x3e\xf7\xf0\xea\xcc\xf5\x9c\xe1\x09\x5a\xfc\x54";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_202() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xdb\xfa\x46\x6f\x12\x01\x32\x55\xf9\xd5\x7a\x64\x96\xc1\x58\xee\x7d\xd2\x02\xa1\xce\x4a\x5a\x53\x00\x5b\x35\x64\xd5\x09\xa0\xbb\
\xf2\x57\x80\x07\xe8\x57\xbd\xd0\x82\x75\x1e\xf2\xf3\xb4\xb9\xc3\x8a\x0b\x87\xba\xb4\x13\xd5\x5c\xcb\x26\xa5\x74\xf2\xb4\xbe\x9d";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_203() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x82\x38\xf0\x48\xc2\x92\xe0\x8d\x49\xbd\xb5\xda\xb1\xf0\x8d\xa6\xd3\x9c\xdb\xef\xb1\xd7\x5e\x03\xe7\x60\x48\xb9\x03\xd6\xba\xf9\
\x38\x9e\x4d\xa4\x04\x0f\xbe\x20\x19\xa1\x46\x1f\xec\x3c\xc9\x04\x03\xc9\xbe\xcc\xca\xa0\x2e\xf5\x79\x3d\xa7\x21\xc1\xe6\x57\xa8";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_204() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x2d\x08\xcf\x12\x30\x46\x3b\x71\x02\xe8\xa5\x41\x85\x98\x6a\x62\xa3\xf2\x52\x0c\x0c\x15\x1a\xce\x12\xf5\xd0\x73\xa4\x0c\xbb\x2f\
\x13\x47\x3d\x11\xf5\x8d\xde\x7b\x16\x78\x30\x83\xcd\x53\x3b\xde\xcc\x09\x22\x49\xdc\xf1\x5b\x72\x3f\x08\x39\x4a\x5b\xc5\xb3\xf0";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_205() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x6e\x89\x66\xa6\x01\x3d\xde\x2b\xb3\xb2\xa2\x8c\x6e\xb0\x13\xc4\x81\xdd\xb7\x24\x9e\xf1\x9d\x73\xb9\x2d\xa3\x5c\xad\x1d\x6f\x14\
\x60\x4b\xf4\x3d\x79\x8a\xe2\x76\x21\xdf\x2e\xdd\xc8\xf5\xd9\x0e\xe0\x28\x9c\x54\xbb\xac\x82\xb3\xc5\x26\x4c\x47\x87\x61\xd1\x53";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_206() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x4f\x61\x2e\x02\x52\xb8\xd4\x84\xbd\x26\x57\xa9\xca\x1b\xba\x22\xaf\xe9\x78\x46\x6a\xae\x6f\x12\xbf\x1d\x91\x71\xe0\x16\x83\xca\
\x48\xf4\xf3\xc9\x86\xbf\x94\x1b\x52\x38\x89\xa7\x58\x3f\xae\x69\x5d\x3d\x4e\xa4\xad\xfb\x57\xd0\xc8\x23\x70\xfd\x82\x36\x4c\x1e";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_207() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xe8\xb7\x82\xda\xb2\xdb\xa4\xdb\x06\x66\x70\xae\x65\x6c\x7e\xca\x4a\xbc\x7b\x1a\x24\xc7\x97\x6d\xe2\xce\x02\xf2\x5b\x66\x84\x13\
\xbd\xa2\xf9\x99\x1a\xd7\xaa\xf4\x44\x37\xbf\xdd\x3d\x91\xc8\xf9\x41\x78\xcd\xe0\xf8\xaf\x98\x33\x54\x4c\xcc\x9e\x2d\x60\x6b\x8e";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_208() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x13\x50\xca\xc3\x74\xbb\x07\x6e\xe8\x9e\xb8\xaf\x43\xd0\x76\xaf\xc7\x31\x20\x21\x00\x64\x31\xfd\x90\x9d\x22\xdf\x06\x4f\x66\x37\
\xdb\xb0\xdc\x94\x9a\x18\x3e\x39\x87\x09\x35\x3d\x26\x4b\x13\xc4\x26\x66\x53\xe8\xa8\x68\x5d\xd8\x30\xff\xaa\xd2\x95\x5a\xe9\xc5";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_209() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xec\x62\x4c\xda\x95\xaf\x66\x33\x08\x8f\x98\x09\xe4\x41\x10\x43\x22\xff\x52\x9e\x09\x52\xaa\xd4\xef\xe3\x28\x62\x03\xe0\xc7\x00\
\x39\x6b\x89\xe7\x16\x8b\x1d\xa4\xda\xb1\x23\xaa\x6e\xb7\xed\x60\x06\x9d\x07\xb2\x41\xd6\xff\xf4\xba\x04\x64\x7e\x4f\xcc\xf1\xa9";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_210() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xd8\x0a\x50\x8b\x15\x5f\x0c\x73\x39\x36\xd5\x23\x20\x1b\xde\x33\x97\x94\x41\x78\x58\xcd\x4a\x34\xb6\x85\x63\x51\x38\xdd\xcf\x67\
\xb4\xaf\x7e\xb4\x7f\x6a\x84\x91\xc9\x14\x7b\x49\xba\xbc\xdd\x65\x38\xe0\xa1\x26\x54\x74\x93\xcd\xcb\x7e\x8c\x90\x0d\x48\x33\x7f";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_211() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x0c\xb0\x5c\xb7\xa4\xb0\x1d\xb1\x38\x26\x20\xca\x75\x62\x85\xe1\xa7\xc6\x84\x6b\xbb\x59\x5c\xbb\xac\x9f\x89\xe0\xa6\x24\x89\xcc\
\x57\x77\xd6\x35\xa0\x94\xd1\x7f\x78\x2d\x1e\x3c\x58\xbb\x0b\xe2\xc1\x43\x67\x06\xfe\x8b\x74\xed\xb7\xb9\xd4\xca\xfd\xa9\x5a\x17";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_212() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x72\xab\xa1\x8b\xcc\xce\xa8\x49\x09\xfa\x72\x48\x88\xc2\xd1\xd0\x07\xb1\x1c\x97\xe0\x2f\x61\xe4\x4b\x12\x5b\x40\x2a\x11\x04\x1a\
\x3c\xa1\xfa\xea\x5f\x02\xdd\x5f\x13\x27\xd5\x02\x8d\xe7\x0e\x78\xc8\x1b\x05\x33\x8a\x2b\x2e\x3d\xa5\x09\xf0\x8e\x2b\xd9\xea\x3f";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_213() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x27\x6e\x45\x46\x1a\x0e\x00\x70\x4b\xee\x88\x3b\x3e\x61\x01\x6e\xec\x41\x67\x8d\x81\x76\xd3\x7e\xba\x25\x55\x7a\x74\x02\x84\xe0\
\x5a\xb0\xfd\x1b\xf9\xfd\xac\x37\xfa\x83\xf8\x3f\x51\x56\x64\x8b\xb0\x36\xd6\xce\x46\xff\x1f\x6a\xd4\xc7\x2b\xc9\x53\x21\x4f\x0f";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_214() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xec\x90\xe4\x5d\xb5\x7b\xc0\x1f\x74\xd7\xd0\x1e\x87\x83\x93\x77\x23\xf8\xe2\x7b\xa9\x95\x41\x69\x8e\x01\xc5\x7c\xd2\xa3\x9d\xa0\
\x93\x3b\xfd\x2d\x11\xd3\x1a\xf9\xcb\xa4\xc5\x3a\xea\xbe\x6a\x36\x35\xa0\x64\x3c\x11\x4a\xfa\x10\x9a\xda\x02\x00\x42\x86\xae\xa1";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_215() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x28\x99\x3d\x7c\x18\x77\x0e\xec\x44\x18\xc1\x6d\x59\x59\x87\xc1\x96\x41\x2f\x7b\x27\x3d\xa4\x41\x36\xb1\x9d\x4b\x51\x6a\x2a\xc7\
\xb9\xba\x35\x74\xa3\x11\x69\xd3\xf2\xf7\xa6\x27\x58\xd9\xd2\x7a\x2a\x4f\xea\x90\x4b\x24\xd4\x23\x12\xa9\xeb\xfb\x49\xae\x35\x5a";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_216() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x3e\x48\x51\xb2\xb0\xd1\x46\x3b\x9c\x90\x77\x2e\x10\xfe\x8c\xf2\x9b\x18\x14\x63\xde\x28\xe9\xcf\x81\xb4\xc9\x60\x49\x31\xa4\xda\
\xbd\xe2\x52\xd0\x7c\x10\x61\xe6\x0f\x4f\x8c\xba\xe5\xc2\xa2\x90\xc0\x34\x43\x8a\x06\xa8\xba\xc6\x7b\x1e\xce\x8e\xd5\x51\xa2\x34";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_217() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x3c\xed\xff\x36\x09\xbd\x11\x39\x7e\xd3\xac\xa8\x4a\x0a\x7b\xff\xd0\x09\xd4\x8b\xea\xb1\x00\x71\x9c\x76\x07\xed\x28\xe5\x61\x24\
\xa1\x5f\x6a\xf6\x27\xe0\x3f\x57\xa9\x80\x12\xfb\xa1\x83\x21\xb1\xdf\xf6\xc2\x4f\x51\xd7\xb6\x41\x5d\x10\x26\x08\xb7\x72\xa4\x4e";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_218() {
    // point with coordinate x = 0 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x41\xe9\xd4\xcf\xa8\xef\xe8\x0b\x89\x5a\x8c\xbc\xce\x25\x68\xe2\x51\xdb\x7e\xcd\xfd\x20\xa7\xad\x71\x0d\x4a\x4b\xf2\xad\xdc\x6b\
\x5e\xc3\x6a\x83\x39\x16\x8a\x03\xf1\x5b\x8c\x80\xf2\xa2\xa8\x28\xf1\x51\xd3\x87\x91\x58\x48\x53\xba\x2f\xf4\x4a\x2a\x04\x60\xa1";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_219() {
    // point with coordinate x = 0 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x77\x6a\xef\x1a\xcb\x82\xb6\x28\xe1\x32\xcc\x29\x44\x09\x88\xf0\xa1\x5d\x4c\xc2\xb4\xf3\x28\xae\xcb\x06\x3c\x9b\x86\xe5\x01\x8e\
\x6e\x44\xdf\xc6\x04\x44\xfa\xa9\xc4\xe3\x6b\xc2\x17\x45\x1f\x7a\xc2\x95\x6c\xb3\xb2\xe9\xbb\xd6\x55\xeb\xa2\x97\x16\x3d\x1f\x34";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_220() {
    // point with coordinate x = 0 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x9e\xc0\x6b\x0b\x08\x66\x2c\x0e\x1d\xd9\x11\x16\x96\xa6\x3a\x16\x01\xcc\x83\xce\xe2\x06\x95\x77\x8a\xdf\x84\xd4\x30\x64\xfc\x90\
\x15\x60\x01\xf0\x84\xcd\x3c\x1d\xf1\xa0\x87\xf6\x26\x53\x3b\x65\x72\x58\x48\x89\xbd\x3d\x5c\x2c\x99\xf0\xe3\x11\xe2\x2b\x41\xe6";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_221() {
    // point with coordinate x = 0 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xfa\x51\xd1\x28\xad\xc2\x00\x0f\x09\xff\x12\xc6\xfd\x8e\x25\xaa\x08\x55\x6d\x70\x8b\xf6\xb0\xff\xff\x9e\x8e\xaa\xd4\x78\x3f\x0d\
\xe2\x2b\xf5\x29\xe5\x16\xe1\xf6\x4b\x8e\x0d\x09\xf9\x8f\xad\x4e\x50\x16\x95\xa9\x30\xa1\xb2\x20\x76\x65\x9d\xa7\x07\xe3\xcc\xd0";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_222() {
    // point with coordinate x = 0 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xef\xe7\x75\x4e\xd4\xc0\xb3\xc1\xdd\x30\x1b\xc1\xed\x69\x80\x0a\xa2\xff\x5d\x51\xfb\x85\x93\x77\x15\xe6\x0d\x2e\x7b\xca\xda\x8e\
\xb1\x58\x1a\xb7\x5f\xb3\xc7\x97\xef\x94\xa9\xdb\xa3\xd8\x25\x68\xc8\x46\x17\xea\xf3\xfa\x04\xf2\x79\xfb\xfd\x89\x8f\x70\x46\x04";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_223() {
    // point with coordinate x = 0 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xd8\xe1\x3f\xbd\x01\x7f\x1f\x9a\x26\xbe\x35\xc6\x11\xd7\xb2\x29\x9f\x5d\x10\xde\x3c\x8a\x26\x36\x22\x73\xff\xfb\x85\x23\x8f\x3e\
\xd1\x42\x6b\x74\x8c\x1f\x87\xe3\xaf\xa2\xc1\xe7\xa0\x22\x43\x10\xc9\x80\x65\x5e\x07\x39\x95\x90\xd1\x49\x4d\x6d\x6b\xea\x03\x96";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_224() {
    // point with coordinate x = 0 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x5a\x10\x27\x66\x6a\x0e\x37\x24\x81\xfe\xc0\xb3\x90\x1e\x05\x8d\x60\x10\x7c\x07\xb1\x11\x55\x50\xce\xb0\x57\x89\xb5\x5a\x6d\x35\
\x06\x3d\x4c\x8e\xe6\x6e\xd4\x5f\xf3\xe1\xdf\xdc\xfd\x73\xed\x96\xa9\xe8\x31\x93\x88\x4a\xdb\xca\xa5\x74\xb2\xdd\x11\x8a\x69\x2b";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_225() {
    // point with coordinate x = 0 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x79\x37\xb9\xc4\x09\x86\xdd\x75\x5a\x06\x56\x20\x30\x89\x78\x25\x83\xda\x7d\x81\x13\xa4\x41\x90\x76\x2a\xb4\x74\xa2\x0b\xcf\x60\
\xef\xcb\xc1\x52\x5a\xed\x5b\x4a\xd8\xe6\x87\xcb\x02\xc2\xef\x88\x87\x09\x5c\xad\xca\x56\xc7\x65\xb4\x1b\x4a\x95\x44\xff\x2f\xe8";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_226() {
    // point with coordinate x = 0 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x93\x68\x06\x6a\x07\x48\x86\x7a\x7b\x87\x02\x44\xf5\xc9\xf8\x2e\xa8\xbd\x51\x55\x29\x59\xdd\x55\x0b\xb7\x39\x44\x97\x15\x9a\x5d\
\x40\x76\x4a\xdd\x1a\xe2\x4c\x8e\x3f\x43\x2e\xe0\x11\xbe\x97\xd3\x13\x07\x18\xfe\x0a\x6a\x90\xed\x8b\x10\x11\xb2\x03\x4d\x09\xa0";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_227() {
    // point with coordinate x = 0 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x98\x1d\x74\x49\xbd\xf0\x01\x3f\x5e\xed\xdb\xb7\xe4\x2c\x44\x2f\x7c\xcd\xd9\x42\x7b\xd2\x6d\x7b\x38\x87\x55\xaa\x5e\x26\xf4\x6a\
\x12\x92\xb8\x8f\xa6\xbf\x5d\xff\xca\x05\x4d\xd4\x2e\xd3\x59\x42\x77\xb5\x93\xdc\xc4\x02\xd8\x03\x40\xfb\x78\x16\xe4\xdc\xab\x37";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_228() {
    // point with coordinate y = 1
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x09\xe7\x8d\x4e\xf6\x0d\x05\xf7\x50\xf6\x63\x62\x09\x09\x2b\xc4\x3c\xbd\xd6\xb4\x7e\x11\xa9\xde\x20\xa9\xfe\xb2\xa5\x0b\xb9\x6c\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_229() {
    // point with coordinate y = 1
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x53\x84\xd6\xc0\xde\xf7\x89\x60\xdb\x96\x7b\x80\x96\xd3\x54\x77\xc5\xa5\xce\x30\xef\x0c\x6d\x88\x79\xa5\x56\x8c\xa8\x7e\x97\x94\
\x01\xee\x56\xc4\x58\x17\x22\x61\x0b\x43\xf3\xcb\xfc\xf3\x86\x2c\x08\x2a\x6e\x36\xba\xa3\x6f\xd6\xf7\x84\x03\xc0\xe3\x99\xfa\xa5";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_230() {
    // point with coordinate y = 1
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x4e\xca\x76\x41\xa4\xaf\xd5\xea\xb0\xb2\x14\x65\x7f\xf3\xbd\xcb\xfc\x66\xf1\x55\x1a\x53\xbb\x59\x49\x3b\xc3\x8e\xd7\x8f\xf3\x96\
\x14\xa0\xca\xdf\xf1\x4c\x14\x73\x6e\xdb\xdc\xda\xb5\x10\xcb\xa0\x7a\x89\x24\xff\xd0\x49\x0e\xe5\x14\xae\xdf\xaa\xdb\x64\x8b\x01";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_231() {
    // point with coordinate y = 1
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x8d\x01\x77\xeb\xab\x9c\x6e\x9e\x10\xdb\x6d\xd0\x95\xdb\xac\x0d\x63\x75\xe8\xa9\x7b\x70\xf6\x11\x87\x5d\x87\x7f\x00\x69\xd2\xc7\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_232() {
    // point with coordinate y = 1
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x5f\xdb\x7f\x0c\xff\xb8\xb5\xb1\x14\x2d\x24\x69\x8a\x4b\xda\x76\xbf\x98\x27\xd6\x3b\x1a\x6b\xd8\x5a\x4e\x2f\x9b\x59\xc5\x10\xcf\
\xbc\xb3\x5b\xa9\xc9\x87\x10\x8b\x6d\x43\x37\xad\x53\x93\xf9\xf9\x10\xec\x92\x41\x0c\x23\x08\x69\xd6\x65\x28\xed\x88\xc1\xb9\x8a";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_233() {
    // point with coordinate y = 1
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x53\x0b\x22\x93\xe6\x0c\x6b\x6f\x14\xc7\x5c\x90\xb1\xef\x8b\x9f\x9f\xa6\xb2\x15\x1b\x8d\x98\x55\x79\x2e\xb2\xb3\xdc\x69\xf0\x7a\
\x0d\xb4\x24\x40\xe7\x3f\xd7\xd6\xdf\x04\xae\xd5\x02\x2f\xbe\x21\xce\xae\xc3\x3c\x5f\xba\xde\x1b\xd6\xad\x32\x1e\xf2\xe1\x0d\x0b";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_234() {
    // point with coordinate y = 1
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x69\x16\xfa\xc4\x5e\x56\x8b\x6b\x9e\x2e\x2e\xcd\x61\x1b\x28\x2e\x5f\xcc\x40\xa3\x06\x7d\x60\x10\x57\xf8\x79\xce\x5a\x8a\x73\xcc\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_235() {
    // point with coordinate y = 1
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xed\x95\x68\xc8\x5b\xc5\x2a\x6b\x45\x73\x36\x18\xc3\x60\x21\x07\xc1\xfd\xac\xf2\x3b\x1a\x38\xe4\x86\xaf\x95\x97\x8a\x21\x4e\x2e\
\xfa\x0d\x71\xd5\xe7\x37\x89\x1c\x42\x76\xe2\x47\x58\x1e\xe6\x13\x90\x11\xca\x14\x60\xdb\x9b\x1e\x20\xb3\x64\xd9\x27\x56\x83\xe2";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_236() {
    // point with coordinate y = 1
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x9f\xf7\x73\x1c\x00\xf2\xaa\x88\xb3\xfc\x17\x4a\xba\x90\x7a\xd1\x75\x95\xe6\x02\xe7\x68\xa5\xf1\xe9\x46\x2a\x6d\x4b\x89\xb2\xd2\
\x3f\x17\x8a\x70\xb9\xbb\x3e\xdc\xe2\x89\x11\x83\x38\xa3\x3d\xf3\x0c\x43\x2c\x34\x7f\x12\xa3\xde\x0a\x2b\x03\xb3\x53\x87\x8d\x96";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_237() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x82\x70\xf8\x17\x9d\x57\x43\x6b\x34\xdf\xc0\xbd\xf7\xd4\x17\xa5\xc8\x95\x11\x6b\x90\xcb\x51\xae\xc7\x18\x61\x4f\x86\x4a\x63\x5d\
\x17\x48\x04\xe0\xc0\xe0\x6e\x3d\x68\xd3\x14\x9e\x0b\x95\x66\x21\xc6\xaa\x2b\xde\x83\xf4\xd1\x7d\x03\xd2\x8e\xf8\xaa\x38\x9f\xff";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_238() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xc6\x17\x50\xe9\x8a\xba\xf2\x02\x25\xa8\x81\xdb\xfd\x35\x10\x53\x2c\xfc\x3d\xf9\x71\xbb\xbc\xa4\xa2\xbd\x52\xf9\x1a\xcc\x9c\x59\
\xd0\xfe\x79\x34\x20\x97\xf8\x8a\xe7\x8f\xc7\x9a\x80\x32\x24\x5f\xdd\x2c\x30\xcc\x64\xac\xea\xaa\x9f\xd5\x7b\x08\x25\x69\x25\x31";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_239() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x9c\x5d\x3b\xb5\x46\x50\xd9\x55\x0e\x1e\xe2\xef\xa3\xea\x43\xc1\x4a\xb9\x9d\x18\xbb\x04\x9f\x37\xb4\x2a\x6d\xac\x48\x23\x2f\x0b\
\xd3\xa2\x76\x0d\x83\xd3\x3a\xfe\x4c\xe6\xf1\xd1\x24\x54\x89\xc5\x09\xbd\x26\xb0\x25\x1f\x30\x8f\x8c\x99\x6e\x80\xf7\xa3\xf8\xeb";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_240() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xf1\x72\x4e\xfd\x48\x1a\xd4\x5a\x55\x79\x5f\x06\x12\x6b\x1f\x5e\xd2\x8e\x7d\x9b\xb4\xfe\xe9\x10\xaf\x2a\xd8\xc1\x37\x3b\x18\xff\
\x77\xed\xbc\x34\xda\x6c\x78\x7e\xc7\x34\x30\x34\x7f\x4d\xa8\x68\x10\x03\x2d\x88\xf7\x47\x5f\x6c\x42\xf1\x59\x14\x07\x9d\x17\x9e";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_241() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xfc\x36\x80\xaf\x52\xfa\x89\xff\xcd\x19\x3e\xcc\x0b\x07\x14\x46\x6f\xe5\xdb\x27\x7e\xe5\x87\x28\x46\xc5\x20\xbf\x4e\x37\x21\xd9\
\x27\x26\x0a\x0e\x22\x5a\x3d\x37\x7e\x67\x23\xec\xb6\xbe\xf8\xd4\x49\x3c\x2d\xa7\x8a\x22\xa3\x07\xfc\xca\x8f\x88\xf4\x52\x72\x08";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_242() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x10\x6b\x6f\x81\xe3\x48\x2d\xb1\x8d\x74\x02\x92\x91\x82\x1a\xe4\x48\xc3\x88\x44\xef\x78\x3b\xf1\xd6\x99\x9a\x40\x44\x01\xf6\x3f\
\x6a\x57\x53\xf0\xed\xc6\x8a\x62\xcf\xd6\xa0\xb1\x81\xbb\x25\x99\xe1\xf3\xba\xc5\xfa\x88\x24\xaf\x16\x0d\xe7\x9e\xd8\x67\xc3\x50";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_243() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x09\x3c\xb5\x19\x3a\x4f\x94\xcd\x18\xed\xaa\x20\xa9\x73\xb8\x7f\xf7\x9b\x0c\x03\x68\x4c\x79\x48\x7e\xcf\xee\x34\x7e\x53\x54\xeb\
\x04\xfc\xb5\x75\x25\x39\x17\x07\x77\x93\x2b\xe1\x5c\xd8\x4c\x97\xf0\x38\x15\xff\xee\x8b\x60\xb6\x47\xc1\x78\xee\xbb\x8e\x14\xd4";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_244() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xd6\xc3\x8f\x44\x8b\x96\x4e\x27\xb5\xb4\x50\xcc\x38\xd3\xcf\x41\xef\x9d\xf8\x3d\x8a\x95\x97\x71\xeb\x9c\x21\x85\x5c\xb3\x64\x45\
\xdf\x63\x8a\xef\x46\xa2\xae\xb1\x31\x99\x28\x1e\x1a\x26\xd1\x2f\xe6\x1b\x02\x9e\xc7\xf6\x8b\x90\xfa\xa8\x9f\x88\xc7\xa9\x59\x42";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_245() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x8a\x74\x8d\x61\xf5\x9c\x3b\x6a\x29\xb7\x33\xb0\xd5\x54\xb2\x49\x2e\x7f\x76\xfa\xd7\xca\xe1\xc1\x7f\x2a\xc3\xde\x9e\x4a\x65\xd2\
\xee\xdb\xe6\xc2\x6b\x6f\xd2\x2b\xfc\x03\xc1\x68\x75\x55\xd2\xf0\xa3\x8e\x02\xad\xee\x55\x70\x68\x61\x71\xab\xfe\xc6\x68\x19\x17";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_246() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xf1\x05\x26\x99\xd8\x7e\x56\x77\xc7\x5e\x26\xb2\xab\xe7\x19\x31\x06\x48\xd8\x20\xa9\x6e\x5b\x38\x1f\xff\x58\xb3\x92\x40\x15\x81\
\xb1\xbb\x16\xae\x8b\x68\xcb\xb7\x6a\x32\x56\x87\x0b\xad\x1e\xe5\xa3\x0f\xf9\xfd\x66\x2f\xd4\xf8\xd1\xfe\x5b\x5f\x1f\x98\xff\x46";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_247() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x12\x19\xaf\x52\x30\x06\x4e\xe9\x77\x86\x67\x22\x5f\x0e\x00\x9c\xdb\x96\x13\x30\xe3\x86\xed\xb3\x4e\x4f\xa9\xfd\xdd\x0e\x5b\xe7\
\xe2\xa1\x25\x54\x22\x7f\x61\x3a\xaa\xa7\x89\x38\xdd\xbb\xc9\x9b\x92\x3f\x9d\x18\x1b\x81\x92\xdc\x4b\x81\x65\x77\xe8\xf3\xb7\xe9";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_248() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x60\xde\xf1\x30\xf1\x90\xe6\xdc\x44\xf5\xeb\x8a\x59\xe1\x2e\x7e\xfb\x27\xdb\x96\x8c\x7f\xa6\xcc\x6d\x31\x78\x5f\x06\x6b\x41\xb1\
\xf1\xbb\x55\x6a\xc4\xcd\x77\x03\x3e\x7a\xa6\xc5\xba\x16\xf4\x7e\xba\xfb\x14\x97\x5a\x7f\xd7\x2d\xd9\xb7\xfe\x23\x11\x6b\xca\x55";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_249() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xf2\x3f\x09\xbd\xb7\xd1\x72\x89\xeb\x00\x59\x75\xa7\x57\xa3\x93\x25\xb4\xdf\x9b\x29\xe5\x5b\xa2\xca\x67\x9b\x5e\xc0\x97\x3a\xe9\
\x18\xc8\x81\xf3\xc7\xb6\xc1\x2b\xed\x1e\xc5\x4b\x83\x7d\x08\xc5\x90\x8e\x89\xbd\xce\xdd\x84\xb9\x17\x77\x20\x37\x8f\x78\x96\x00";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_250() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x5d\xbe\xc0\x98\xc1\xb7\xde\x3e\x3e\x2e\x73\xd0\xb6\x2c\xd4\x9c\x87\x7e\x1a\x01\x30\xa1\xb3\x9e\xb2\xfd\x4d\xbd\x44\x26\xaa\x4c\
\xcb\xee\xe2\x17\x59\x1a\x8d\x76\xcc\x8d\xea\xf1\x4d\xde\x52\xe3\xf4\x01\xe5\x3b\x30\xcb\xb9\xc1\x80\x79\x10\xd8\x27\xd0\x04\x1d";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_251() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x1e\x70\x73\x0d\xc4\xf3\x9c\x89\x70\x18\x2e\x1a\x29\xcc\x83\x6b\x9e\x9d\x6c\xbd\x6f\xca\xa8\xc0\xdc\x10\x62\xfe\xd9\xa8\x49\x69\
\x3e\x7b\x91\x51\xf9\xc8\xa3\x34\x53\x66\xf8\x22\x1c\x8f\xb7\x00\xe8\xc3\xa9\xaa\x7f\x0c\xc4\x6a\x48\x86\x4e\x16\x05\x59\x20\x94";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_252() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xf4\x28\xc9\xae\x3e\x23\xea\xf9\xc2\xa5\xb9\xa7\xe4\x1e\xfd\x1c\xff\xbf\x35\xf8\x81\xbf\xc3\x56\x94\xd9\xc0\x5d\x1e\x31\x2b\x10\
\xef\x6d\xa9\x02\x3c\xfd\x2d\xd0\xcb\x7b\x9e\x2a\x77\xd6\x44\xaf\xfe\x62\xa6\x3f\xb0\xf2\x9d\x45\x29\x1c\x68\x61\xaa\x06\x3c\x5c";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_253() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xb9\xa1\x6d\x9a\x5b\x85\xa7\x14\xe2\xbb\x2a\xa2\x2b\x08\x6a\x17\x40\x4c\x7a\x3f\xf6\x24\x52\x73\x23\x47\x41\x9c\x99\xe9\x0b\xda\
\xd5\x78\xb4\x62\xf5\x23\x99\x43\x04\xb6\xaf\xcf\x69\x44\xa9\xcc\x5d\x0a\xd1\xaf\xad\x95\x64\x75\xc8\xf2\x95\x3c\x06\xb0\x6b\x97";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_254() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x8f\x65\x9a\x16\x3a\x58\xe9\xf9\x00\xc1\xe9\xb3\x4f\xb1\xcd\x61\xff\xc9\x89\x02\x67\xbe\x34\x17\xc8\xaf\xe7\x9d\x57\x21\x4d\xa0\
\x5c\xd5\xcb\x68\xa2\xb9\x3d\xa0\xdb\xe5\x6c\x1c\xfc\x0d\xce\x8b\x6c\x32\x60\xe0\xc4\x83\x79\xc6\xd2\x09\x1f\x16\xb3\x92\x21\xc0";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_255() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xd2\x57\xf1\x33\xf0\x0a\x07\x9f\x4e\x67\x78\xea\x4a\x9b\xf4\x2b\x9f\x23\x12\x90\x43\x1b\x5b\x93\xd7\xe8\xb0\xe3\x5b\x48\x01\x06\
\x50\xd6\xc6\xb4\x65\x74\xd1\xef\xce\x03\x51\x0b\x8d\xb4\xa0\x98\x1c\xe1\x38\xc5\xbd\x8f\xe0\xe5\x4c\x98\x8c\x40\xc5\xfc\x92\x00";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_256() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x5e\xf2\xac\x57\xc4\xe9\x3c\xf7\x8d\x8f\x86\xc3\x5d\x41\x3b\x98\xdc\x19\x02\xdd\x24\x5a\xff\xde\x5c\x16\x03\x4a\xfc\x7e\xa4\x55\
\x47\xb3\xe9\xf7\x7f\xbc\x50\x75\xba\xd0\x3c\x41\x80\x94\xf1\xae\xc1\xd0\x3e\xde\xaf\xa1\x67\xfa\x6a\xf8\x35\x26\x55\x2f\x70\x34";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_257() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xa7\xb5\x13\xf9\x62\x66\x41\x4f\xa6\xff\x43\x9a\x35\xd8\xf0\x9a\xb6\x15\xdb\x0b\xb6\xa3\xb1\xa1\x20\xc2\x17\x68\x3f\x72\x4b\x23\
\x42\x00\x7a\x2c\x9f\xea\xbc\xd6\x24\x9a\x0d\x17\xac\xec\xd9\x95\xe2\xa2\x17\xfb\x5f\x07\xbe\xc9\x69\x38\x01\x6e\x29\x7e\xfa\x52";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_258() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x77\x43\xab\x72\x48\xda\xe5\xf1\xa5\x9a\xc6\xb0\xa1\x36\xe9\xf1\xe5\x1a\xff\x8b\xd4\x57\x95\xac\xe5\xf8\x18\x7a\x13\xed\xf9\xad\
\xbd\x96\x42\x07\x83\x78\xba\xb5\xc6\xd4\x84\xf9\xe1\xce\x39\x67\x5b\x72\x17\x0b\xf3\x9a\xbc\x9b\xe7\x94\x2f\xc0\x1f\xc4\x35\xd7";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_259() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x0e\x3a\xa9\x71\xba\xcd\xac\xe3\x50\xdc\x09\x57\xfa\x5b\xde\x09\x46\x32\x4e\xb1\x39\x93\x9d\x7f\xc1\x99\x7c\x70\x1e\xff\xd0\x4a\
\x4e\x6c\x36\x25\xd9\x56\x41\x68\xd3\xa7\x52\x96\x12\x21\xa1\xde\x8c\xf5\xf3\xd6\x03\x75\x2a\x8c\x2e\x62\x77\xac\x3a\x91\x8c\x25";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_260() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x0f\x56\x3e\x21\xbf\x9b\x24\x01\x5a\x7c\xdb\xb6\xf0\x00\xa6\x92\x78\x4a\xc2\xe4\xbc\x27\x15\xc7\x6f\x68\x42\x64\xa8\x99\xc8\x24\
\x0c\xab\x0d\x76\xe6\xb0\x1c\xab\xe4\xf3\x27\x42\x9d\x11\xbe\x11\x5e\xd6\xdc\x0c\xa7\x4f\x02\xc1\xb9\x87\xa0\x82\xf5\xaf\x43\xa8";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_261() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x5d\xa4\x9f\x10\x24\x9e\x4d\xf3\xdb\xb4\xe3\x1e\xce\x0b\x0e\xe9\xaa\x07\x3f\x25\x88\x19\x5a\xaa\xe6\x3e\x74\xf6\x56\x7a\x77\x48\
\x10\xb5\xdd\x61\xb6\xbf\x21\x9e\x9e\xab\x30\xef\x09\xc1\x3f\xc1\x84\xb3\xd0\x9f\xf7\xa4\xe1\x92\xbc\xa8\xf5\x11\x1c\x41\x63\xc7";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_262() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x6f\x72\xe6\xe5\xc6\x30\x06\x79\xd3\xf1\x4f\x0f\x6e\x59\x06\x65\x64\x35\x76\xae\x8b\xbc\xb7\xc0\x5b\x2f\x4a\x83\xe7\x5e\x6a\xc3\
\xe7\x12\xcb\x05\x6f\xf0\x34\xda\x34\x05\x43\xc5\xda\x69\x97\xe6\x5a\x3a\xb4\xcd\x39\xe9\x97\x89\x2b\xb9\x2e\xe2\xc2\x2b\x81\x67";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_263() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x6b\x54\x4d\xf9\x16\x8e\x77\x87\xdb\x28\x2e\x2a\xe0\x1d\xd7\x23\x06\xd9\xc9\xbc\x80\xf5\xab\x38\xce\x59\x47\x66\xc3\xd9\x29\xe9\
\x67\x49\x3f\xf6\x01\xca\x60\x86\x2b\x47\xd3\xa0\x78\x5c\x91\x7e\x44\x58\x40\x44\xe3\x60\x23\xa5\x44\x24\x01\x5e\x58\xbe\x50\x40";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_264() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x1c\x31\x38\x5b\x9d\xb9\xb3\x74\xe9\x24\x99\x93\x9a\xb0\xfd\x7e\x7e\xda\x46\x45\x61\xeb\xa8\x9f\xcd\x7b\x47\x69\x81\x4a\x86\x38\
\xa4\x76\x4c\xf8\xce\x97\xb5\xd1\x43\xbb\x8e\xeb\x9e\x1b\x27\x28\x7f\x2b\x73\x94\x2e\xcd\xbc\x63\x59\xaa\xfb\x1e\xe7\xa1\x52\xc2";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_265() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xaa\xbc\xf8\xb1\x44\x3d\x6c\xbb\x1d\xe1\x29\xa0\xff\xe0\x9f\x60\xb2\x3f\xd9\xd0\xa4\x4b\x6b\xdf\x25\xbe\xd7\x37\x3f\xdb\xfd\x1d\
\xb7\x16\xbd\xe7\xfe\x9f\x2f\x46\xde\x0b\x68\x8e\x30\x25\xe0\x29\xcf\xf1\x52\x44\x42\x9a\xd4\xf8\x34\x84\xf5\xde\xa4\xaf\x85\x83";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_266() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xe7\xcd\x58\x0b\xd9\x57\x91\x5d\x52\x70\x56\x83\x2e\x37\x79\x3a\xb3\xb0\x82\xdd\xfa\xd9\x37\x24\x12\xe1\x90\x8e\x5c\x16\xbb\xb6\
\x20\x86\x01\xa9\x70\xd5\x84\x4b\x78\x0d\x92\x46\xe9\x58\x3e\xb3\x59\x18\xc4\x2e\xd6\x95\xc0\x7d\x52\x24\x40\x37\xf0\xe3\x1d\xb5";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_267() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x2a\x52\xdb\x1f\xe2\x46\xb7\x1c\x79\xc0\xd0\xac\x49\xa7\xd3\x8d\xe6\x7b\x20\x29\x95\xef\xbb\xd2\xa9\xcc\x52\x5f\x6f\x36\x01\x03\
\x68\xf4\x94\xbe\x27\xe0\x59\x3e\x2d\x61\x2f\x1f\xa1\x0a\x92\x11\x43\x7e\x6a\xa1\x6e\x65\xd9\x77\x35\x01\x40\x72\xf0\xdc\xec\x94";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_268() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x1c\x50\xdc\x49\xfe\xf7\x08\xc4\xcd\xd6\x2e\x76\x6f\x9b\x60\xf7\x84\xd5\x1a\xfe\xe1\x7a\x8f\xe9\xf3\x70\x1b\x2f\xae\x55\xb7\xa5\
\xd1\x0f\x0d\x96\x39\xd8\x3d\xce\x8f\x26\xa8\x69\x70\x5a\x6d\x6d\x38\xe6\xd3\x28\xf5\x68\x55\x81\x14\x2a\xec\x0d\xcd\x1f\x90\xe7";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_269() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x6d\x0a\xa1\xbc\x1c\xee\x6d\x07\xd0\x45\x00\x2c\x13\x29\x0d\x0c\xa2\x5c\xa3\xc8\x78\x33\x43\xa5\x25\xfa\xc7\x04\x72\xb9\x2c\x62\
\xd6\xfb\xa7\x11\x74\x44\x8b\x47\x2c\xf1\x72\xb0\xca\x9e\x37\x7f\x1a\x26\x03\xba\x7a\xe1\x27\x6d\x15\x3b\x20\xc6\x3e\x7d\x24\xbf";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_270() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xf0\x7e\x3d\x8b\xe2\xba\x54\xc6\x08\x41\x41\xe1\xfd\x2b\x29\xcf\xd0\x0d\x4e\x6d\xd6\xff\xb1\x15\xed\x83\x9b\x10\xbd\x8a\x42\x2f\
\x42\x99\x2c\xb9\xa5\x24\x38\x97\xd5\x54\x08\xe9\xbb\x55\x60\x43\x31\x8d\x87\x34\x9a\xf3\x5d\xcc\x09\x75\xed\x80\x5c\x8f\xa2\xc9";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_271() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x43\xa9\xb9\x02\x74\xdb\xd5\xf3\x6d\xd2\x90\x46\xfc\x83\x90\x00\x8d\xde\x74\x51\x3c\xe4\xc3\xe8\x89\x2b\x23\x6e\xff\xf8\x0c\x9d\
\xc7\x15\x47\x15\x2a\x58\x97\xdb\xe1\x69\x57\xbd\x15\xd1\xa8\x7d\x77\x04\x96\xf8\x14\xfe\x29\x21\xc8\xf3\x3d\xf0\x43\x93\xc7\xf8";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_272() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xe9\xaf\x8e\x8c\x19\xda\x9d\x5c\x2f\x3b\x3c\x03\xb8\xe9\x27\xc3\xcb\xe2\xd7\x17\xf9\x8f\x50\x09\x72\xe5\x6d\x82\xeb\x07\xc2\xb1\
\x4e\x83\xfc\xaa\xca\xdc\x26\xf8\xbb\x5e\x7b\x94\x74\x1f\xe5\x4f\x31\x27\x5e\xbd\x6e\x1c\x96\x9d\x7e\xc2\xfe\xce\xad\x8a\x0d\xae";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_273() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x33\xd9\x58\x2b\x56\x7a\xad\xbe\x59\x60\x6f\xa6\xff\xc1\x18\x48\xe4\x94\x7b\x51\x79\x59\x73\x17\x77\x63\x17\xb2\xb4\xff\x65\xd0\
\xb4\xd8\x56\x8d\xc8\x43\x31\x9c\xc0\x4f\x4b\xf1\x10\x49\x6d\xee\x7c\x92\x29\xfc\x68\xcb\x09\x58\xf3\xcb\xd3\x7e\xcc\xa6\x99\x0f";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_274() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xe2\x1c\x02\x82\xad\xb1\xb2\x05\x5f\xda\x74\x46\x44\xc6\x86\x12\xcf\xb0\xc6\x8a\x70\xb9\x81\x2d\x00\x7f\x21\xa7\x8f\x1a\xdc\x48\
\x49\xf3\xe7\x64\x4b\xc6\x63\x3e\x27\x73\xa2\xf3\xcc\x52\x14\xfa\x72\x08\xe3\x0a\xfb\x3d\xe9\x92\xf0\x77\xee\x32\x15\x69\xdc\x48";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_275() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xaf\x27\xde\x0d\xa6\x55\x6e\x4e\x64\x58\x8c\x96\x94\xaf\xee\x9a\x84\xe1\xcb\xd0\xc3\x88\x97\x2d\xf3\xa9\x97\xf7\x60\xbb\xcd\x90\
\x3c\x5a\x02\xe1\x61\x55\x1f\x33\x3d\x77\x05\x59\xab\x1a\xf4\x9b\xf8\xb6\x82\x74\x89\x65\x90\x93\x9c\xe9\x56\xd9\x91\x3b\x67\x6f";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_276() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x0d\xa4\x1b\x82\x55\x0b\x35\x8f\xf4\x74\x91\x5d\x83\x10\x4d\x41\xa8\x3a\x12\xef\x70\x58\x9b\x9d\x39\x2f\x0f\x30\xdc\x32\x42\x9e\
\xdc\x76\x16\x3c\x8f\xe0\x7a\x3f\x70\x9c\xbd\x92\xda\x0b\xbf\xc5\x04\x5f\x3d\xb8\x2a\xa5\x34\x4c\xf1\xfd\x5b\x27\xfc\xd2\xf7\xa6";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_277() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x19\xc8\x44\xb8\xc7\x20\x90\x26\xa0\x99\x6a\x78\x29\x83\xe1\xbd\x0f\x0d\xe9\x25\x5b\x86\x73\x9b\xe9\xbe\xf0\x8e\xa5\x47\x5c\xc6\
\x69\xa7\x79\xdd\xf5\x77\x47\xcf\x7d\x9a\x22\xf0\x0e\xd8\xef\xc6\xe8\x18\xaf\x58\x27\xb7\x50\xd6\x65\xfe\xe6\xd6\xd5\x8a\x22\xe8";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_278() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xbd\x07\xbd\x43\x26\xcd\xca\xbf\x42\x90\x5e\xfa\x45\x59\xa3\x0e\x68\xcb\x21\x5d\x40\xc9\xaf\xb6\x0c\xe0\x2d\x4f\xda\x61\x75\x79\
\xb9\x27\xb5\xcb\xa0\x2d\x24\xfb\x9a\xaf\xe1\xd4\x29\x35\x1e\x48\xba\xe9\xdd\x92\xd7\xbc\x7b\xe1\x5e\x5b\x8a\x30\xa8\x6b\xe1\x3d";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_279() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x00\x89\xde\xe2\x7a\x60\xd0\x71\xda\xbb\xaf\x58\xf3\xe5\x66\x14\xda\xd3\xb7\xf9\xa8\x03\x07\x69\xfd\x04\x63\xb3\xe6\xe0\xf0\x3a\
\x14\x7b\x4d\x6e\x7e\x7f\xd9\x39\xb9\xb5\x4d\xab\x45\x8f\xd5\x56\xad\x8f\xda\xf4\xda\x6c\x39\x09\x58\x8c\x4e\x05\x0c\xa7\x4a\x67";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_280() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x42\xed\xe1\x06\xcf\x85\xae\xf4\x6d\xf7\xe5\xdb\xa8\xa8\xb0\x04\x59\x31\x7d\x9e\x76\x6a\x7b\x77\xc2\x99\xaa\x0e\x17\xde\xa1\x42\
\xb6\xe9\xa8\x6f\x4f\xc3\xe9\x45\xd4\x32\x3b\xa8\xe4\x59\xf6\xb7\xb1\x4c\x56\x3a\x69\x8c\x75\x7a\x2d\x5f\x7b\x0b\xc3\x01\xed\xe2";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_281() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x97\x4b\x43\x16\xc5\xe7\xd1\x34\x8b\x28\xdb\xc4\xfd\x61\xd8\xd3\x47\x0d\xe7\x44\xc3\x0f\x5b\xe2\x37\xf8\x5f\x29\x96\x9d\xea\x77\
\xb5\xf0\x0b\x58\xb8\x3c\xfc\x7b\xc5\x16\x55\x46\x5b\x4a\x28\xab\xe1\xed\x3d\xbe\xc2\x0c\x6b\x46\x43\xae\xc8\x5b\x95\xa5\xbe\xc6";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_282() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x59\x87\x3d\x75\x23\x93\x6a\x12\x1b\x62\x9e\x98\x70\xf9\x30\x41\x9f\x25\x3a\x57\x67\xb9\xd0\xdc\x49\x71\x6f\x2c\x50\xe1\x7b\xd0\
\x16\x3b\x71\xf2\xbf\x43\x18\xfb\xde\x1c\xea\xa5\x85\x45\x00\x80\xee\xc2\x84\x74\xcd\x18\xbf\x7c\x21\xd2\xd1\xbf\xde\x4f\xf6\x77";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_283() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xbd\x85\xa7\x9f\x81\xc4\xf9\x61\x3e\x64\xfa\x34\x78\x86\x43\x78\x56\xc7\x35\x8d\x1b\x69\xcf\x1e\x92\x3d\x77\x42\xd8\x2f\x9b\x67\
\x67\xd2\x69\x18\xea\xa8\xac\xb1\x13\xa1\xda\xad\xae\xdc\x70\x97\x42\x45\x73\x03\xeb\xc2\x3c\xdd\xa5\x57\x26\x13\xdc\x82\x77\x03";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_284() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x3e\x6a\x4e\xff\xc4\x7c\x2f\x59\x26\xbb\x6b\x4a\xcf\x2e\xac\x48\xb9\x52\x4c\x47\xd5\x11\xf8\x16\x97\x67\x96\x77\x86\x00\xd6\xc5\
\xbf\xce\x59\x32\x42\xa5\x98\x5a\x97\x75\x90\xf8\xd7\x48\x5d\xf3\xf9\x53\x35\x29\x57\xf3\xc1\x7c\x13\xe9\x45\x83\xd9\xc0\xe7\xb9";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_285() {
    // point with coordinate y = 1 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x9a\x44\x87\xfc\xfc\xe8\x39\x66\x88\xe7\x44\x9e\x09\x5f\xe8\x03\xca\xa2\x53\xd4\xbd\x7c\x66\xdb\xc6\x26\x1c\xc9\xd9\xf8\x83\xa5\
\x0e\x52\x51\xba\xe2\x9c\x5a\x5c\xdf\xa3\x1b\xc6\x11\x05\x67\x1a\x88\xa0\x18\x46\x73\x98\x15\x8d\x35\xb8\x88\x29\x23\x7c\x0b\xff";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_286() {
    // point with coordinate y = 1 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xfe\xd6\xce\x12\x72\x90\xc1\x29\x1c\xa5\xce\x64\xac\xb4\xe0\xf2\xf8\x90\x56\x54\xd1\xd2\x5b\xa5\x7c\x1f\x74\xab\x52\xf2\x1f\x42\
\x96\x3d\x31\x67\x1c\x06\xb8\x02\x16\x99\x29\x52\x5c\x4a\x1f\xde\xff\x5b\x1e\xaf\xab\x91\x9d\xc2\xdf\x6c\x52\xbe\x84\xdf\xae\xf3";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_287() {
    // point with coordinate y = 1 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xf7\xce\xe5\xb5\x5f\x18\x69\xf1\x37\xdd\x70\x7c\x8f\x8f\xb8\x96\x5a\x2b\xe5\x84\x0c\x31\x49\xfb\x75\x96\x95\xa4\x66\x1b\x9c\x0d\
\x23\xc7\x8c\x4e\x96\x47\xb0\xd6\xcb\x2f\x26\x02\xbe\x73\xff\x25\xcf\x3d\x09\xc9\x6d\x89\x2b\x57\x45\xfe\x5e\xca\x81\x4a\xec\x91";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_288() {
    // point with coordinate y = 1 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x2b\xaa\xae\xc3\xb3\xe8\xd5\x4a\x4e\x18\xf0\x96\x0b\x94\x7d\xa2\x53\x5e\x3c\xfc\xca\x2c\xfa\x8b\x71\x13\xaa\xd8\xe3\xb6\x62\x6f\
\x72\xf7\x1e\x7c\x9e\x96\x04\x2c\x1d\x39\xcc\x8f\x11\x39\xd5\x14\x7c\x6f\x4f\xe6\x2e\x23\xcf\x6d\xf3\x64\xb5\xf4\xd8\x99\xf8\x42";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_289() {
    // point with coordinate y = 1 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xa5\x1a\xb1\x23\x8b\xc1\xbe\xd2\x52\x47\xe7\xd1\x79\xc8\x3a\x61\xae\x2d\x4a\x9f\xe2\x28\x8c\x36\x3a\xe0\xeb\x7a\x77\xde\x43\x2a\
\x3c\x6d\x35\xd8\x2b\xa8\x01\x7e\x6c\xa9\x04\x1c\xc7\x85\xa3\x07\x03\xf7\xbc\x44\x27\x50\x6e\x62\x4a\xc5\x97\x9d\x71\x54\x21\xdd";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_290() {
    // point with coordinate y = 1 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x8b\x5a\xe8\xa0\xe5\x5f\x30\xf5\x09\x06\x13\x15\xab\xae\x79\xac\x48\x0f\x88\xb4\x46\x55\xf7\x26\x9a\x38\x5c\x81\x52\x68\x84\xbe\
\x26\x29\x74\xa3\x1a\x0e\x23\x22\x12\x6c\x2d\x77\xb2\x6b\x10\x8a\xbd\x81\xf8\xb9\x52\xc4\x58\xcc\xc9\x5d\x46\xfb\x49\x24\xc7\xc0";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_291() {
    // point with coordinate y = 1 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x5f\x60\xc7\x7e\x47\x4d\xd6\x6c\x81\x35\xee\x3d\xaf\xc7\x5b\xa6\x44\x64\x98\x24\xc7\x27\x37\x54\x20\x91\xad\x46\x9a\xdb\xb6\x85\
\x31\x2c\x09\xc6\x9b\x62\x9d\x04\x36\xbf\x3b\xd6\xc6\x08\x3f\xf2\xa8\x7b\xe4\x84\xa7\x3e\xf3\xa5\xd2\xc3\xe0\x6b\x5d\x9b\x21\xb3";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_292() {
    // point with coordinate y = 1 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xe0\x6e\xaa\x73\xf6\xfe\xae\x45\x41\x7d\x85\x9b\xba\xd4\xbc\x40\x4b\x28\x85\xbc\xd2\x13\xeb\xac\xe5\x94\xe1\x6f\x49\x70\xe0\xc4\
\x11\xed\x33\x23\xa3\xd7\xaf\xc7\x07\x62\x39\x88\x43\x07\xf9\x18\x49\xed\x5f\x5e\x36\xb6\x17\x1d\x30\x9c\x81\x34\x4c\x53\xe0\x6d";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_293() {
    // point with coordinate y = 1 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x0f\x1c\x1b\x89\xe9\xfc\x6f\xc0\xfa\xef\xc9\x10\x9f\xc4\xa1\x24\x7d\x9f\x54\xc7\x49\x7b\x6c\xc9\x75\xe6\xa5\x45\x5b\xef\x41\x08\
\x36\xcb\x38\x18\x54\x8a\xc9\xb4\x1e\x2b\x83\x36\xc3\xeb\x8d\x97\x07\x5a\xe4\x7e\x18\x27\xfa\x1f\xf9\x3d\x43\x41\xd4\x3c\x0c\x1d";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_294() {
    // point with coordinate y = 1 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x57\x70\x69\xe8\x28\x4a\x95\xf5\x1d\xca\xb9\x19\xb0\x53\x66\x57\x05\x89\x71\xda\xb7\x62\x17\xf8\xd3\xae\x72\x2a\x64\x09\x2e\x26\
\xe5\x1f\x68\xa7\x22\xcc\x03\x97\xf4\x80\x14\x01\x77\x1e\x9a\x3d\x19\x88\xd4\xaf\x76\xf1\x4f\x9e\x2f\x9c\x36\xe0\x77\x3e\x29\xc2";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_295() {
    // point with coordinate y = 1 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x24\x06\xa2\x75\x90\x50\xb9\x25\xdd\x4f\x81\x4c\x50\x33\xe3\x55\x54\x8f\x42\xbb\xf1\xaf\xb7\x91\xc1\x10\xf0\x03\x1f\x29\xf6\x80\
\x99\xd5\xf4\xb0\x05\xde\x39\x27\xf1\x65\xab\xef\xf1\x96\xa2\x8c\x72\x17\xfa\xb1\xbe\x2b\x52\x09\xc3\x24\xe7\xd6\x2d\x2d\xd6\x87";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_296() {
    // point with coordinate y = 1 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xcc\xaa\xc6\x1f\x35\xa2\x78\x61\x18\x36\x21\x64\x2b\xc5\x73\xaf\x91\x33\x56\xfb\x47\xcf\x58\x2f\x0b\x52\x99\x09\x9d\x6f\x6c\x69\
\x91\xf7\x27\x2b\x83\xb7\x38\xa7\xa5\xd3\x04\x47\xc8\x7f\x12\x6a\x7d\x98\xec\x72\xfa\x26\x09\xd0\x93\x9d\x18\xdb\x7e\xa7\xeb\x3a";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_297() {
    // point with coordinate y = 1 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x01\x41\x59\x17\x27\x2f\x19\x84\xe7\x21\x7a\x36\xfb\x31\x1f\xd2\x90\x4d\x41\xa6\xb1\x39\x73\xf9\x2a\xae\x3b\x90\xe8\x5e\x4d\x56\
\xd9\x7c\x82\x2e\xb7\xb2\x1a\x84\xd0\xd1\xbe\x48\x67\x40\x4a\x80\xc3\x48\x67\xf4\x31\x39\xda\xdc\xc3\x61\x9e\x10\xb2\x22\x56\x2b";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_298() {
    // point with coordinate y = 1 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xb2\x57\x5d\x10\x0c\x6f\xa0\x56\xbc\xd1\x37\xab\x11\x1b\x53\x15\xa8\x90\x8c\x29\x24\x3b\x84\xf3\xdc\x99\x6d\x0e\x45\x76\x4b\x91\
\x66\xca\xbe\xb4\x18\x85\x58\x8e\xc0\x8b\x47\x25\x7d\xf5\x8b\xd5\x8f\x7d\xcd\x9e\x01\x2e\x26\x69\xfa\x2f\x52\xe2\x57\x67\xfc\x4c";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_299() {
    // point with coordinate y = 1 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xc1\x73\x55\xed\x30\xcc\xd6\x42\x7f\x96\x85\x70\x90\x21\xb2\x5c\x11\xed\x17\x6e\x96\x10\xc4\x79\xbc\xc4\xcc\x75\x52\xa7\x38\xe6\
\x1f\x75\x11\x47\x61\xdb\xa0\xec\x60\xcd\x26\x4b\xba\xb7\x63\xc5\xd5\xab\xcc\x75\xcd\x8f\xb5\x65\x1d\x06\x45\x17\x99\x88\xcc\x6d";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_300() {
    // point with coordinate y = 1 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x34\x15\x92\x39\x0c\xcc\xe4\x85\xde\x88\x80\xf3\xd7\x27\xf6\x64\xc3\x81\x91\x4a\x1b\xec\xec\x38\x3b\x35\x58\x67\x51\xfc\x81\xc2\
\xad\xd7\x18\x52\xb8\x70\x16\xe1\x01\x9c\xae\x7a\x90\x80\xe7\x5c\xe0\xb0\xb8\xaa\xc1\x75\xd6\x92\xd5\xe7\xb4\xda\xd0\x88\xf5\xcc";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_301() {
    // point with coordinate y = 1 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xfa\x76\x4b\x6b\x76\xa8\x6c\x3b\x76\x21\x20\x82\x5d\x35\x3a\x24\x76\x62\x08\xc1\xf5\xcc\x0f\xe3\xfe\x79\x98\x02\x6a\x2e\xc5\xc4\
\x3b\xb2\xf9\x48\xfd\x94\xcd\xaa\x58\x69\xb1\xe0\xe7\x3a\x4d\x97\x03\x5c\xc4\x93\x57\xfb\x7b\x74\xd7\xed\x0a\x2c\x5b\x8d\x54\xeb";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_302() {
    // point with coordinate y = 1 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xa7\x1f\xbb\x61\x71\x99\xbd\x58\x5b\x4b\x66\x21\x2c\xa3\x3c\xa9\xe0\x93\x70\xe6\xbf\x15\xc8\xea\x0a\xce\xfd\x9c\x8e\x94\x5d\x06\
\x84\x0f\x05\x88\x63\x07\x8e\x74\x3e\x22\x0f\xf9\x9f\x23\xbb\xc1\xda\xa3\x68\x35\xd4\xb1\x26\x9f\x0a\x75\x36\xe6\x3f\x06\xd8\x53";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_303() {
    // point with coordinate y = 1 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x13\xc8\x29\x2d\x85\x4d\x39\x45\x1c\x0c\x63\xa8\x02\xb8\xc0\x3e\x4f\xcb\x87\x5e\xf0\x12\x39\x89\x62\x95\xba\x1c\x0f\x38\x69\x75\
\xf8\x2d\xf1\x97\x08\x6f\xd8\x60\x32\xcb\x36\xb6\x9a\x27\x87\x6d\xd7\x5a\x8e\x96\x79\xf3\x6f\xfc\x22\x10\xed\xb1\x28\xd4\xbe\x13";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_304() {
    // point with coordinate y = 1 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x0c\xd9\xdf\x41\x5a\xcc\x0c\x32\xfd\x4e\x3d\x69\x24\xce\x53\x07\x5b\x04\x52\xbf\x91\x9a\x2a\xb2\xeb\xe2\x65\x97\x57\x0f\x1e\xcd\
\x59\x85\xd8\xd2\xc5\xdf\x78\xfc\x10\x0f\x87\xef\xb6\xdf\xa9\x54\x37\x57\xbd\xff\xec\xf0\x83\xdf\xcd\x1e\xcb\x38\xde\x6c\x23\xf8";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_305() {
    // point with coordinate y = 1 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xd2\xdb\xea\x40\x46\xb2\x3f\xd2\xb2\x33\xd1\xce\x31\xdc\xed\xdb\x89\xb2\x5f\x26\xc0\x62\x7a\x9d\x2d\xb3\xc5\x60\x5c\x9c\xc9\x95\
\x35\xbd\xc8\xde\x74\x51\xc1\xe2\x7e\x97\xaa\x91\x40\x2c\xce\x38\x82\xc7\x12\x69\xd9\xcb\xdc\xb5\xd7\xac\x0c\xeb\x91\x1b\x9b\x6d";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_306() {
    // point with coordinate y = 1 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x88\x8f\xb0\x44\xfb\x2b\x6c\xaa\x60\x36\x6b\xfa\x66\x2a\xdb\xa4\x79\xb8\x36\x5a\x65\x55\xa2\x98\x87\xd5\x80\xf5\x87\x08\x6b\xa8\
\x48\x2f\x4e\xc2\x40\x82\xa4\x8d\x64\x02\xaf\xa1\x62\x21\x43\xf2\x6e\x61\xd9\x1b\x7e\x30\xd6\xa4\xb2\x23\x63\x0e\xe1\x0f\x70\xfb";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_307() {
    // point with coordinate y = 1 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x2e\x2b\xec\x13\x42\x49\x37\x9d\x57\x70\x03\x01\xf3\xa5\x8e\x4b\x39\x5a\x4d\x28\x37\x0d\x2a\x06\xe6\x5e\x7a\xc8\x9e\xd7\x6a\xc6\
\x97\xdc\x96\x0b\xd7\x95\xcd\xf4\xfb\xcf\xdd\x75\x14\x90\x57\xb8\xe0\x22\x33\x1c\x7b\x54\x61\xf3\x83\xac\x58\x9d\x76\x4d\xf3\x33";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_308() {
    // point with coordinate y = 1 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xc7\x8c\xda\x7e\x3b\x9e\x17\x72\xeb\xed\x30\xb2\xb5\x1d\xcf\x15\x5a\x69\xa0\xfc\x50\x45\x57\x83\x6e\x25\x14\x7c\xfb\x81\x27\xd2\
\xf8\x28\x9c\xf3\x8b\x03\x3d\x37\x63\xc8\xf9\xf6\xc0\x91\x78\x7a\x31\x42\xfb\x83\xdf\xf5\x71\x95\x90\x28\x2c\x6f\x85\x2e\x01\x05";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_309() {
    // point with coordinate y = 1 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x1e\x3d\xf4\xdd\x7f\xb7\x71\x8c\xb0\xaa\x0d\xd7\x2f\x8a\x25\xc8\x3c\x4e\x80\x4e\x7c\xbd\x48\xc5\xe9\x65\x65\x1f\x9e\x23\xbf\x4e\
\xf0\xff\x40\xdd\x97\x96\xe4\xa9\xa5\xed\xdd\x2c\x4c\xa4\xeb\xd1\x09\x90\xd8\xfb\x89\x18\xd1\x2d\x53\xc7\x60\x01\xaf\xa9\xde\x7f";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_310() {
    // point with coordinate y = 1 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xe5\xc5\xdc\x3f\xd8\x8d\x85\x66\x8b\x3b\x70\x9f\xd6\xb4\x23\x2f\x1f\x80\x94\x9c\xbc\xcb\x55\x88\x36\x3e\x6c\x21\x7a\x2b\x3e\xd8\
\x8d\xbd\x0d\x6e\x3c\xc9\x7f\x30\x81\xd1\x66\x02\xaa\x3d\x1b\x65\x5e\xe0\x79\x1c\x87\xfc\xb5\xab\xe6\x21\x7d\x8c\x85\x13\x80\x7e";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_311() {
    // point with coordinate y = 1 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x02\x1c\x41\xec\xee\xc2\x4e\x0f\xba\x89\x4a\xd7\x41\x5a\x95\x98\xcb\xcd\x14\xfa\x6c\xa4\x6e\x25\x57\x52\x68\xa1\xd8\xe5\xbb\xc6\
\x3f\x84\x6c\x6a\x18\x5f\xa3\xf2\x3b\xb9\x2c\x14\xe7\xe2\xcb\xa8\xc7\x40\x47\xc0\x9a\xf7\x66\xf5\x5e\xf0\xc9\x07\xc8\x0d\x94\x51";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_312() {
    // point with coordinate y = 1 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x8e\x24\x19\x2c\xd3\x33\x35\xa1\x14\xf5\x07\x02\x66\xc0\x14\xcb\x0d\x8c\x70\x4d\x16\xd6\x04\x2e\x89\xc1\x75\x97\xbc\xd4\xe7\x7e\
\xbd\xb4\xc5\x17\x17\x04\xc2\xc0\x92\x75\xc2\x2a\x31\x0e\x0c\x4f\xe0\x92\xe4\x08\x48\x56\xda\x99\xb9\x4a\xbb\xfa\x9f\x46\x9f\x48";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_313() {
    // point with coordinate y = 1 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x31\xc9\x0a\xe4\x7a\x93\xd0\x9a\x23\x52\xb6\xf3\x67\x7e\x79\x75\xea\x62\xaa\xde\xdb\x56\xc1\x18\xeb\x8b\x9f\x77\x1e\x2d\xd9\xf5\
\xf2\x60\x1f\xb9\xcc\xa2\x30\x4e\x59\x44\x23\xcf\x48\x06\x4d\xbe\xd1\x7a\xe4\x04\x52\xf1\x8b\xe6\xae\x01\x83\x21\x91\x1e\x8c\xb3";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_314() {
    // point with coordinate y = 1 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xd2\xf2\x11\xcf\xab\x84\xe0\x1c\x8e\x55\x44\x03\x62\x34\xde\xbe\x35\xae\x10\x3b\xb8\x78\xd7\xab\xce\xa6\x82\x5f\x75\x3e\x03\xa3\
\x85\xf7\xf1\x87\x0e\x64\xf1\x26\x2a\xf6\x7a\x25\xef\x98\x80\x41\x9f\x45\x60\x8e\x7f\x9d\xa6\xde\xe8\x3f\x5f\x46\xce\xb5\x3d\xcb";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_315() {
    // edge case private key
    // flags: AdditionChain
    // expect: valid
    let public = b"\x04\
\x31\x02\x8f\x33\x77\xfc\x8f\x2b\x19\x67\xed\xaa\xb9\x02\x13\xac\xad\x0d\xa9\xf5\x08\x97\xf0\x8f\x57\x53\x7f\x78\xf1\x16\x74\x47\
\x43\xa1\x93\x01\x89\x36\x3b\xbd\xe2\xac\x4c\xbd\x16\x49\xcd\xc6\xf4\x51\xad\xd7\x1d\xd2\xf1\x6a\x8a\x86\x7f\x2b\x17\xca\xa1\x6b";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_316() {
    // edge case private key
    // flags: AdditionChain
    // expect: valid
    let public = b"\x04\
\x31\x02\x8f\x33\x77\xfc\x8f\x2b\x19\x67\xed\xaa\xb9\x02\x13\xac\xad\x0d\xa9\xf5\x08\x97\xf0\x8f\x57\x53\x7f\x78\xf1\x16\x74\x47\
\x43\xa1\x93\x01\x89\x36\x3b\xbd\xe2\xac\x4c\xbd\x16\x49\xcd\xc6\xf4\x51\xad\xd7\x1d\xd2\xf1\x6a\x8a\x86\x7f\x2b\x17\xca\xa1\x6b";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_317() {
    // edge case private key
    // flags: AdditionChain
    // expect: valid
    let public = b"\x04\
\x31\x02\x8f\x33\x77\xfc\x8f\x2b\x19\x67\xed\xaa\xb9\x02\x13\xac\xad\x0d\xa9\xf5\x08\x97\xf0\x8f\x57\x53\x7f\x78\xf1\x16\x74\x47\
\x43\xa1\x93\x01\x89\x36\x3b\xbd\xe2\xac\x4c\xbd\x16\x49\xcd\xc6\xf4\x51\xad\xd7\x1d\xd2\xf1\x6a\x8a\x86\x7f\x2b\x17\xca\xa1\x6b";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_318() {
    // edge case private key
    // flags: AdditionChain
    // expect: valid
    let public = b"\x04\
\x31\x02\x8f\x33\x77\xfc\x8f\x2b\x19\x67\xed\xaa\xb9\x02\x13\xac\xad\x0d\xa9\xf5\x08\x97\xf0\x8f\x57\x53\x7f\x78\xf1\x16\x74\x47\
\x43\xa1\x93\x01\x89\x36\x3b\xbd\xe2\xac\x4c\xbd\x16\x49\xcd\xc6\xf4\x51\xad\xd7\x1d\xd2\xf1\x6a\x8a\x86\x7f\x2b\x17\xca\xa1\x6b";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_319() {
    // edge case private key
    // flags: AdditionChain
    // expect: valid
    let public = b"\x04\
\x31\x02\x8f\x33\x77\xfc\x8f\x2b\x19\x67\xed\xaa\xb9\x02\x13\xac\xad\x0d\xa9\xf5\x08\x97\xf0\x8f\x57\x53\x7f\x78\xf1\x16\x74\x47\
\x43\xa1\x93\x01\x89\x36\x3b\xbd\xe2\xac\x4c\xbd\x16\x49\xcd\xc6\xf4\x51\xad\xd7\x1d\xd2\xf1\x6a\x8a\x86\x7f\x2b\x17\xca\xa1\x6b";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_320() {
    // edge case private key
    // flags: AdditionChain
    // expect: valid
    let public = b"\x04\
\x31\x02\x8f\x33\x77\xfc\x8f\x2b\x19\x67\xed\xaa\xb9\x02\x13\xac\xad\x0d\xa9\xf5\x08\x97\xf0\x8f\x57\x53\x7f\x78\xf1\x16\x74\x47\
\x43\xa1\x93\x01\x89\x36\x3b\xbd\xe2\xac\x4c\xbd\x16\x49\xcd\xc6\xf4\x51\xad\xd7\x1d\xd2\xf1\x6a\x8a\x86\x7f\x2b\x17\xca\xa1\x6b";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_321() {
    // edge case private key
    // flags: AdditionChain
    // expect: valid
    let public = b"\x04\
\x31\x02\x8f\x33\x77\xfc\x8f\x2b\x19\x67\xed\xaa\xb9\x02\x13\xac\xad\x0d\xa9\xf5\x08\x97\xf0\x8f\x57\x53\x7f\x78\xf1\x16\x74\x47\
\x43\xa1\x93\x01\x89\x36\x3b\xbd\xe2\xac\x4c\xbd\x16\x49\xcd\xc6\xf4\x51\xad\xd7\x1d\xd2\xf1\x6a\x8a\x86\x7f\x2b\x17\xca\xa1\x6b";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_322() {
    // edge case private key
    // flags: AdditionChain
    // expect: valid
    let public = b"\x04\
\x31\x02\x8f\x33\x77\xfc\x8f\x2b\x19\x67\xed\xaa\xb9\x02\x13\xac\xad\x0d\xa9\xf5\x08\x97\xf0\x8f\x57\x53\x7f\x78\xf1\x16\x74\x47\
\x43\xa1\x93\x01\x89\x36\x3b\xbd\xe2\xac\x4c\xbd\x16\x49\xcd\xc6\xf4\x51\xad\xd7\x1d\xd2\xf1\x6a\x8a\x86\x7f\x2b\x17\xca\xa1\x6b";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_323() {
    // edge case private key
    // flags: AdditionChain
    // expect: valid
    let public = b"\x04\
\x31\x02\x8f\x33\x77\xfc\x8f\x2b\x19\x67\xed\xaa\xb9\x02\x13\xac\xad\x0d\xa9\xf5\x08\x97\xf0\x8f\x57\x53\x7f\x78\xf1\x16\x74\x47\
\x43\xa1\x93\x01\x89\x36\x3b\xbd\xe2\xac\x4c\xbd\x16\x49\xcd\xc6\xf4\x51\xad\xd7\x1d\xd2\xf1\x6a\x8a\x86\x7f\x2b\x17\xca\xa1\x6b";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_324() {
    // edge case private key
    // flags: AdditionChain
    // expect: valid
    let public = b"\x04\
\x31\x02\x8f\x33\x77\xfc\x8f\x2b\x19\x67\xed\xaa\xb9\x02\x13\xac\xad\x0d\xa9\xf5\x08\x97\xf0\x8f\x57\x53\x7f\x78\xf1\x16\x74\x47\
\x43\xa1\x93\x01\x89\x36\x3b\xbd\xe2\xac\x4c\xbd\x16\x49\xcd\xc6\xf4\x51\xad\xd7\x1d\xd2\xf1\x6a\x8a\x86\x7f\x2b\x17\xca\xa1\x6b";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_325() {
    // edge case private key
    // flags: AdditionChain
    // expect: valid
    let public = b"\x04\
\x31\x02\x8f\x33\x77\xfc\x8f\x2b\x19\x67\xed\xaa\xb9\x02\x13\xac\xad\x0d\xa9\xf5\x08\x97\xf0\x8f\x57\x53\x7f\x78\xf1\x16\x74\x47\
\x43\xa1\x93\x01\x89\x36\x3b\xbd\xe2\xac\x4c\xbd\x16\x49\xcd\xc6\xf4\x51\xad\xd7\x1d\xd2\xf1\x6a\x8a\x86\x7f\x2b\x17\xca\xa1\x6b";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_326() {
    // edge case private key
    // flags: AdditionChain
    // expect: valid
    let public = b"\x04\
\x31\x02\x8f\x33\x77\xfc\x8f\x2b\x19\x67\xed\xaa\xb9\x02\x13\xac\xad\x0d\xa9\xf5\x08\x97\xf0\x8f\x57\x53\x7f\x78\xf1\x16\x74\x47\
\x43\xa1\x93\x01\x89\x36\x3b\xbd\xe2\xac\x4c\xbd\x16\x49\xcd\xc6\xf4\x51\xad\xd7\x1d\xd2\xf1\x6a\x8a\x86\x7f\x2b\x17\xca\xa1\x6b";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_327() {
    // edge case private key
    // flags: AdditionChain
    // expect: valid
    let public = b"\x04\
\x31\x02\x8f\x33\x77\xfc\x8f\x2b\x19\x67\xed\xaa\xb9\x02\x13\xac\xad\x0d\xa9\xf5\x08\x97\xf0\x8f\x57\x53\x7f\x78\xf1\x16\x74\x47\
\x43\xa1\x93\x01\x89\x36\x3b\xbd\xe2\xac\x4c\xbd\x16\x49\xcd\xc6\xf4\x51\xad\xd7\x1d\xd2\xf1\x6a\x8a\x86\x7f\x2b\x17\xca\xa1\x6b";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_328() {
    // edge case private key
    // flags: AdditionChain
    // expect: valid
    let public = b"\x04\
\x31\x02\x8f\x33\x77\xfc\x8f\x2b\x19\x67\xed\xaa\xb9\x02\x13\xac\xad\x0d\xa9\xf5\x08\x97\xf0\x8f\x57\x53\x7f\x78\xf1\x16\x74\x47\
\x43\xa1\x93\x01\x89\x36\x3b\xbd\xe2\xac\x4c\xbd\x16\x49\xcd\xc6\xf4\x51\xad\xd7\x1d\xd2\xf1\x6a\x8a\x86\x7f\x2b\x17\xca\xa1\x6b";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_329() {
    // edge case private key
    // flags: AdditionChain
    // expect: valid
    let public = b"\x04\
\x31\x02\x8f\x33\x77\xfc\x8f\x2b\x19\x67\xed\xaa\xb9\x02\x13\xac\xad\x0d\xa9\xf5\x08\x97\xf0\x8f\x57\x53\x7f\x78\xf1\x16\x74\x47\
\x43\xa1\x93\x01\x89\x36\x3b\xbd\xe2\xac\x4c\xbd\x16\x49\xcd\xc6\xf4\x51\xad\xd7\x1d\xd2\xf1\x6a\x8a\x86\x7f\x2b\x17\xca\xa1\x6b";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_330() {
    // CVE-2017-8932
    // flags: CVE-2017-8932
    // expect: valid
    let public = b"\x04\
\x02\x38\x19\x81\x3a\xc9\x69\x84\x70\x59\x02\x8e\xa8\x8a\x1f\x30\xdf\xbc\xde\x03\xfc\x79\x1d\x3a\x25\x2c\x6b\x41\x21\x18\x82\xea\
\xf9\x3e\x4a\xe4\x33\xcc\x12\xcf\x2a\x43\xfc\x0e\xf2\x64\x00\xc0\xe1\x25\x50\x82\x24\xcd\xb6\x49\x38\x0f\x25\x47\x91\x48\xa4\xad";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_331() {
    // CVE-2017-8932
    // flags: CVE-2017-8932
    // expect: valid
    let public = b"\x04\
\xcc\x11\x88\x7b\x2d\x66\xcb\xae\x8f\x4d\x30\x66\x27\x19\x25\x22\x93\x21\x46\xb4\x2f\x01\xd3\xc6\xf9\x2b\xd5\xc8\xba\x73\x9b\x06\
\xa2\xf0\x8a\x02\x9c\xd0\x6b\x46\x18\x30\x85\xba\xe9\x24\x8b\x0e\xd1\x5b\x70\x28\x0c\x7e\xf1\x3a\x45\x7f\x5a\xf3\x82\x42\x60\x31";
    match PublicKey::from_x962_uncompressed(public) {
        Ok(_) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_332() {
    // point is not on curve
    // flags: InvalidCurveAttack
    // expect: invalid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    match PublicKey::from_x962_uncompressed(public) {
        Err(Error::NotOnCurve) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_333() {
    // point is not on curve
    // flags: InvalidCurveAttack
    // expect: invalid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01";
    match PublicKey::from_x962_uncompressed(public) {
        Err(Error::NotOnCurve) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_334() {
    // point is not on curve
    // flags: InvalidCurveAttack
    // expect: invalid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe";
    match PublicKey::from_x962_uncompressed(public) {
        Err(Error::NotOnCurve) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_335() {
    // point is not on curve
    // flags: InvalidCurveAttack
    // expect: invalid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff";
    match PublicKey::from_x962_uncompressed(public) {
        Err(Error::NotOnCurve) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_336() {
    // point is not on curve
    // flags: InvalidCurveAttack
    // expect: invalid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    match PublicKey::from_x962_uncompressed(public) {
        Err(Error::NotOnCurve) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_337() {
    // point is not on curve
    // flags: InvalidCurveAttack
    // expect: invalid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01";
    match PublicKey::from_x962_uncompressed(public) {
        Err(Error::NotOnCurve) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_338() {
    // point is not on curve
    // flags: InvalidCurveAttack
    // expect: invalid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\
\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe";
    match PublicKey::from_x962_uncompressed(public) {
        Err(Error::NotOnCurve) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_339() {
    // point is not on curve
    // flags: InvalidCurveAttack
    // expect: invalid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\
\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff";
    match PublicKey::from_x962_uncompressed(public) {
        Err(Error::NotOnCurve) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_340() {
    // point is not on curve
    // flags: InvalidCurveAttack
    // expect: invalid
    let public = b"\x04\
\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    match PublicKey::from_x962_uncompressed(public) {
        Err(Error::NotOnCurve) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_341() {
    // point is not on curve
    // flags: InvalidCurveAttack
    // expect: invalid
    let public = b"\x04\
\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01";
    match PublicKey::from_x962_uncompressed(public) {
        Err(Error::NotOnCurve) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_342() {
    // point is not on curve
    // flags: InvalidCurveAttack
    // expect: invalid
    let public = b"\x04\
\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\
\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe";
    match PublicKey::from_x962_uncompressed(public) {
        Err(Error::NotOnCurve) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_343() {
    // point is not on curve
    // flags: InvalidCurveAttack
    // expect: invalid
    let public = b"\x04\
\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\
\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff";
    match PublicKey::from_x962_uncompressed(public) {
        Err(Error::NotOnCurve) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_344() {
    // point is not on curve
    // flags: InvalidCurveAttack
    // expect: invalid
    let public = b"\x04\
\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    match PublicKey::from_x962_uncompressed(public) {
        Err(Error::NotOnCurve) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_345() {
    // point is not on curve
    // flags: InvalidCurveAttack
    // expect: invalid
    let public = b"\x04\
\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01";
    match PublicKey::from_x962_uncompressed(public) {
        Err(Error::NotOnCurve) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_346() {
    // point is not on curve
    // flags: InvalidCurveAttack
    // expect: invalid
    let public = b"\x04\
\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe";
    match PublicKey::from_x962_uncompressed(public) {
        Err(Error::NotOnCurve) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_347() {
    // point is not on curve
    // flags: InvalidCurveAttack
    // expect: invalid
    let public = b"\x04\
\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff";
    match PublicKey::from_x962_uncompressed(public) {
        Err(Error::NotOnCurve) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_348() {
    //
    // flags: InvalidEncoding
    // expect: invalid
    let public = b"";
    match PublicKey::from_x962_uncompressed(public) {
        Err(Error::WrongLength) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_349() {
    // invalid public key
    // flags: InvalidCompressedPublic,CompressedPoint
    // expect: invalid
    let public = b"\x02\xfd\x4b\xf6\x17\x63\xb4\x65\x81\xfd\x91\x74\xd6\x23\x51\x6c\xf3\xc8\x1e\xdd\x40\xe2\x9f\xfa\x27\x77\xfb\x6c\xb0\xae\x3c\xe5\x35";
    match PublicKey::from_x962_uncompressed(public) {
        Err(Error::NotUncompressed) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_350() {
    // public key is a low order point on twist
    // flags: WrongCurve,CompressedPoint
    // expect: invalid
    let public = b"\x03\xef\xdd\xe3\xb3\x28\x72\xa9\xef\xfc\xf3\xb9\x4c\xbf\x73\xaa\x7b\x39\xf9\x68\x3e\xce\x91\x21\xb9\x85\x21\x67\xf4\xe3\xda\x60\x9b";
    match PublicKey::from_x962_uncompressed(public) {
        Err(Error::NotUncompressed) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_351() {
    // public key is a low order point on twist
    // flags: WrongCurve,CompressedPoint
    // expect: invalid
    let public = b"\x02\xef\xdd\xe3\xb3\x28\x72\xa9\xef\xfc\xf3\xb9\x4c\xbf\x73\xaa\x7b\x39\xf9\x68\x3e\xce\x91\x21\xb9\x85\x21\x67\xf4\xe3\xda\x60\x9b";
    match PublicKey::from_x962_uncompressed(public) {
        Err(Error::NotUncompressed) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_352() {
    // public key is a low order point on twist
    // flags: WrongCurve,CompressedPoint
    // expect: invalid
    let public = b"\x02\xc4\x95\x24\xb2\xad\xfd\x8f\x5f\x97\x2e\xf5\x54\x65\x28\x36\xe2\xef\xb2\xd3\x06\xc6\xd3\xb0\x68\x92\x34\xce\xc9\x3a\xe7\x3d\xb5";
    match PublicKey::from_x962_uncompressed(public) {
        Err(Error::NotUncompressed) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_353() {
    // public key is a low order point on twist
    // flags: WrongCurve,CompressedPoint
    // expect: invalid
    let public = b"\x03\x18\xf9\xba\xe7\x74\x7c\xd8\x44\xe9\x85\x25\xb7\xcc\xd0\xda\xf6\xe1\xd2\x0a\x81\x8b\x21\x75\xa9\xa9\x1e\x4e\xae\x53\x43\xbc\x98";
    match PublicKey::from_x962_uncompressed(public) {
        Err(Error::NotUncompressed) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_354() {
    // public key is a low order point on twist
    // flags: WrongCurve,CompressedPoint
    // expect: invalid
    let public = b"\x02\x18\xf9\xba\xe7\x74\x7c\xd8\x44\xe9\x85\x25\xb7\xcc\xd0\xda\xf6\xe1\xd2\x0a\x81\x8b\x21\x75\xa9\xa9\x1e\x4e\xae\x53\x43\xbc\x98";
    match PublicKey::from_x962_uncompressed(public) {
        Err(Error::NotUncompressed) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_on_curve_355() {
    // public key is a low order point on twist
    // flags: WrongCurve,CompressedPoint
    // expect: invalid
    let public = b"\x03\xc4\x95\x24\xb2\xad\xfd\x8f\x5f\x97\x2e\xf5\x54\x65\x28\x36\xe2\xef\xb2\xd3\x06\xc6\xd3\xb0\x68\x92\x34\xce\xc9\x3a\xe7\x3d\xb5";
    match PublicKey::from_x962_uncompressed(public) {
        Err(Error::NotUncompressed) => {}
        err => panic!("test failed with {err:?}"),
    };
}

#[test]
fn test_point_mul_1() {
    // normal case
    // flags: Normal
    // expect: valid
    let public = b"\x04\
\x62\xd5\xbd\x33\x72\xaf\x75\xfe\x85\xa0\x40\x71\x5d\x0f\x50\x24\x28\xe0\x70\x46\x86\x8b\x0b\xfd\xfa\x61\xd7\x31\xaf\xe4\x4f\x26\
\xac\x33\x3a\x93\xa9\xe7\x0a\x81\xcd\x5a\x95\xb5\xbf\x8d\x13\x99\x0e\xb7\x41\xc8\xc3\x88\x72\xb4\xa0\x7d\x27\x5a\x01\x4e\x30\xcf";
    let private = b"\x06\x12\x46\x5c\x89\xa0\x23\xab\x17\x85\x5b\x0a\x6b\xce\xbf\xd3\xfe\xbb\x53\xae\xf8\x41\x38\x64\x7b\x53\x52\xe0\x2c\x10\xc3\x46";
    let shared = b"\x53\x02\x0d\x90\x8b\x02\x19\x32\x8b\x65\x8b\x52\x5f\x26\x78\x0e\x3a\xe1\x2b\xcd\x95\x2b\xb2\x5a\x93\xbc\x08\x95\xe1\x71\x42\x85";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_3() {
    // shared secret has x-coordinate that satisfies x**2 = 0
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x58\xfd\x41\x68\xa8\x77\x95\x60\x3e\x2b\x04\x39\x02\x85\xbd\xca\x6e\x57\xde\x60\x27\xfe\x21\x1d\xd9\xd2\x5e\x22\x12\xd2\x9e\x62\
\x08\x0d\x36\xbd\x22\x4d\x74\x05\x50\x92\x95\xee\xd0\x2a\x17\x15\x0e\x03\xb3\x14\xf9\x6d\xa3\x74\x45\xb0\xd1\xd2\x93\x77\xd1\x2c";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_4() {
    // shared secret has x-coordinate p-3
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xa1\xec\xc2\x4b\xf0\xd0\x05\x3d\x23\xf5\xfd\x80\xdd\xf1\x73\x5a\x19\x25\x03\x9d\xc1\x17\x6c\x58\x1a\x7e\x79\x51\x63\xc8\xb9\xba\
\x2c\xb5\xa4\xe4\xd5\x10\x9f\x45\x27\x57\x5e\x31\x37\xb8\x3d\x79\xa9\xbc\xb3\xfa\xef\xf9\x0d\x2a\xca\x2b\xed\x71\xbb\x52\x3e\x7e";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfc";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_5() {
    // shared secret has x-coordinate 2**16 + 0
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x1b\x0e\x74\x37\xc3\x3d\x37\x99\x29\x43\x0d\x3e\xc1\x0d\xf5\x9b\xed\x7f\xe2\xa1\xd9\x50\xc5\x79\x1e\x1e\x9d\xde\xef\x1f\x4d\x70\
\xfb\xdb\x0e\x3b\xbc\xe6\x3a\x27\xf2\x78\x38\xc6\x85\x20\x7f\x2c\xca\xf6\x89\xd2\x5e\xb6\x22\x74\x4d\xb1\x16\x8a\xc9\x26\x19\xe8";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_6() {
    // shared secret has x-coordinate 2**32 + 0
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x08\xd6\x14\x8d\x02\x44\xd2\x43\xb3\xd0\xd1\x77\x7d\xe6\x37\x5f\xa7\xeb\xea\xb4\x77\xf1\x99\x15\xd0\x59\x94\xdb\x04\xdf\x21\x97\
\x27\x73\x7d\x4f\x8c\xe0\xa7\xf3\x90\xbe\xcc\xe9\x2b\x2b\xcd\x5c\x05\x4f\x18\xec\xb5\x8e\x5d\xd5\x9b\xaf\x88\xb4\xed\x6a\xbe\xa8";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_7() {
    // shared secret has x-coordinate 2**64 + 0
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x24\x24\xf9\xd7\xba\x0a\x89\xce\x3c\x7c\x1e\x8f\x15\xdf\xd8\x30\x04\xd8\x66\x80\x96\x7a\x82\xcb\xf9\xbb\x6b\x11\xda\xe5\xfd\x72\
\xe0\x5c\x36\x87\x18\x7b\x1c\xf2\x84\x38\xa1\x7a\x74\x69\xfa\x3b\x09\x4b\x7d\x6f\x36\xcc\xcc\x34\x92\xc0\xb0\xa6\x1f\xab\x2a\x38";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_8() {
    // shared secret has x-coordinate 2**96 + 0
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x4c\x96\x95\xb7\x66\x84\x34\xfc\x85\x76\x9a\xcb\x10\xf0\xed\xcf\x87\xa9\x6b\x7d\x5d\xc3\x47\xb4\x6b\xb3\x04\xb0\xb1\xd3\x26\x7f\
\xcf\x5d\x99\x3b\xff\x2a\x8c\x77\x48\x08\x23\x1a\x34\xf4\x1b\x33\x66\x7d\x8e\xbe\xaf\xd0\x06\x89\xfa\x3a\x9b\xfa\x05\xa4\x0c\x1c";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_9() {
    // shared secret has x-coordinate that satisfies x**2 = -3
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xa4\x92\xfe\x4b\x49\x08\xb6\xd6\x75\xd6\x87\x55\x1f\x99\xc6\x17\xe4\xe5\xc9\x7a\xa2\x66\x95\x89\x53\x12\x9e\xb3\x81\xf0\x15\x3b\
\x11\x1b\x95\xc9\x4f\xa1\xd1\xec\xd1\xd4\x1d\x27\x85\xc1\xdb\x51\x95\x87\x5a\xe9\x80\x51\x73\x2a\x59\xba\x77\x20\xf9\x08\x9a\xf6";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x65\x22\xae\xd9\xea\x48\xf2\x62\x3b\x8e\xea\xe3\xe2\x13\xb9\x9d\xa3\x2e\x74\xc9\x42\x18\x35\x80\x4d\x37\x4c\xe2\x8f\xcc\xa6\x62";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_10() {
    // shared secret has x-coordinate that satisfies x**2 = 2
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xd5\xc9\x6e\xfd\x19\x07\xfd\x48\xde\x2a\xd7\x15\xac\xf8\x2e\xae\x5c\x66\x90\xfe\x3e\xfe\x16\xa7\x8d\x61\xc6\x8d\x3b\xfd\x10\xdf\
\x03\xea\xc8\x16\xb9\xe7\xb7\x76\x19\x2a\x3f\x50\x75\x88\x7c\x0e\x22\x56\x17\x50\x58\x33\xca\x99\x7c\xda\x32\xfd\x0f\x67\x3c\x5e";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x50\x74\x42\x00\x73\x22\xaa\x89\x53\x40\xcb\xa4\xab\xc2\xd7\x30\xbf\xd0\xb1\x6c\x2c\x79\xa4\x68\x15\xf8\x78\x0d\x2c\x55\xa2\xdd";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_11() {
    // shared secret has x-coordinate that satisfies x**2 = 5
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xc7\x4d\x54\x6f\x2f\xcc\x6d\xd3\x92\xf8\x5e\x5b\xe1\x67\xe3\x58\xde\x90\x87\x56\xb0\xc0\xbb\x01\xcb\x69\xd8\x64\xca\x08\x3e\x1c\
\x93\xf9\x59\xee\xce\x6e\x10\xee\x11\xbd\x39\x34\x20\x7d\x65\xae\x28\xaf\x68\xb0\x92\x58\x5a\x15\x09\x26\x0e\xce\xb3\x9b\x92\xef";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x08\x5e\xc5\xa4\xaf\x40\x17\x6b\x63\x18\x90\x69\xae\xff\xcb\x22\x9c\x96\xd3\xe0\x46\xe0\x28\x3e\xd2\xf9\xda\xc2\x1b\x15\xad\x3c";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_12() {
    // shared secret has x-coordinate that satisfies x**2 = 7
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x34\xfc\x9f\x1e\x7a\x09\x4c\xd2\x95\x98\xd1\x84\x1f\xa9\x61\x3d\xbe\x82\x31\x3d\x63\x3a\x51\xd6\x3f\xb6\xef\xf0\x74\xcc\x9b\x9a\
\x4e\xcf\xd9\xf2\x58\xc5\xc4\xd4\x21\x0b\x49\x75\x12\x13\xa2\x4c\x59\x69\x82\xbd\x1d\x54\xe0\x44\x54\x43\xf2\x1e\xf1\x54\x92\xa5";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x19\x0c\x25\xf8\x8a\xd9\xae\x3a\x09\x8e\x6c\xff\xe6\xfd\x0b\x1b\xea\x42\x11\x4e\xb0\xce\xdd\x58\x68\xa4\x5c\x5f\xe2\x77\xdf\xf3";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_13() {
    // shared secret has x-coordinate that satisfies x**2 = 8
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xf4\x75\xf5\x03\xa7\x70\xdf\x72\xc4\x5a\xed\xfe\x42\xc0\x08\xf5\x9a\xa5\x7e\x72\xb2\x32\xf2\x66\x00\xbd\xd0\x35\x39\x57\xcb\x20\
\xbd\xb8\xf6\x40\x5b\x49\x18\x05\x0a\x35\x49\xf4\x4c\x07\xa8\xeb\xa8\x20\xcd\xce\x4e\xce\x69\x98\x88\xc6\x38\xdf\x66\xf5\x4f\x7c";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x5f\x17\x7b\xfe\x19\xba\xaa\xee\x59\x7e\x68\xb6\xa8\x7a\x51\x9e\x80\x5e\x9d\x28\xa7\x0c\xb7\x2f\xd4\x0f\x0f\xe5\xa7\x54\xba\x45";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_14() {
    // shared secret has x-coordinate that satisfies x**2 = 2**96 + 2
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x94\x93\x04\x88\x90\x50\x83\x40\x06\xec\xf1\x1e\xba\x0e\x73\xf0\xdd\x2a\x5e\x77\xa5\xea\x64\x2a\x34\xa3\xf9\x98\x9e\xda\x2d\x57\
\x38\x45\x09\xcd\x42\x76\x3c\x87\xcf\x46\x0d\x1a\xd7\x56\x64\x40\x29\x86\xbb\x8c\xca\x0a\xcd\xfc\x36\x85\xd2\xc9\xc7\xd3\x29\x33";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x34\x76\xa8\xfa\x9c\x74\x48\x12\x4a\xa9\x45\xa2\xe1\x10\x3e\xb9\x1f\x95\xc7\xb4\xd9\x1a\xaa\x1c\x35\xb8\x96\x51\x91\xfc\x0f\xe0";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_15() {
    // shared secret has x-coordinate with repeating bit-pattern of size 2
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xe2\x5e\xad\x83\x42\x88\x8d\x1f\xbd\x2b\xd2\x11\xe9\xdb\x5b\xc7\x61\xda\x9c\xfa\x1e\x80\x50\x78\xb5\x36\x06\xdf\x9e\x54\x44\x40\
\x3d\x34\x21\xfa\x70\xf9\x40\xdb\xa1\x04\xd8\x42\x03\x4d\x2e\xfe\xc9\x33\x21\x61\xcc\xfb\x65\x4a\x8e\x9f\x2e\xc4\x2f\xc1\xa8\x37";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x54";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_16() {
    // shared secret has x-coordinate with repeating bit-pattern of size 2
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xcb\x32\xab\x95\x1d\x75\x81\xe7\x60\x2c\x89\x32\x0d\x91\xd7\x04\x3e\x9d\xc5\x6a\x10\x34\x8d\x58\x6a\x08\xd1\x87\x07\x53\x15\x2b\
\xf9\x6b\xd5\x3e\x7c\xfc\x24\x34\xdc\x61\xa0\x9f\x8f\x48\x53\xe4\xc6\xdd\x49\xe7\x86\x19\x4e\xc0\xa9\x88\xd0\xe8\xd2\x93\x78\xb8";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xa9";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_17() {
    // shared secret has x-coordinate with repeating bit-pattern of size 4
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x0b\x9d\x56\x42\x2e\xd9\xc2\x08\x2d\xd9\xd4\x6d\x23\x1f\xd0\x14\x1f\x92\xe7\x9f\x5a\x12\xda\x4c\x77\xc4\x88\xc8\x73\x63\xf9\x44\
\xe6\xe3\xc2\xec\x97\x79\x61\x5f\x24\x2b\xc3\x0d\x1c\x28\xc1\xf9\x84\xb8\xc2\x52\x24\x3f\x5f\x1e\xaa\x3d\x85\x5e\x1c\xc2\xd8\xa6";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_18() {
    // shared secret has x-coordinate with repeating bit-pattern of size 4
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x05\x07\xfa\xbb\x16\x75\x5f\x48\x85\xae\x45\xb3\xd4\x97\x82\x23\x88\xf4\xe6\xa5\x31\xde\x51\x2c\x20\x04\x80\xb4\xe5\x6b\x89\x2a\
\xb7\x07\x46\xc1\xd8\xa2\x06\x37\xef\xf1\x79\x48\xe5\x57\xa2\xb4\xda\x25\x62\xba\x6b\x62\x99\x1b\x42\x6b\x7b\x37\x87\xa1\x96\x93";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_19() {
    // shared secret has x-coordinate with repeating bit-pattern of size 8
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x3b\x18\xca\xef\x2c\xd9\x82\xc3\xb5\x8f\x25\x8c\xb7\x6d\xaa\x02\x93\x83\xf4\x2c\x8f\x3f\x08\x34\x93\xf4\x2c\x91\x59\x35\x24\x3a\
\x26\x08\x30\xb7\xd2\x5b\x66\x37\x8c\x5d\x25\xfb\x0c\xf2\x3d\x32\x52\x7a\x2c\xdb\x7f\x7d\x7e\x6c\x89\xeb\xea\x82\x77\x73\x8e\xd8";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_20() {
    // shared secret has x-coordinate with repeating bit-pattern of size 8
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x12\x3b\x19\x21\x23\x1b\xee\x31\x5e\x1e\xa6\x6c\xb9\x53\x18\xd6\x39\x2f\x85\x69\x5b\xbe\xc0\x3c\x33\x47\x40\xce\x7a\xdd\x76\x8e\
\xfe\xc9\xa1\x08\x77\x0f\xf0\xeb\x44\x8e\xee\x9f\x06\x36\x74\x16\xd7\x4b\x22\xa2\xf3\x81\x57\xbb\x00\xd8\xc0\xbe\x44\xeb\xf1\x52";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_21() {
    // shared secret has x-coordinate with repeating bit-pattern of size 16
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x92\x4f\xb3\x39\x85\xc8\xa6\x87\xfc\x04\xc9\xdd\x05\xe5\x31\xca\x0e\x02\x23\xaa\x58\xd5\x83\x51\xe9\x22\xef\x48\x20\x43\xd3\x0c\
\xf5\x04\x74\x5e\x76\x9b\x6d\xcb\xef\xe4\x04\xda\x37\xf7\x17\xb3\x10\x9d\x2a\xf2\x34\x50\xfc\xfe\x2f\x07\x5c\x2d\xab\xbe\x71\x94";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xf9";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_22() {
    // shared secret has x-coordinate with repeating bit-pattern of size 16
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x22\x49\x5c\x68\x84\x93\x7a\x1b\xc0\x58\x71\xe9\xee\x1a\x2c\x43\xf8\xf1\x4d\xb1\x9e\xe6\x0b\xd2\xd8\x9c\x42\x93\x04\x2f\x5a\x94\
\x52\xce\xa2\x7e\x6f\xe5\x74\xa0\x0e\x5f\x15\xfe\x11\xaa\x54\xf5\x4e\xbd\x8b\xde\x3a\xa4\x1c\x80\xbf\x9d\x5f\x7b\x1d\xc6\xef\xec";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xfe\xff";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_23() {
    // shared secret has x-coordinate with repeating bit-pattern of size 30
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xf3\xcb\x67\x54\xb7\xe2\xa8\x6d\x06\x4d\xfb\x9f\x90\x31\x85\xaa\xa4\xc9\x2b\x48\x1c\x2c\x1a\x1f\xf2\x76\x30\x3b\xbc\x41\x83\xe4\
\x9c\x31\x85\x99\xb0\x98\x4c\x35\x63\xdf\x33\x93\x11\xfe\x14\x3a\x7d\x92\x1e\xe7\x5b\x75\x5a\x52\xc6\xf8\x04\xf8\x97\xb8\x09\xf7";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x7f\xff\x00\x01\xff\xfc\x00\x07\xff\xf0\x00\x1f\xff\xc0\x00\x7f\xff\x00\x01\xff\xfc\x00\x07\xff\xf0\x00\x1f\xff\xc0\x00\x7f\xff";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_24() {
    // shared secret has x-coordinate with repeating bit-pattern of size 30
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xa8\xd9\x3b\xeb\xba\xf2\x5f\xa9\xa1\xf9\x8c\x44\xb5\x4d\xbf\x28\x63\x4a\x5f\xd0\x84\x02\xdb\xa5\xd9\xe4\x87\x3f\x81\x23\xda\x1d\
\xb9\x72\xd9\x1a\x0e\xab\xad\xb6\x30\xb2\x71\xe6\x55\x1b\x75\x7d\x96\x93\x01\xbe\xdd\xd1\x1f\x82\xde\xcd\xfb\xe4\xf9\x65\x7f\x50";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x80\x00\xff\xfe\x00\x03\xff\xf8\x00\x0f\xff\xe0\x00\x3f\xff\x80\x00\xff\xfe\x00\x03\xff\xf8\x00\x0f\xff\xe0\x00\x3f\xff\x7f\xfe";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_25() {
    // shared secret has x-coordinate with repeating bit-pattern of size 32
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x8d\x00\x86\xe6\x78\xa0\xfe\x7b\x4a\xd7\xbd\x4f\x94\xa3\x82\x67\xb9\xf9\xf1\xd2\xb8\x24\x52\xdb\x4c\xfb\x33\x55\x95\xc2\x6c\x55\
\xf7\x84\x76\xa0\x0a\x01\x53\x94\x1d\xa0\xb0\xb8\x1c\x83\x46\x82\xed\xc9\xfc\xc8\xbc\x21\xa7\xb5\xba\xcb\x46\x0d\xbb\x56\x6c\x19";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xfe";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_26() {
    // shared secret has x-coordinate with repeating bit-pattern of size 32
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x02\xa9\x68\x34\xfe\x3b\x54\xd4\x40\x00\x35\x21\xf2\x35\x5a\xea\x48\xd0\xbb\xc5\x76\x47\x3f\xec\xc6\x97\x51\x00\xc5\x89\x86\x52\
\x63\x25\x57\x64\x89\x1f\xfc\x10\x8c\xfe\x75\x4a\xf5\x2a\x43\x62\x95\x39\x55\xdd\xfa\xdc\xf7\x52\x63\x7c\x11\xed\xea\xa6\xa8\x07";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xfe\xff\xfd";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_27() {
    // shared secret has x-coordinate with repeating bit-pattern of size 51
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x87\x21\x29\x4f\x9e\xb3\xba\x69\xa1\x3a\xe7\xd9\x33\xfa\x51\xc4\x83\x93\xfe\x1b\x9b\x9b\x17\xa0\x8c\xec\xff\x2e\xe6\xad\x43\x4d\
\x2c\x23\xcd\x11\xd2\x66\x94\xc4\x72\xdd\xa8\xce\xa4\x13\x3b\xbc\x68\xe1\xf2\x34\xbc\x7e\x8b\xff\xce\xa9\x44\x60\x91\x85\x54\x91";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x80\x00\x00\x3f\xff\xff\xf0\x00\x00\x07\xff\xff\xfe\x00\x00\x00\xff\xff\xff\xc0\x00\x00\x1f\xff\xff\xf8\x00\x00\x03\xff\xff\xfc";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_28() {
    // shared secret has x-coordinate with repeating bit-pattern of size 51
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x3e\x99\xec\x3c\x58\xac\x38\x98\x93\x6e\x4a\x61\x18\x2b\x19\x88\x23\xc9\x99\x22\x09\xf6\x7b\xf5\x29\x1a\xa3\x54\xfc\xeb\x2f\x13\
\x12\x95\x25\x18\x63\x6a\xdd\x66\x63\x20\xc8\xb7\xfa\x63\x15\x41\xd0\xca\x50\x79\x6d\xbf\xf0\xc1\xe7\x2f\x94\x71\x87\x76\xbd\x60";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x7f\xff\xff\xe0\x00\x00\x0f\xff\xff\xfc\x00\x00\x01\xff\xff\xff\x80\x00\x00\x3f\xff\xff\xf0\x00\x00\x07\xff\xff\xfd\xff\xff\xfe";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_29() {
    // shared secret has x-coordinate with repeating bit-pattern of size 52
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xe9\x48\x4e\x58\xf3\x33\x1b\x66\xff\xed\x6d\x90\xcb\x1c\x78\x06\x5f\xa2\x8c\xfb\xa5\xc7\xdd\x43\x52\x01\x3d\x32\x52\xee\x42\x77\
\xbd\x75\x03\xb0\x45\xa3\x8b\x4b\x24\x7b\x32\xc5\x95\x93\x58\x0f\x39\xe6\xab\xfa\x37\x6c\x3d\xca\x20\xcf\x7f\x9c\xfb\x65\x9e\x13";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x00\x00\x03\xff\xff\xff\x00\x00\x00\x3f\xff\xff\xf0\x00\x00\x03\xff\xff\xff\x00\x00\x00\x3f\xff\xff\xf0\x00\x00\x03\xff\xff\xff";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_30() {
    // shared secret has x-coordinate with repeating bit-pattern of size 52
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xeb\x6e\xb5\x32\xfe\x4a\xf2\xa5\xa2\x75\xab\x4e\x9f\x72\x8a\xe6\x4e\x9d\xbc\x08\xe9\x35\x90\x91\xd7\x5e\x53\x34\xa6\xe0\x8d\xb6\
\x4c\x14\x63\x39\xc0\x5d\x1d\x57\x82\xeb\xee\xb8\x6d\x3e\xb5\xc6\x3e\x9f\x99\xf1\x71\x87\xc0\x39\x66\x6c\x52\x37\xb7\x36\xe9\xcd";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\xff\xff\xfc\x00\x00\x00\xff\xff\xff\xc0\x00\x00\x0f\xff\xff\xfc\x00\x00\x00\xff\xff\xff\xc0\x00\x00\x0f\xff\xff\xfb\xff\xff\xff";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_31() {
    // shared secret has x-coordinate with repeating bit-pattern of size 60
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x8e\x7b\x50\xf7\xd8\xc4\x4d\x5d\x34\x96\xc4\x31\x41\xa5\x02\xf4\xa4\x3f\x15\x3d\x03\xad\x43\xed\xa8\xe3\x95\x97\xf1\xd4\x77\xb8\
\x64\x7f\x3d\xa6\x79\x69\xb7\xf9\x89\xff\x4a\xdd\xc3\x93\x51\x5a\xf4\x0c\x82\x08\x5c\xe1\xf2\xee\x19\x54\x12\xc6\xf5\x83\x77\x4f";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\xff\xff\x00\x00\x00\x03\xff\xff\xff\xf0\x00\x00\x00\x3f\xff\xff\xff\x00\x00\x00\x03\xff\xff\xff\xf0\x00\x00\x00\x3f\xff\xff\xff";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_32() {
    // shared secret has x-coordinate with repeating bit-pattern of size 60
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x40\xd4\xf4\xf6\xd9\xa4\x1a\xb6\xea\x90\xd4\x66\x10\xb9\x24\xab\x15\xed\x4f\x25\x9f\xd0\x9d\xdd\x41\xa7\x07\x78\x2f\xa9\xe2\x03\
\xa5\x08\x0a\x7e\x11\x8a\x50\xc4\xb3\xd2\xc4\x3d\xcb\xbf\x35\xc3\x9e\x27\x6a\x0a\x50\xb3\x3a\x9f\xfb\xe7\xc9\x09\x50\x55\xfc\x25";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x00\x00\xff\xff\xff\xfc\x00\x00\x00\x0f\xff\xff\xff\xc0\x00\x00\x00\xff\xff\xff\xfc\x00\x00\x00\x0f\xff\xff\xff\xbf\xff\xff\xff";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_33() {
    // shared secret has x-coordinate with repeating bit-pattern of size 62
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xa3\x86\xac\xe5\x73\xf8\x75\x58\xa6\x8e\xad\x2a\x20\x08\x8e\x3f\xe9\x28\xbd\xae\x9e\x10\x94\x46\xf9\x3a\x07\x8c\x15\x74\x1f\x04\
\x21\x26\x1e\x6d\xb2\xbf\x12\x10\x6e\x4c\x6b\xf8\x5b\x95\x81\xb4\xc0\x30\x2a\x52\x62\x22\xf9\x0a\xbc\x5a\x54\x92\x06\xb1\x10\x11";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\xff\x00\x00\x00\x01\xff\xff\xff\xfc\x00\x00\x00\x07\xff\xff\xff\xf0\x00\x00\x00\x1f\xff\xff\xff\xc0\x00\x00\x00\x7f\xff\xff\xff";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_34() {
    // shared secret has x-coordinate with repeating bit-pattern of size 62
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x73\x9b\x5c\x21\x89\x72\x9b\x57\x7b\xa1\xa4\x67\xa1\xa0\x85\x1c\x55\x6b\x86\x0f\x6b\x20\x16\xbc\xd5\x0b\xeb\x22\xee\x9c\x0d\x79\
\x61\xea\x43\xcf\x1e\xa7\xaa\xd1\xa2\x36\x0b\x0f\x37\xa7\x4c\xa5\x32\xdc\x8d\x1a\xf2\x6c\xdf\x89\xa8\x7d\x93\xdc\xaa\x0c\x95\x64";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x00\xff\xff\xff\xfe\x00\x00\x00\x03\xff\xff\xff\xf8\x00\x00\x00\x0f\xff\xff\xff\xe0\x00\x00\x00\x3f\xff\xff\xff\x80\x00\x00\x00";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_35() {
    // shared secret has x-coordinate with repeating bit-pattern of size 64
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x6c\x03\xf0\x55\xf7\x10\xae\xa8\x93\x41\xf0\xef\x7a\x1c\x6d\x5c\x45\xa5\x09\x23\xce\x8a\xdb\x33\xc2\x52\x0f\x78\x81\x54\x77\x48\
\x69\x1f\x4d\xaf\xcf\x6d\x5d\xf8\xd9\xe6\xaf\xda\x66\xca\x81\x71\x8b\xea\x81\x71\xab\xc8\x70\x36\xa9\xc3\x70\x38\x5b\x60\xd9\x69";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xfc";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_36() {
    // shared secret has x-coordinate with repeating bit-pattern of size 64
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x8a\x3f\x60\xcf\xec\x64\x74\x5b\xf6\x25\x69\x6f\x2f\xe4\xb6\xe4\xce\x82\x08\x95\x4f\x4f\xc4\xda\x21\xf8\x7f\x9f\x7a\x2c\x32\x75\
\xb5\x4d\x90\x85\x1b\x39\x70\x75\x86\xdc\x6c\xce\xcc\xc5\xe5\x0a\x1e\x4a\x95\x54\x63\x10\x7d\x1d\x87\xc8\x25\x2d\xf2\x11\x0d\x6d";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_37() {
    // shared secret has x-coordinate with repeating bit-pattern of size 112
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xc8\x27\xfb\x93\x0f\xd5\x1d\x92\x60\x86\x19\x1b\x50\x2a\xf8\x3a\xbb\x5f\x71\x7d\xeb\xc8\xde\x29\x89\x7a\x39\x34\xb2\x57\x1c\xa0\
\x59\x90\xc0\x59\x7b\x0b\x7a\x2e\x42\xfe\xbd\x56\xb1\x32\x35\xd1\xd4\x08\xd7\x6e\xd2\xc9\x3b\x3f\xac\xf5\x14\xd9\x02\xf6\x91\x0a";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_38() {
    // shared secret has x-coordinate with repeating bit-pattern of size 112
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xfc\x85\xbf\xee\x05\x64\x78\xa1\x71\x75\x82\xac\xcd\x11\xed\x49\x00\x98\x91\xcb\xda\x5f\xe4\x0b\x9f\x4c\x17\x42\xe1\x27\xdb\x2c\
\x97\x03\x3f\x5f\x64\x05\xac\xfa\x57\x55\x3f\x1e\x37\x5a\x13\xe8\xd6\xe3\xa1\x15\x19\x58\xc7\x09\xbe\x50\x8e\x0b\xac\x78\x04\xd6";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_39() {
    // shared secret has x-coordinate with repeating bit-pattern of size 128
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x38\xbf\x17\x1c\xdb\xd4\xe2\xe7\x12\x85\x28\xdb\x43\xd8\x06\x55\xb7\x89\xe6\x9e\x6b\xa1\xd3\x6b\x62\xe4\xe5\x9d\x8e\xcf\x4c\x51\
\xbb\xe3\x24\x4e\x4f\xbf\x79\xf2\x45\x12\xf3\x0c\x4a\x60\x53\x14\x74\x9e\x2f\x20\xd8\x58\xec\x96\x10\x60\xa2\xca\xb4\x67\x01\x3f";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xfd";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_40() {
    // shared secret has x-coordinate with repeating bit-pattern of size 128
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x24\x9f\x4f\x51\x7d\x77\x88\xd4\x62\x2d\x76\x2c\x43\x12\x10\x1f\xba\x71\xfe\x26\x57\xf1\xf2\xc3\x3c\x06\x13\xd2\xe2\x18\x90\xb7\
\x78\xf3\x2d\xa1\xb6\x1e\xd9\x38\x5c\xd5\x2f\x5e\x71\x03\xf7\x7b\x01\xb4\x03\xfb\x65\x37\xa0\xc0\xe8\x66\x19\x5d\x0a\x44\x8f\x34";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x7f\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_41() {
    // shared secret has an x-coordinate of approx p//3
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xe9\xc0\xaf\x0b\xf6\xda\xdd\x8f\xbe\x04\xc5\xcf\x3f\xce\x80\x68\x3a\x9c\x26\x7b\x0d\xc9\x85\x0c\xbc\x1b\xcd\xfe\xb7\x44\xc3\x51\
\x6e\xfe\x87\x82\x23\xdd\x9d\xd9\x24\xe8\x3e\x3a\xb2\x2c\x9b\xf3\x04\x12\x9a\xb5\x9c\x1f\x3d\x30\xfb\x58\xb8\x77\x0b\xf9\xd9\xbf";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x55\x55\x55\x55\x00\x00\x00\x00\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xab";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_42() {
    // shared secret has an x-coordinate of approx p//5
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x2b\x29\xf4\x82\xbc\x43\x55\x9f\x70\x44\x75\x84\x91\x9d\xf1\xe0\x37\x06\xee\x63\xc9\x87\xb6\xf7\x49\x9a\xe2\x9a\xb0\x1c\xa8\x28\
\xa4\xbd\x05\xd6\x1f\x59\x6e\x01\x62\x3a\x8e\x20\x76\xc0\x13\x88\x9f\xbb\x0f\x99\x37\xe4\x75\xa0\x0d\xdd\x75\xe6\xa9\x92\xe7\x76";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x33\x33\x33\x33\x00\x00\x00\x00\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x66\x66\x66\x66\x66\x66\x66\x66\x66\x66\x66\x66";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_43() {
    // shared secret has an x-coordinate of approx p//7
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x27\x66\xdc\x8e\x28\x9f\xd2\x76\x25\xd4\x76\x5e\xb0\x14\xaa\x54\xa4\x4a\x7d\x57\x24\x05\x0b\x94\x46\xe3\x63\x07\x1c\x26\x09\x13\
\xaf\xf9\xf1\xdc\x5e\x71\xb6\x66\x50\x1b\x24\xd7\x08\x05\xcb\x8e\x1a\x01\xee\x90\xca\x84\xcb\x0c\x6f\x7e\xa4\x53\xdf\x85\xf5\x20";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x24\x92\x49\x24\x6d\xb6\xdb\x6d\xdb\x6d\xb6\xdb\x6d\xb6\xdb\x6d\xb6\xdb\x6d\xb7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_44() {
    // shared secret has an x-coordinate of approx p//9
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\xd3\x33\x14\xf1\x3a\x7f\xe8\x35\x7b\xfd\x7a\x11\x79\x94\x98\xe5\x5b\xc7\x82\xc6\xf4\x34\x85\x6d\x73\x3b\x66\x8e\x1d\x05\x44\x83\
\x48\xdc\x5a\xae\x3f\x64\x31\xdd\x20\xc0\x18\xf5\x4b\x1d\x65\xfd\x18\x64\xdd\xfe\xea\x04\xad\x75\x33\x97\x12\x37\xc6\x0a\xc0\xc7";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x1c\x71\xc7\x1c\x55\x55\x55\x55\x71\xc7\x1c\x71\xc7\x1c\x71\xc7\x1c\x71\xc7\x1c\x8e\x38\xe3\x8e\x38\xe3\x8e\x38\xe3\x8e\x38\xe4";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_45() {
    // y-coordinate of the public key is small
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x3c\xbc\x1b\x31\xb4\x3f\x17\xdc\x20\x0d\xd7\x0c\x29\x44\xc0\x4c\x6c\xb1\xb0\x82\x82\x0c\x23\x4a\x30\x0b\x05\xb7\x76\x38\x44\xc7\
\x4f\xde\x0a\x4e\xf9\x38\x87\x46\x97\x93\x27\x0e\xb2\xff\x14\x82\x87\xda\x92\x65\xb0\x33\x4f\x9e\x26\x09\xaa\xc1\x6e\x8a\xd5\x03";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\xcf\x22\x30\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_46() {
    // y-coordinate of the public key is small
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x28\x30\xd9\x64\x89\xae\x24\xb7\x9c\xad\x42\x50\x56\xe8\x27\x46\xf9\xe3\xf4\x19\xab\x9a\xa2\x1c\xa1\xfb\xb1\x1c\x73\x25\xe7\xd3\
\x18\xab\xe6\x6f\x57\x5e\xe8\xa2\xf1\xc4\xa8\x0e\x35\x26\x0a\xe8\x2a\xd7\xd6\xf6\x61\xd1\x5f\x06\x96\x79\x30\xa5\x85\x09\x7e\xf7";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x11\x24\xf4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_47() {
    // y-coordinate of the public key is small
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x45\x0b\x6b\x6e\x20\x97\x17\x8e\x9d\x28\x50\x10\x95\x18\xd2\x8e\xb3\xb6\xde\xd2\x92\x2a\x54\x52\x00\x3b\xc2\xe4\xa4\xec\x77\x5c\
\x89\x4e\x90\xf0\xdf\x1b\x0e\x6c\xad\xb0\x3b\x9d\xe2\x4f\x6a\x22\xd1\xbd\x0a\x4a\x58\xcd\x64\x5c\x27\x3c\xae\x1c\x61\x9b\xfd\x61";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xea\x77\xd4\x49\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_48() {
    // y-coordinate of the public key is small
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\xcf\x22\x30\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\x00\x00\x00\x01\xc7\xc3\x06\x43\xab\xed\x0a\xf0\xa4\x9f\xe3\x52\xcb\x48\x3f\xf9\xb9\x7d\xcc\xdf\x42\x7c\x65\x8e\x87\x93\x24\x0d";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\x6f\xd2\x66\x61\x85\x1a\x8d\xe3\xc6\xd0\x6f\x83\x4e\xf3\xac\xb8\xf2\xa5\xf9\xc1\x36\xa9\x85\xff\xe1\x0d\x5e\xeb\x51\xed\xcf\xa3";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_49() {
    // y-coordinate of the public key is small
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x11\x24\xf4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x0d\x12\xd3\x81\xb0\x76\x0b\x1c\x50\xbe\x8a\xcf\x85\x93\x85\x05\x2c\x7f\x53\xcd\xe6\x7c\xe1\x37\x59\xde\x31\x23\xa0";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\xf1\xf0\xe4\x3b\x37\x4f\xeb\x7e\x7f\x96\xd4\xff\xe7\x51\x9f\xa8\xbb\x6c\x3c\xfd\x25\xf6\xf8\x7d\xab\x26\x23\xd2\xa2\xd3\x38\x51";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_50() {
    // y-coordinate of the public key is small
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xea\x77\xd4\x49\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\x00\x00\x00\x00\x7a\xfb\xc0\xb3\x25\xe8\x20\x64\x6d\xec\x62\x2f\xb5\x58\xa5\x1c\x34\x2a\xa2\x57\xf4\xb6\xa8\xec\x5d\xdf\x14\x4f";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\x1b\x08\x52\x13\xa9\xc8\x9d\x35\x3e\x11\x11\xaf\x07\x8c\x38\xc5\x02\xb7\xb4\x77\x1e\xfb\xa5\x1f\x58\x9b\x5b\xe2\x43\x41\x7b\xdc";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_51() {
    // y-coordinate of the public key is large
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x3c\xbc\x1b\x31\xb4\x3f\x17\xdc\x20\x0d\xd7\x0c\x29\x44\xc0\x4c\x6c\xb1\xb0\x82\x82\x0c\x23\x4a\x30\x0b\x05\xb7\x76\x38\x44\xc7\
\xb0\x21\xf5\xb0\x06\xc7\x78\xba\x68\x6c\xd8\xf1\x4d\x00\xeb\x7d\x78\x25\x6d\x9b\x4f\xcc\xb0\x61\xd9\xf6\x55\x3e\x91\x75\x2a\xfc";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\xcf\x22\x30\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_52() {
    // y-coordinate of the public key is large
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x28\x30\xd9\x64\x89\xae\x24\xb7\x9c\xad\x42\x50\x56\xe8\x27\x46\xf9\xe3\xf4\x19\xab\x9a\xa2\x1c\xa1\xfb\xb1\x1c\x73\x25\xe7\xd3\
\xe7\x54\x19\x8f\xa8\xa1\x17\x5e\x0e\x3b\x57\xf1\xca\xd9\xf5\x17\xd5\x28\x29\x0a\x9e\x2e\xa0\xf9\x69\x86\xcf\x5a\x7a\xf6\x81\x08";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x11\x24\xf4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_53() {
    // y-coordinate of the public key is large
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x45\x0b\x6b\x6e\x20\x97\x17\x8e\x9d\x28\x50\x10\x95\x18\xd2\x8e\xb3\xb6\xde\xd2\x92\x2a\x54\x52\x00\x3b\xc2\xe4\xa4\xec\x77\x5c\
\x76\xb1\x6f\x0e\x20\xe4\xf1\x94\x52\x4f\xc4\x62\x1d\xb0\x95\xdd\x2e\x42\xf5\xb6\xa7\x32\x9b\xa3\xd8\xc3\x51\xe3\x9e\x64\x02\x9e";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xea\x77\xd4\x49\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_54() {
    // y-coordinate of the public key is large
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xee\xcf\x22\x30\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xfd\x38\x3c\xf9\xbd\x54\x12\xf5\x0f\x5b\x60\x1c\xad\x34\xb7\xc0\x07\x46\x82\x33\x20\xbd\x83\x9a\x71\x78\x6c\xdb\xf2";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\x6f\xd2\x66\x61\x85\x1a\x8d\xe3\xc6\xd0\x6f\x83\x4e\xf3\xac\xb8\xf2\xa5\xf9\xc1\x36\xa9\x85\xff\xe1\x0d\x5e\xeb\x51\xed\xcf\xa3";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_55() {
    // y-coordinate of the public key is large
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x11\x24\xf4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\xff\xff\xff\xf1\xed\x2c\x7e\x50\x89\xf4\xe3\xaf\x41\x75\x30\x7a\x6c\x7a\xfa\xd4\x80\xac\x32\x19\x83\x1e\xc8\xa6\x21\xce\xdc\x5f";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\xf1\xf0\xe4\x3b\x37\x4f\xeb\x7e\x7f\x96\xd4\xff\xe7\x51\x9f\xa8\xbb\x6c\x3c\xfd\x25\xf6\xf8\x7d\xab\x26\x23\xd2\xa2\xd3\x38\x51";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_56() {
    // y-coordinate of the public key is large
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xea\x77\xd4\x49\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xfe\x85\x04\x3f\x4d\xda\x17\xdf\x9b\x92\x13\x9d\xd0\x4a\xa7\x5a\xe4\xcb\xd5\x5d\xa8\x0b\x49\x57\x13\xa2\x20\xeb\xb0";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\x1b\x08\x52\x13\xa9\xc8\x9d\x35\x3e\x11\x11\xaf\x07\x8c\x38\xc5\x02\xb7\xb4\x77\x1e\xfb\xa5\x1f\x58\x9b\x5b\xe2\x43\x41\x7b\xdc";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_57() {
    // y-coordinate of the public key has many trailing 1's
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x9a\x0f\x0e\x3d\xd3\x14\x17\xbb\xd9\xe2\x98\xbc\x06\x8a\xb6\xd5\xc3\x67\x33\xaf\x26\xed\x67\x67\x6f\x41\x0c\x80\x4b\x8b\x2c\xa1\
\xb0\x2c\x82\xf3\xa6\x1a\x37\x6d\xb7\x95\x62\x6e\x94\x00\x55\x71\x12\x27\x3a\x36\xcd\xdb\x08\xca\xaa\x43\x95\x39\x65\x45\x47\x30";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xca\x08\x90\x11\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_58() {
    // y-coordinate of the public key has many trailing 1's
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x8e\x5d\x22\xd5\xe5\x3e\xc7\x97\xc5\x5e\xcd\x68\xa0\x8a\x7c\x33\x61\xcd\x99\xca\x7f\xad\x1a\x68\xea\x80\x2a\x6a\x4c\xb5\x8a\x91\
\x8e\xa7\xa0\x70\x23\xef\x67\x67\x70\x24\xbd\x38\x41\xe1\x87\xc6\x4b\x30\xa3\x0a\x37\x50\xeb\x2e\xe8\x73\xfb\xe5\x8f\xa1\x35\x7b";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x6b\xd1\xe5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_59() {
    // y-coordinate of the public key has many trailing 1's
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x29\x3a\xa3\x49\xb9\x34\xab\x2c\x83\x9c\xf5\x4b\x8a\x73\x7d\xf2\x30\x4e\xf9\xb2\x0f\xa4\x94\xe3\x1a\xd6\x2b\x31\x5d\xd6\xa5\x3c\
\x11\x81\x82\xb8\x5e\xf4\x66\xeb\x9a\x8e\x87\xf9\x66\x1f\x7d\x01\x79\x84\xc1\x5e\xa8\x20\x43\xf5\x36\xd1\xee\x6a\x6d\x95\xb5\x09";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x09\x9f\x55\xd5\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_60() {
    // y-coordinate of the public key has many trailing 1's
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xca\x08\x90\x11\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\x26\x7b\xfd\xf8\xa6\x11\x48\xde\xcd\x80\x28\x37\x32\xdd\x4c\x10\x95\xe4\xbb\x40\xb9\x65\x84\x08\x20\x8d\xc1\x14\x7f\xff\xff\xff";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\x44\x23\x6c\x8b\x95\x05\xa1\x9d\x48\x77\x4a\x39\x03\xc0\x29\x27\x59\xb0\xf8\x26\xe6\xac\x09\x2f\xf8\x98\xd8\x7e\x53\xd3\x53\xfc";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_61() {
    // y-coordinate of the public key has many trailing 1's
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x6b\xd1\xe5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x40\x96\xed\xd6\x87\x1c\x32\x0c\xb8\xa9\xf4\x53\x17\x51\x10\x5c\x97\xb4\xc2\x57\x81\x1b\xbc\x32\x96\x3e\xaf\x39\xff\xff\xff\xff";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\x3e\xbb\xac\xe1\x09\x8a\x81\x94\x9d\x56\x05\xdd\x94\xa7\xaa\x88\xdc\x39\x6c\x2c\x23\xe0\x1a\x9c\x8c\xca\x5b\xb0\x7b\xfb\xb6\xa1";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_62() {
    // y-coordinate of the public key has many trailing 1's
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x09\x9f\x55\xd5\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\x15\x2c\x1a\x22\xd8\x23\xa2\x78\x55\xed\x03\xf8\xe2\xab\x50\x38\xbb\x1d\xf4\xd8\x7e\x43\x86\x5f\x2d\xaf\x69\x48\xff\xff\xff\xff";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\x67\xcb\x63\x56\x6c\x7c\xeb\x12\xfd\xd8\x5c\xe9\xd2\xf7\x7c\x35\x92\x42\xbb\xaa\x0e\xa1\xbf\x3c\xf5\x10\xa4\xa2\x65\x91\xd1\xf1";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_63() {
    // y-coordinate of the public key has many trailing 0's
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x9a\x0f\x0e\x3d\xd3\x14\x17\xbb\xd9\xe2\x98\xbc\x06\x8a\xb6\xd5\xc3\x67\x33\xaf\x26\xed\x67\x67\x6f\x41\x0c\x80\x4b\x8b\x2c\xa1\
\x4f\xd3\x7d\x0b\x59\xe5\xc8\x93\x48\x6a\x9d\x91\x6b\xff\xaa\x8e\xed\xd8\xc5\xca\x32\x24\xf7\x35\x55\xbc\x6a\xc6\x9a\xba\xb8\xcf";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xca\x08\x90\x11\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_64() {
    // y-coordinate of the public key has many trailing 0's
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x8e\x5d\x22\xd5\xe5\x3e\xc7\x97\xc5\x5e\xcd\x68\xa0\x8a\x7c\x33\x61\xcd\x99\xca\x7f\xad\x1a\x68\xea\x80\x2a\x6a\x4c\xb5\x8a\x91\
\x71\x58\x5f\x8e\xdc\x10\x98\x99\x8f\xdb\x42\xc7\xbe\x1e\x78\x39\xb4\xcf\x5c\xf6\xc8\xaf\x14\xd1\x17\x8c\x04\x1a\x70\x5e\xca\x84";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x6b\xd1\xe5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_65() {
    // y-coordinate of the public key has many trailing 0's
    // flags: EdgeCaseSharedSecret
    // expect: valid
    let public = b"\x04\
\x29\x3a\xa3\x49\xb9\x34\xab\x2c\x83\x9c\xf5\x4b\x8a\x73\x7d\xf2\x30\x4e\xf9\xb2\x0f\xa4\x94\xe3\x1a\xd6\x2b\x31\x5d\xd6\xa5\x3c\
\xee\x7e\x7d\x46\xa1\x0b\x99\x15\x65\x71\x78\x06\x99\xe0\x82\xfe\x86\x7b\x3e\xa2\x57\xdf\xbc\x0a\xc9\x2e\x11\x95\x92\x6a\x4a\xf6";
    let private = b"\x0a\x0d\x62\x2a\x47\xe4\x8f\x6b\xc1\x03\x8a\xce\x43\x8c\x6f\x52\x8a\xa0\x0a\xd2\xbd\x1d\xa5\xf1\x3e\xe4\x6b\xf5\xf6\x33\xd7\x1a";
    let shared = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x09\x9f\x55\xd5\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_66() {
    // y-coordinate of the public key has many trailing 0's
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xca\x08\x90\x11\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xd9\x84\x02\x06\x59\xee\xb7\x22\x32\x7f\xd7\xc8\xcd\x22\xb3\xef\x6a\x1b\x44\xc0\x46\x9a\x7b\xf7\xdf\x72\x3e\xeb\x80\x00\x00\x00";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\x44\x23\x6c\x8b\x95\x05\xa1\x9d\x48\x77\x4a\x39\x03\xc0\x29\x27\x59\xb0\xf8\x26\xe6\xac\x09\x2f\xf8\x98\xd8\x7e\x53\xd3\x53\xfc";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_67() {
    // y-coordinate of the public key has many trailing 0's
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x6b\xd1\xe5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\xbf\x69\x12\x28\x78\xe3\xcd\xf4\x47\x56\x0b\xac\xe8\xae\xef\xa3\x68\x4b\x3d\xa9\x7e\xe4\x43\xcd\x69\xc1\x50\xc6\x00\x00\x00\x00";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\x3e\xbb\xac\xe1\x09\x8a\x81\x94\x9d\x56\x05\xdd\x94\xa7\xaa\x88\xdc\x39\x6c\x2c\x23\xe0\x1a\x9c\x8c\xca\x5b\xb0\x7b\xfb\xb6\xa1";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_68() {
    // y-coordinate of the public key has many trailing 0's
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x09\x9f\x55\xd5\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\
\xea\xd3\xe5\xdc\x27\xdc\x5d\x88\xaa\x12\xfc\x07\x1d\x54\xaf\xc7\x44\xe2\x0b\x28\x81\xbc\x79\xa0\xd2\x50\x96\xb7\x00\x00\x00\x00";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\x67\xcb\x63\x56\x6c\x7c\xeb\x12\xfd\xd8\x5c\xe9\xd2\xf7\x7c\x35\x92\x42\xbb\xaa\x0e\xa1\xbf\x3c\xf5\x10\xa4\xa2\x65\x91\xd1\xf1";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_69() {
    // ephemeral key has x-coordinate that satisfies x**2 = 0
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x66\x48\x5c\x78\x0e\x2f\x83\xd7\x24\x33\xbd\x5d\x84\xa0\x6b\xb6\x54\x1c\x2a\xf3\x1d\xae\x87\x17\x28\xbf\x85\x6a\x17\x4f\x93\xf4";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\xcf\xe4\x07\x7c\x87\x30\xb1\xc9\x38\x45\x81\xd3\x6b\xff\x55\x42\xbc\x41\x7c\x9e\xff\x5c\x2a\xfc\xb9\x8c\xc8\x82\x9b\x2c\xe8\x48";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_70() {
    // ephemeral key has x-coordinate p-3
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfc\
\x19\x71\x9b\xeb\xf6\xae\xa1\x3f\x25\xc9\x6d\xfd\x7c\x71\xf5\x22\x5d\x4c\x8f\xc0\x9e\xb5\xa0\xab\x9f\x39\xe9\x17\x8e\x55\xc1\x21";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\x4c\x25\x70\x2d\x10\xcd\x12\xec\x7e\x77\xc4\xf1\x97\x92\x37\x97\x6d\x6a\xa8\x09\xc6\x45\xd7\x5a\x59\xd3\x99\xa5\x23\x77\xeb\x7b";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_71() {
    // ephemeral key has x-coordinate 2**16 + 0
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\
\x73\xca\x30\x64\x1a\xca\xbe\x58\x11\x70\xb4\xd5\x25\x3f\x7a\x34\x2b\x03\x9a\x87\xab\x24\x47\xba\xda\xd0\x8e\xce\x2c\xf1\x9f\x52";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\x4c\xfd\x63\x9f\xd8\x0c\x84\xb9\x35\xc3\x3c\xfa\xac\xce\xeb\x25\x6b\x2f\x7e\x27\x3c\x3a\xe5\xf0\xff\x92\xb7\x49\x57\x37\x6f\x22";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_72() {
    // ephemeral key has x-coordinate 2**32 + 0
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\
\x32\x8b\xbc\x85\x09\x9a\xcc\x76\x85\xcf\x4b\xb5\xe1\x8d\x72\xc5\x72\x71\x61\x5c\xcd\x46\x37\x7b\xfa\xcb\x0e\x85\x01\xaa\x76\xfb";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\x58\x1b\xb2\xea\x63\x3a\xf1\xe5\x9b\x15\xc1\x34\x2d\x5e\x14\xad\xb5\x8f\x61\x3a\x23\x11\x49\xf7\xdf\x7a\x69\xc0\xec\xa9\x5b\x2c";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_73() {
    // ephemeral key has x-coordinate 2**64 + 0
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\
\x10\x04\x8b\x68\x76\x75\xaf\x98\x15\x29\x7d\x73\xa7\xf2\x5b\x1a\x3c\x42\xd3\x3c\x64\xb4\x66\x99\x1a\x75\x73\xb4\x95\x4a\xa0\xb0";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\x99\x20\x47\x3d\xe5\x8a\x31\x9e\xbd\x87\xd5\x7f\x4f\x6c\x09\x09\x3c\x5e\x00\x72\xc0\x1b\xc8\xdf\x0d\xc6\x0b\x8a\x7a\x68\x4c\x6f";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_74() {
    // ephemeral key has x-coordinate 2**96 + 0
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x7d\x12\xde\x58\xd5\x44\x23\xeb\x85\xae\x8d\x15\x7a\xe4\x16\xfb\x00\x4a\x7e\xb5\x22\xac\x1b\x67\x04\x7e\xf3\xcd\xf9\xac\xdc\x3f";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\xd9\xcd\x0d\x10\xed\x4d\x3d\xc0\x1f\x42\x16\xd2\x29\xe2\x1c\x6a\x44\x72\x27\xa5\xbc\x25\x92\xc3\x59\xb2\xd6\x89\xa2\xde\xe3\xa8";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_75() {
    // ephemeral key has x-coordinate that satisfies x**2 = -3
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x65\x22\xae\xd9\xea\x48\xf2\x62\x3b\x8e\xea\xe3\xe2\x13\xb9\x9d\xa3\x2e\x74\xc9\x42\x18\x35\x80\x4d\x37\x4c\xe2\x8f\xcc\xa6\x62\
\x2c\x7f\xda\x3c\x84\xb7\x04\xf2\x7f\xfc\x0b\x2a\xb3\x50\xd8\xcb\xc3\x3a\x34\xdf\x0c\x81\x11\x55\xed\x43\x89\xd2\x71\x0e\x3f\xa9";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\xaf\x8b\xc6\x12\x85\x31\x97\xa6\xee\x8b\x4a\xf7\x30\x0c\x0b\xc6\x23\xf0\xcf\x4e\x4b\x30\x1f\x47\xd6\x6c\x27\xe8\xec\xce\x92\x68";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_76() {
    // ephemeral key has x-coordinate that satisfies x**2 = 2
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x50\x74\x42\x00\x73\x22\xaa\x89\x53\x40\xcb\xa4\xab\xc2\xd7\x30\xbf\xd0\xb1\x6c\x2c\x79\xa4\x68\x15\xf8\x78\x0d\x2c\x55\xa2\xdd\
\x46\x19\xd6\x9f\x99\x40\xf5\x16\x63\xaa\x12\x38\x1b\xc7\xcf\x67\x8b\xd1\xa7\x2a\x49\xfb\xc1\x1b\x0b\x69\xcb\x22\xd1\xaf\x9f\x2d";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\x4e\x17\x3a\x80\x90\x7f\x36\x1f\xe5\xa5\xd3\x35\xba\x76\x85\xd5\xeb\xa9\x3e\x9d\xfc\x8d\x8f\xcd\xb1\xdc\xd2\xd2\xbd\xe2\x75\x07";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_77() {
    // ephemeral key has x-coordinate that satisfies x**2 = 5
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x08\x5e\xc5\xa4\xaf\x40\x17\x6b\x63\x18\x90\x69\xae\xff\xcb\x22\x9c\x96\xd3\xe0\x46\xe0\x28\x3e\xd2\xf9\xda\xc2\x1b\x15\xad\x3c\
\x78\x59\xf9\x7c\xb6\xe2\x03\xf4\x6b\xf3\x43\x8f\x61\x28\x23\x25\xe9\x4e\x68\x1b\x60\xb5\x66\x97\x88\xae\xb0\x65\x5b\xf1\x9d\x38";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\xd8\x74\xb5\x56\x78\xd0\xa0\x4d\x21\x6c\x31\xb0\x2f\x3a\xd1\xf3\x0c\x92\xca\xaf\x16\x8f\x34\xe3\xa7\x43\x35\x6d\x92\x76\xe9\x93";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_78() {
    // ephemeral key has x-coordinate that satisfies x**2 = 7
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x19\x0c\x25\xf8\x8a\xd9\xae\x3a\x09\x8e\x6c\xff\xe6\xfd\x0b\x1b\xea\x42\x11\x4e\xb0\xce\xdd\x58\x68\xa4\x5c\x5f\xe2\x77\xdf\xf3\
\x21\xb8\x34\x2e\xf0\x77\xbc\x67\x24\x11\x24\x03\xea\xee\x5a\x15\xb4\xc3\x1a\x71\x58\x9f\x02\xde\xd0\x9c\xd9\x9c\xc5\xdb\x9c\x83";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\x11\xa8\x58\x20\x57\x46\x3f\xc7\x6f\xda\x3a\xb8\x08\x7e\xb0\xa4\x20\xb0\xd6\x01\xbb\x31\x34\x16\x5a\x36\x96\x46\x93\x1e\x52\xa6";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_79() {
    // ephemeral key has x-coordinate that satisfies x**2 = 8
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x5f\x17\x7b\xfe\x19\xba\xaa\xee\x59\x7e\x68\xb6\xa8\x7a\x51\x9e\x80\x5e\x9d\x28\xa7\x0c\xb7\x2f\xd4\x0f\x0f\xe5\xa7\x54\xba\x45\
\x62\xca\x11\x03\xf7\x0a\x20\x06\xcd\x1f\x67\xf5\xf6\xa3\x58\x0b\x29\xdc\x44\x6a\xbc\x90\xe0\xe9\x10\xc1\xe0\x5a\x9a\xa7\x88\xcd";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\x73\x22\x04\x71\xec\x8b\xad\x99\xa2\x97\xdb\x48\x8a\x34\xa2\x59\xf9\xbc\x89\x1f\xfa\xf0\x99\x22\xe6\xb5\x00\x1f\x5d\xf6\x70\x18";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_80() {
    // ephemeral key has x-coordinate that satisfies x**2 = 2**96 + 2
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x34\x76\xa8\xfa\x9c\x74\x48\x12\x4a\xa9\x45\xa2\xe1\x10\x3e\xb9\x1f\x95\xc7\xb4\xd9\x1a\xaa\x1c\x35\xb8\x96\x51\x91\xfc\x0f\xe0\
\x4d\xda\xc1\x38\x68\x8d\xf5\x12\x3f\xa5\x76\x0d\x67\x02\x47\x89\x3f\x9a\xd5\xca\xd5\xe8\x88\x95\xa0\xae\x7f\xdf\x97\xb8\xf4\x12";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\xf4\xe5\xf1\x75\x7c\x8a\x03\xa3\xae\xc5\x7b\x59\x8b\x66\xa9\x3b\xb3\x56\xa6\x91\x7e\x26\xb6\x04\x89\xc0\xd0\x62\x36\xac\x6a\x37";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_81() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 2
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x54\
\x0a\x46\x71\x27\x90\xe6\x3f\x98\x1f\x01\x03\xb2\xa6\x09\xfa\x69\x1c\x52\x91\xa1\x79\x74\xeb\x0c\x3b\x51\x8f\xaa\xc2\x15\x35\xd6";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\xbe\x03\x3e\x3d\xb6\x21\x6d\x3b\x3f\x9d\x66\xc9\x6c\xa3\xb2\x44\x75\x81\x3b\xa8\xeb\x78\x20\xd7\xd6\xff\x29\xc7\x2f\xd3\x9c\x64";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_82() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 2
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xa9\
\x38\x91\x42\xd4\x67\x6c\xee\x23\x32\xeb\x89\x09\xfa\x13\xf9\x5f\x20\xcd\xb3\xac\xc8\x31\xa2\x31\x80\x2a\x48\x58\xa9\x73\xca\x63";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\xa0\xda\x0b\x18\x4f\x59\xab\x0f\xdc\x0a\x6b\x03\x15\x7c\x1b\x75\x26\x9b\x28\x46\x08\xb7\x4a\x6e\x82\x6f\x77\x10\x4c\x42\xa9\xbd";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_83() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 4
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\
\x11\x48\x92\x12\xaf\xf7\x9c\xbe\xd5\xb6\x44\x01\x61\xd5\x7c\x98\xa3\x4e\x6b\x80\xec\x38\x54\xc3\xb2\x85\x5a\xf3\x5f\x0d\x17\xe1";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\xac\x03\x52\x7f\x79\xd8\x01\x08\x1d\xa4\xc0\xad\xcb\xba\x92\xe9\x83\xed\x46\x25\x43\x54\xfd\x98\xe2\x3a\xb6\x59\xee\x02\xa6\xcd";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_84() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 4
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\
\x75\x55\x24\x86\xfd\x8e\x6b\xc4\x24\x49\x22\x04\x20\x7f\xec\xe5\x9d\x93\xfb\x12\x43\x90\x49\x7f\x84\x1d\x9c\x80\x8c\x8c\xc3\xec";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\x0d\x27\x59\xda\xe5\x7c\x90\x6a\x8c\xca\x85\x41\xa5\x6f\x42\x9a\x6f\xfe\xdf\x02\x82\x12\xf7\xf0\xad\x06\xb6\x96\xee\x65\x5c\xaf";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_85() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 8
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\
\x03\x42\x5b\xa0\xd8\xa0\x18\xb4\x28\x61\xe8\x16\xc7\x9a\x17\xd3\xb4\x7d\xf8\xf5\xf7\x10\x7c\x18\x11\x68\xe9\xed\xc6\x2c\xb3\xcf";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\xff\x6e\x93\x0d\x08\x29\x07\x69\xef\x98\x2b\xc5\x68\xb0\xb4\x5f\x88\xb7\xd5\x21\x9b\x00\x66\x78\x20\x79\x3b\x3e\x82\x4c\x16\x15";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_86() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 8
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\
\x17\xb4\x1b\xf7\x2c\x9f\x5e\xc2\x04\xdb\xa0\xde\xb5\xdf\xaa\x43\xb7\x93\xa8\x3b\x24\x30\x60\xd0\x37\x5b\x96\x9e\x04\x16\xbd\x56";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\xbd\x10\x6c\x43\xe4\x52\x72\x09\x15\x53\xf4\x76\xe0\x15\xfb\xb0\x98\x27\x64\xc0\x18\xd5\xf0\x66\x68\x34\xae\x0d\xc5\xdc\xa1\x31";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_87() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 16
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xf9\
\x18\x46\x11\x38\xbc\xa4\x61\xc0\x0f\xc4\x74\xda\x0e\x4e\x35\x30\x9b\xe5\x20\xe2\xe1\x09\xe1\x7a\x1c\xec\xb8\x92\xb9\x65\x98\xf6";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\xb6\x61\xd2\xbf\x35\xef\xdd\x26\x4f\x32\xa3\xbb\x25\x4c\xd6\x44\x3e\x81\x15\xa2\x97\xab\xa1\xd3\x16\x10\x49\x5d\x7c\x56\x0d\xd5";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_88() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 16
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xff\x00\xfe\xff\
\x2d\x6c\x62\xa4\x78\x83\xc5\x89\x9c\xac\x06\xb1\x36\x7c\x21\x94\x86\x89\xd5\x22\x67\x4a\x60\xf4\x3f\x4b\x80\x8a\xdf\x61\x8b\x0b";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\xe8\x18\xea\x3c\x65\xc2\x43\x30\xb7\xb8\x89\x46\x80\xfe\x34\x9b\x17\xf4\x50\xe9\xd8\x78\x29\x2f\x13\x90\xea\xd7\x80\x85\xed\x1f";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_89() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 30
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x7f\xff\x00\x01\xff\xfc\x00\x07\xff\xf0\x00\x1f\xff\xc0\x00\x7f\xff\x00\x01\xff\xfc\x00\x07\xff\xf0\x00\x1f\xff\xc0\x00\x7f\xff\
\x2e\x22\x13\xca\xf0\x30\x33\xe0\xfd\x0f\x79\x51\x15\x4f\x6e\x6c\x3a\x92\x44\xa7\x2f\xac\xa6\x5e\x9c\xe9\xee\xb5\xc8\xe1\xce\xa9";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\x55\xd0\xa2\x03\xe2\x2f\xfb\x52\x3c\x8d\x27\x05\x06\x0c\xee\x9d\x28\x30\x8b\x51\xf1\x84\xbe\xef\xc5\x18\xcf\xf6\x90\xba\xd3\x46";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_90() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 30
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x80\x00\xff\xfe\x00\x03\xff\xf8\x00\x0f\xff\xe0\x00\x3f\xff\x80\x00\xff\xfe\x00\x03\xff\xf8\x00\x0f\xff\xe0\x00\x3f\xff\x7f\xfe\
\x1d\x3b\x68\x4a\x87\x95\x81\x43\xf2\x50\xbf\x5a\x2f\x78\x59\xfd\x03\x66\x20\xb4\xdc\x18\xda\xcd\x1d\x0c\x8c\x42\xee\xb2\xe5\x4a";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\x50\xaf\x11\xf1\x0d\x13\x0d\xf5\xf9\xad\xcd\xd0\x10\x3f\xf3\xd4\x28\x08\x58\x24\x87\x33\x09\x32\xc2\x54\x60\x22\xbf\x7c\x6a\x18";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_91() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 32
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xfe\
\x7c\xcb\x5c\x10\xc0\x28\xf3\x31\x23\x0d\xd0\xa0\x05\xe9\xfa\xf3\x78\x64\xc1\x98\xc5\xbf\x7d\x91\xbd\xd7\x16\x24\x52\x0d\x4b\x04";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\xec\x90\x22\x4e\xe6\x1b\x2e\xd7\xcb\x6b\x97\x16\xe2\x48\xaa\x09\x9d\xbf\x1e\xae\x41\xd1\xca\x47\x7e\x8e\x5b\xa4\xa5\x12\x91\x3e";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_92() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 32
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\xff\xfe\xff\xfd\
\x62\x0b\xbe\x0a\x62\x17\x48\xea\x2b\x0e\x0d\xfa\x46\x31\x69\xe7\xc8\x05\x41\x2f\x43\x74\xdc\x97\x55\xc4\xdb\x93\x98\x9a\x75\x29";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\xcf\x1a\xcf\xa0\x59\x52\x65\x62\x3f\xbf\xee\x5d\x84\x98\xe6\x09\xb6\x59\x07\x60\xd1\xb0\x4f\x31\xf3\x47\x0c\xd1\xaf\x3b\xa9\xdd";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_93() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 51
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x80\x00\x00\x3f\xff\xff\xf0\x00\x00\x07\xff\xff\xfe\x00\x00\x00\xff\xff\xff\xc0\x00\x00\x1f\xff\xff\xf8\x00\x00\x03\xff\xff\xfc\
\x0c\x35\x27\xbd\x08\x1c\x1c\x07\xb3\x13\xbc\x1a\x0c\x3f\x84\x5f\xb2\xfe\x22\x55\x76\x99\xcc\xc8\xf1\x35\x4e\x61\xa2\x7b\x7f\x88";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\x96\x7e\x55\xf8\x53\xda\xd6\x0f\x67\x8b\xd3\x5a\x46\xbd\x3c\x7d\xc6\xcf\x7d\x18\x52\x6a\xc0\x89\x0a\xf8\x0a\xde\x84\x46\x10\x05";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_94() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 51
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x7f\xff\xff\xe0\x00\x00\x0f\xff\xff\xfc\x00\x00\x01\xff\xff\xff\x80\x00\x00\x3f\xff\xff\xf0\x00\x00\x07\xff\xff\xfd\xff\xff\xfe\
\x23\x2a\xa1\xc6\x7f\x77\xcf\xb0\x0e\x73\x89\x8c\xf4\x31\x83\x10\x73\xc6\xb2\xa4\xbf\xa1\x13\x58\x81\xa0\x59\x57\x20\x75\x9e\xce";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\xf2\x1a\x20\x02\x4d\x83\x15\xae\x87\x7f\x90\xaf\x5b\x0c\x68\xb6\xa5\x02\x14\xfe\xa7\x97\x94\x28\x70\xc3\x5f\x4c\xa1\x27\xe5\x91";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_95() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 52
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x03\xff\xff\xff\x00\x00\x00\x3f\xff\xff\xf0\x00\x00\x03\xff\xff\xff\x00\x00\x00\x3f\xff\xff\xf0\x00\x00\x03\xff\xff\xff\
\x15\x82\xfa\x32\xe2\xd4\xa8\x9d\xfc\xfb\x3d\x0b\x14\x9f\x66\x7d\xba\x33\x29\x49\x0f\x4d\x64\xee\x2a\xd5\x86\xc0\xc9\xe8\xc5\x08";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\x06\xfa\x10\x59\x93\x5e\x47\xa9\xfd\x66\x7e\x13\xf4\x69\x61\x4e\xb2\x57\xcc\x9a\x7e\x3f\xc5\x99\xbf\xb9\x27\x80\xd5\x9b\x14\x6d";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_96() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 52
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\xff\xff\xfc\x00\x00\x00\xff\xff\xff\xc0\x00\x00\x0f\xff\xff\xfc\x00\x00\x00\xff\xff\xff\xc0\x00\x00\x0f\xff\xff\xfb\xff\xff\xff\
\x73\xf4\x71\x90\x9c\xfd\xe3\xdb\x2c\x13\x52\x3b\xcf\x37\x28\x77\xc2\x8d\x23\xed\x1f\xf6\xa3\x32\x6d\xf6\xbb\xc4\xb7\x56\x72\x3e";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\x2e\x83\xd4\x96\x53\x8e\x7b\xd1\x6b\x53\x0d\x93\xb9\x60\x31\x73\x94\xb5\xf8\xb9\xda\x51\x28\xa0\x3d\x08\xb3\xc8\xfb\xb4\x65\x61";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_97() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 60
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\xff\xff\x00\x00\x00\x03\xff\xff\xff\xf0\x00\x00\x00\x3f\xff\xff\xff\x00\x00\x00\x03\xff\xff\xff\xf0\x00\x00\x00\x3f\xff\xff\xff\
\x2c\x63\x65\x0e\x6a\x5d\x33\x2e\x29\x87\xdd\x09\xa7\x90\x08\xe8\xfa\xab\xbd\x37\xe4\x9c\xb0\x16\xbf\xb9\x2c\x8c\xd0\xf5\xda\x77";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\xe3\xc1\x8e\x7d\x73\x77\xdc\x54\x0b\xc4\x5c\x08\xd3\x89\xbd\xbe\x25\x5f\xa8\x0c\xa8\xfa\xf1\xef\x6b\x94\xd5\x20\x49\x98\x7d\x21";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_98() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 60
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\xff\xff\xff\xfc\x00\x00\x00\x0f\xff\xff\xff\xc0\x00\x00\x00\xff\xff\xff\xfc\x00\x00\x00\x0f\xff\xff\xff\xbf\xff\xff\xff\
\x71\x66\x4e\xf9\x0d\x87\x52\x5d\xdf\x78\x15\xe6\x76\xae\x3b\x96\xc2\x5e\xd9\xe7\xbd\xaa\x05\xda\x96\x22\x7a\x1f\xe3\x8c\x3d\x11";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\xbc\x0a\x15\x28\x32\xa8\x97\x2b\xbe\xce\xb5\x22\xe6\x61\xe5\x24\x9c\xc7\x45\x5b\xf9\x3c\xba\x32\x4e\x81\x0a\xb6\x2a\x2e\x58\xc1";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_99() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 62
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\xff\x00\x00\x00\x01\xff\xff\xff\xfc\x00\x00\x00\x07\xff\xff\xff\xf0\x00\x00\x00\x1f\xff\xff\xff\xc0\x00\x00\x00\x7f\xff\xff\xff\
\x5d\xf8\x0f\xc6\xca\xe2\x6b\x6c\x19\x52\xfb\xd0\x0e\xd1\x74\xee\x12\x09\xd0\x69\x33\x5f\x5b\x48\x58\x8e\x29\xe8\x0b\x91\x91\xad";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\xf5\x03\xac\x65\x63\x7e\x0f\x17\xcb\x44\x08\x96\x1c\xb8\x82\xc8\x75\xe4\xc6\xef\x7a\x54\x8d\x2d\x52\xd8\xc2\xf6\x81\x83\x8c\x55";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_100() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 62
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\xff\xff\xff\xfe\x00\x00\x00\x03\xff\xff\xff\xf8\x00\x00\x00\x0f\xff\xff\xff\xe0\x00\x00\x00\x3f\xff\xff\xff\x80\x00\x00\x00\
\x07\xbc\x25\xfb\x4d\x2b\x4c\xd1\x2a\x16\x51\x57\x25\xd6\x4c\xdb\xd5\xbc\x86\xb7\xf8\x4e\xf0\x05\xc9\xe5\x1d\x07\x00\xa3\xa4\xb8";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\x68\xe8\x76\x5c\x71\xa6\x3f\x34\x58\xe8\xed\xb2\xe5\x2f\x49\x9a\x1d\xe1\x3a\xe1\xff\x1c\x95\xf1\x8c\x4a\xda\xd9\xd8\x98\x66\x7a";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_101() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 64
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xfc\
\x4d\xe9\xde\x69\x42\xe7\x70\x03\x3f\x5f\x1d\xef\xbb\x36\x24\x9e\x6b\xdf\x45\xa3\x3e\x2e\xf4\xec\x75\xa7\xad\x88\x0b\x54\x32\xc8";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\x40\x60\xdb\x7a\x9b\xf8\xca\x17\xa5\xff\xa6\x14\xa8\x5f\x9a\x25\xed\x6f\x18\x54\xdc\x0f\x23\x96\xb9\xe8\x43\x9e\xa8\x80\x7a\x55";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_102() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 64
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\
\x46\x2e\x0f\x73\x77\xa8\x1a\x3a\x47\xa2\x8e\x62\xdd\x81\x05\x68\x7e\x45\x74\x96\xc6\x1f\xdc\xe4\x9b\xa1\xaa\xee\xfc\xf1\x0b\x44";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\x9e\x6b\x02\xef\x37\x4c\x5b\x7c\x8d\x10\x21\xd1\xe0\x52\x0e\xf5\xf6\xe3\xcb\x7e\x45\x4d\x66\x30\xbd\x27\x0d\xec\xc0\x34\x3f\x1e";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_103() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 112
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\
\x7a\x11\x6c\x96\x4a\x4c\xd6\x06\x68\xbf\x89\xcf\xfe\x15\x77\x14\xa3\xce\x21\xb9\x3b\x3c\xa6\x07\xc8\xa5\xb9\x3a\xc5\x4f\xfc\x0a";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\x51\x6d\x6d\x32\x9b\x09\x5a\x7c\x7e\x93\xb4\x02\x3d\x4d\x05\x02\x0c\x14\x45\xef\x1d\xdc\xb3\x34\x7b\x3a\x27\xd7\xd7\xf5\x72\x65";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_104() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 112
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\
\x12\xa6\x9a\xaa\x5d\x3a\xc4\xce\xe0\x75\x92\xea\x09\x89\xdd\x9f\x42\x6a\x0e\x4d\x16\x80\x7b\x6c\x6d\x04\xba\xa6\x28\xa6\x59\xc0";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\xe7\xe8\x4f\xa1\x3b\x2c\x44\x3d\x0a\x5c\x3e\xa6\x0c\xf8\x7e\x77\x2c\x7f\xaf\x9f\x18\xef\x5a\x0d\x77\x11\x3d\xd6\xc9\x2c\x8d\x17";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_105() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 128
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xfd\
\x13\x7b\xd0\x06\x82\x0a\x8b\xe2\x34\x75\xea\x25\xd8\xfa\x05\xc8\xed\x47\xfc\xa1\x23\x6c\xd5\xd1\xf0\x76\x67\xdb\x6f\xcd\x29\x79";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\x6c\x7b\x30\x06\xdc\xcd\xb0\xb0\x21\xf0\x03\x07\x20\x07\x93\x37\x44\x19\x35\x8b\x13\x67\x80\x0a\xce\x76\xd9\x88\xb1\x0f\xf6\x99";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_106() {
    // ephemeral key has x-coordinate with repeating bit-pattern of size 128
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x7f\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\
\x32\x2a\x53\x13\xa9\x94\x31\x2a\x3f\x04\x7d\x5a\x9c\x6c\xde\xda\x17\x3f\x1d\x3b\x35\x14\x3b\x3b\x1a\x59\x4f\x7d\xbe\x54\x4d\x0e";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\xb5\x22\xe8\x1a\x22\x72\x0c\x57\x04\x0f\x2e\x02\x78\x17\x28\x57\x7c\xb5\x60\x3e\xa2\x80\xbe\x7a\x1c\x84\x75\x0e\x33\xd7\xc9\x63";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_107() {
    // ephemeral key has an x-coordinate of approx p//3
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x55\x55\x55\x55\x00\x00\x00\x00\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xab\
\x79\xdf\xbf\xa5\xe6\x6f\xbe\xa3\x0e\x75\xec\xc7\x03\xe6\x5d\xb4\x3e\x02\x74\x16\xc0\x1f\x6e\x20\xfe\x12\x9b\xe0\xe4\x34\x57\xd8";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\xf9\xee\x8b\x2b\x66\x8e\x2a\x76\xed\x66\xdf\xc5\x70\x06\xb6\x40\x3e\xf8\xe3\x88\xc0\x66\xa0\xb0\x49\x3e\xe0\x42\x5f\x8d\xbe\x3e";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_108() {
    // ephemeral key has an x-coordinate of approx p//5
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x33\x33\x33\x33\x00\x00\x00\x00\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x33\x66\x66\x66\x66\x66\x66\x66\x66\x66\x66\x66\x66\
\x10\xa4\xea\x9b\xc3\x65\xe1\xb2\x24\xb1\x73\xe9\xfd\x68\x8a\x52\x34\x93\x2e\xc9\x0a\x5c\xb9\xec\xc0\xa2\x2a\x10\x99\x27\xe7\x3b";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\x1b\x78\x09\x89\x93\x80\x7e\x9d\xf5\x48\x00\xe2\xc0\xf8\x36\xea\x1c\x46\x04\xf7\xb3\xc9\x40\x13\x11\x78\x4f\x69\xac\x46\x57\xbb";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_109() {
    // ephemeral key has an x-coordinate of approx p//7
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x24\x92\x49\x24\x6d\xb6\xdb\x6d\xdb\x6d\xb6\xdb\x6d\xb6\xdb\x6d\xb6\xdb\x6d\xb7\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x5e\xbb\xe9\x06\xd1\x4c\xfa\x3e\x7e\x90\xd3\x97\x97\x3f\x09\x3a\x6c\x67\x8a\x23\xbc\xb2\x89\x61\x89\xff\xec\xe5\xa1\xca\x39\x8e";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\x7e\xe2\x97\x2f\x26\x30\x79\xa4\x9b\x5b\xfc\x66\x4b\xcf\x42\xc2\x57\x3a\xf3\x51\x43\x40\xe8\xe7\x26\xe0\x88\x81\xaa\x2d\x33\xb1";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_110() {
    // ephemeral key has an x-coordinate of approx p//9
    // flags: EdgeCaseEphemeralKey
    // expect: valid
    let public = b"\x04\
\x1c\x71\xc7\x1c\x55\x55\x55\x55\x71\xc7\x1c\x71\xc7\x1c\x71\xc7\x1c\x71\xc7\x1c\x8e\x38\xe3\x8e\x38\xe3\x8e\x38\xe3\x8e\x38\xe4\
\x6e\xf4\x88\x58\x1f\xbb\xd6\xb4\xef\x78\xd0\x3c\xdd\x16\x12\x72\x24\x3f\xdc\xc1\x09\x79\xfd\x8e\x8f\xd1\x99\xb9\x8a\x63\xd3\x78";
    let private = b"\x55\xd5\x5f\x11\xbb\x8d\xa1\xea\x31\x8b\xca\x72\x66\xf0\x37\x66\x62\x44\x1e\xa8\x72\x70\xaa\x20\x77\xf1\xb7\x70\xc4\x85\x4a\x48";
    let shared = b"\x7b\x50\x20\x08\x0c\xe9\xbd\x76\x08\x3f\xf1\x32\xdc\x28\xea\x99\x63\x14\xbe\x1a\x4a\xc2\x1f\x98\x7f\xbb\xe8\x59\xf9\x02\xfa\xb1";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_111() {
    // edge case for computation of x with projective coordinates
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x85\x1e\xb1\xb8\x69\x9d\x1c\xc0\x1c\x6b\x60\x48\x13\x97\x97\xda\xb3\x98\x1c\x92\x4f\x9e\xf8\x1b\xd1\xf4\x64\xc3\x18\x2c\x87\x09\
\x01\x28\x5b\x2a\xe7\xcb\xca\xbf\xd5\xbc\xcb\x94\x41\xeb\x33\x76\xb4\x91\x59\x5f\x60\xa1\xec\x21\xdb\xe9\xf9\x72\xbc\x32\xab\xbe";
    let private = b"\x00\xe4\x61\xc5\xb5\xe6\x3d\x75\xb4\xc8\xc1\x23\xbf\x8b\x9c\xd4\x5e\x71\x2a\xf0\x8f\x7e\x2e\x49\x4a\x8f\x25\x5a\xc9\xd8\x0e\x05\x8b";
    let shared = b"\x6d\x03\xfe\xf6\xb3\x54\x84\x0f\x46\x42\xfb\xa1\xc8\xfc\xe9\xf7\xd1\xcd\xa8\xae\x27\xb6\xca\x01\x51\x0f\xb4\x45\x73\xfd\xaf\xfb";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_112() {
    // edge case for computation of x with projective coordinates
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xf5\x76\xe2\x27\x47\xf6\xc7\x7a\x8f\x68\x5a\x7a\x7b\x52\x73\x63\xe0\xfe\x7d\x35\x1a\x9e\x3f\x59\x23\xff\xf2\xbf\x97\xe9\x1a\xf4\
\x1e\x57\x5d\x40\x03\x31\xcf\xc9\xf9\x71\x80\xd8\xa4\x8c\x41\x8c\x5a\x98\x26\x09\xfa\xb8\x89\x37\xd2\x59\x0b\xfd\xaf\x37\xd6\xa4";
    let private = b"\x00\xe4\x61\xc5\xb5\xe6\x3d\x75\xb4\xc8\xc1\x23\xbf\x8b\x9c\xd4\x5e\x71\x2a\xf0\x8f\x7e\x2e\x49\x4a\x8f\x25\x5a\xc9\xd8\x0e\x05\x8b";
    let shared = b"\x98\x00\x9c\xee\x0e\x8e\xa4\xfb\x42\xdf\xb7\x0a\x5a\xda\x46\xec\xe3\x2e\x28\x85\xa4\xf9\xc3\xa6\xaf\xba\x13\xe8\x2f\x87\xe1\x13";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_113() {
    // edge case for computation of x with projective coordinates
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x31\x07\x85\xfa\x42\xc3\x7b\xd2\x00\x78\x1d\x70\xe3\x85\x9b\x39\xb2\xfa\x1d\x28\x6a\x3b\x6c\x4f\x60\x5a\x41\xe0\x45\x63\x4b\x81\
\xb8\xd3\x25\x64\xa7\xa2\x32\xc5\xd4\x74\x07\xa7\x79\x5c\x01\xed\xa8\x19\xf2\x3a\x5a\x19\x01\x49\xeb\x8c\x9a\xbf\x94\xed\x7c\x49";
    let private = b"\x00\xe4\x61\xc5\xb5\xe6\x3d\x75\xb4\xc8\xc1\x23\xbf\x8b\x9c\xd4\x5e\x71\x2a\xf0\x8f\x7e\x2e\x49\x4a\x8f\x25\x5a\xc9\xd8\x0e\x05\x8b";
    let shared = b"\xe8\xf0\xe4\x27\xcc\x30\xae\x50\x19\x7d\x2b\xbf\x3a\x45\x16\x67\xa4\x70\x79\x7d\x5a\xbe\x55\xff\x1b\x1d\x6d\xe8\x8e\x41\x37\x2c";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_114() {
    // edge case for computation of x with projective coordinates
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x81\xbf\xb5\x5b\x01\x0b\x1b\xdf\x08\xb8\xd9\xd8\x59\x00\x87\xaa\x27\x8e\x28\xfe\xbf\xf3\xb0\x56\x32\xee\xff\x09\x01\x1c\x55\x79\
\x73\x2d\x0e\x65\x26\x7e\xa2\x8b\x7a\xf8\xcf\xcb\x14\x89\x36\xc2\xaf\x86\x64\xcb\xb4\xf0\x4e\x18\x81\x48\xa1\x45\x74\x00\xc2\xa7";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xb4\x85\xf3\x36\x43\x54\xb7\x38\xdc\x54\x02\x72\x9b\x88\x0c\x90\xc5\x02\xd9\xab\x52\xcc\xf8\x1e\x3d\x21\x60\x2c\x7b\x9b\xd9\x09";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_115() {
    // edge case for computation of x with projective coordinates
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x02\x49\x5a\xc9\xf4\x3e\x45\xaa\xe3\x0d\x33\x66\xe3\x51\xcc\x08\x82\x8c\xf3\xe1\x1c\xc3\xb7\x20\x9f\xbd\x17\x30\xc4\xa1\x4f\x4e\
\x4a\xaa\x98\xdb\xe0\xd9\x4c\xaa\x44\x53\x8f\xcf\x79\x49\xeb\x44\xde\xbb\x7b\xcd\x22\x8a\x54\xd9\xcd\x9b\x3c\x2e\xdd\xf9\x46\x11";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xe5\x78\x1d\xda\xf1\x8d\xcf\xc3\x3f\x48\x79\xa2\x66\x0b\x7a\x32\xa5\x99\xfc\x32\xea\x5a\x1b\xeb\x28\xa4\x8c\xaa\x3e\x6e\xc7\xb7";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_116() {
    // edge case for computation of x with projective coordinates
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xef\xe7\x75\x4e\xd4\xc0\xb3\xc1\xdd\x30\x1b\xc1\xed\x69\x80\x0a\xa2\xff\x5d\x51\xfb\x85\x93\x77\x15\xe6\x0d\x2e\x7b\xca\xda\x8e\
\x4e\xa7\xe5\x47\xa0\x4c\x38\x69\x10\x6b\x56\x24\x5c\x27\xda\x97\x37\xb9\xe8\x16\x0c\x05\xfb\x0d\x86\x04\x02\x76\x70\x8f\xb9\xfb";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xb5\xa0\xec\x92\xae\xcc\x30\x10\xd2\x7d\x22\x63\xd3\xda\x66\xe3\xd2\xf3\x39\x5d\x23\x94\x70\x24\xa3\xf4\x74\x44\x54\x62\x20\x27";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_117() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x66\xae\xda\x76\xd7\x39\x83\xca\xf2\xde\x92\x1a\xf3\x89\x26\x8c\xef\xfd\x27\x8f\xb9\xec\xcf\x92\x87\x02\xb1\xf4\x27\x1b\x43\xf1\
\xd6\x46\xd6\xcf\x8b\xc1\x1a\x0e\xf9\x7c\xd6\x4c\x08\xa1\x1f\x72\xf9\x4a\xf4\xe6\xb3\xc9\x87\x0b\x8e\xb3\xa5\xb0\x36\xc0\x4f\xb8";
    let private = b"\x00\xe4\x61\xc5\xb5\xe6\x3d\x75\xb4\xc8\xc1\x23\xbf\x8b\x9c\xd4\x5e\x71\x2a\xf0\x8f\x7e\x2e\x49\x4a\x8f\x25\x5a\xc9\xd8\x0e\x05\x8b";
    let shared = b"\x84\x62\xe9\xdf\x79\x60\xec\xe3\x30\x89\xe5\xa9\x8d\x61\xda\x4f\xaa\xf3\x66\x0f\x93\xd7\x5f\x7c\xc5\xe3\x97\xb6\x4c\xd1\x59\x1d";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_118() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xf4\x83\x60\x27\x87\x97\x2c\xf7\xb7\x58\x2d\x8e\x2f\x2c\x79\x98\xe5\x37\xca\x57\xeb\xa6\x97\x18\xb6\x8d\x96\x24\x0f\x03\x5b\x1b\
\x55\xdc\xb4\xf7\xbe\x7b\x79\xc4\x69\xba\x8a\x0b\x10\x49\x00\xd7\x05\x3f\xfc\xac\x04\xf3\x94\xbe\x92\x5f\xe0\xcf\xf2\xe9\x69\xc3";
    let private = b"\x00\xe4\x61\xc5\xb5\xe6\x3d\x75\xb4\xc8\xc1\x23\xbf\x8b\x9c\xd4\x5e\x71\x2a\xf0\x8f\x7e\x2e\x49\x4a\x8f\x25\x5a\xc9\xd8\x0e\x05\x8b";
    let shared = b"\xd4\x4d\x05\xd2\x46\xe6\x18\x92\xc1\x05\x6e\x28\x86\x5f\x60\x57\x4d\xbe\xb6\xbe\x62\x68\x07\x76\xa5\x37\xb0\xb2\xc3\xe6\xb4\xdc";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_119() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x57\x9b\xe7\x7f\xa6\x69\x8c\x4b\xaf\x01\x32\xd2\xf7\x99\x3e\xd7\x6d\xfd\x36\xd7\x8b\x58\x46\x05\xe1\xbe\x02\x45\x95\xe3\xad\x51\
\xc0\x69\x47\x3e\x1b\x25\xfd\x94\xa4\x2b\x68\xcc\xb3\x00\x4a\x85\x15\x93\xa3\xaf\x78\xf9\x22\xd9\x09\x20\xd8\xa8\x77\xc3\x65\xf3";
    let private = b"\x00\xe4\x61\xc5\xb5\xe6\x3d\x75\xb4\xc8\xc1\x23\xbf\x8b\x9c\xd4\x5e\x71\x2a\xf0\x8f\x7e\x2e\x49\x4a\x8f\x25\x5a\xc9\xd8\x0e\x05\x8b";
    let shared = b"\x05\x50\xab\x2f\x95\x00\xb8\x58\x0d\xad\x07\x07\x35\x06\xda\x9b\x2d\xb7\x1b\xd9\x74\xa8\x5f\x81\xdf\xd1\x48\xe2\x60\xbc\x8e\xc1";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_120() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x7f\x81\x28\xd8\x83\xbe\x31\x87\x3e\xfe\xda\xb6\x99\x20\x6f\x88\x9b\x77\x6b\xe2\x70\xe1\x63\xdf\x43\x03\x54\x09\xfa\x52\x15\xf1\
\xf3\x6c\x35\x81\xf8\xf8\xd5\x69\xa4\x32\x3f\x87\x00\xca\x09\x79\x21\x50\x42\x15\x21\xe2\xef\x0a\x96\xae\x9a\x4c\xae\xd0\xe0\x2c";
    let private = b"\x00\xe4\x61\xc5\xb5\xe6\x3d\x75\xb4\xc8\xc1\x23\xbf\x8b\x9c\xd4\x5e\x71\x2a\xf0\x8f\x7e\x2e\x49\x4a\x8f\x25\x5a\xc9\xd8\x0e\x05\x8b";
    let shared = b"\x13\x12\xf0\x5b\x3e\x5c\xae\x60\xf2\x7c\x94\x85\xcf\xd0\x05\x84\xcc\xe3\xf9\x61\xfe\xe2\xfd\xf1\x03\xc3\x2a\x79\xba\x17\xff\xbb";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_121() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xee\x5d\x94\xbf\xb5\xdb\x9c\xfe\x51\x1a\x3a\xa7\x0b\xaf\xc9\x3d\xb9\x31\x07\x38\x3c\x12\xf5\xbe\xbf\xfd\x90\xc6\x21\xa2\x05\x1d\
\xb4\xfc\xe1\x32\x61\xd5\x4a\xb2\x9c\x3c\x69\x9b\x77\x35\x8e\xdb\x54\xc7\x18\x01\xf3\xfe\x2a\x0d\x5c\xdf\x2e\xe3\xf1\x84\xb4\xd6";
    let private = b"\x00\xe4\x61\xc5\xb5\xe6\x3d\x75\xb4\xc8\xc1\x23\xbf\x8b\x9c\xd4\x5e\x71\x2a\xf0\x8f\x7e\x2e\x49\x4a\x8f\x25\x5a\xc9\xd8\x0e\x05\x8b";
    let shared = b"\xbe\x47\x92\x92\x25\x19\x71\x7e\x23\x53\x66\xd6\x47\x09\xc5\x1b\x02\x7d\x44\x0c\x6f\xb8\xc2\x16\xfb\xd9\x24\x98\xaa\xf7\x12\x77";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_122() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x0e\xc4\xf8\x84\x52\x26\xe8\x64\xc0\x88\x50\x5d\x72\x1a\x21\x55\x19\x0d\x4c\xaa\x9a\x1f\x5a\x3f\x0a\xfd\xf2\xff\x49\xcf\x6d\x8b\
\xad\x01\xfd\x38\x08\xaa\x03\x44\x2c\xf5\x39\x6e\x10\xe1\x3e\xfd\x24\xcb\xd5\xa5\x28\x62\x82\x2e\xb6\x2d\xfd\x27\xb5\x04\x06\x00";
    let private = b"\x00\xe4\x61\xc5\xb5\xe6\x3d\x75\xb4\xc8\xc1\x23\xbf\x8b\x9c\xd4\x5e\x71\x2a\xf0\x8f\x7e\x2e\x49\x4a\x8f\x25\x5a\xc9\xd8\x0e\x05\x8b";
    let shared = b"\x05\xa2\xed\x58\x20\x7e\x0d\x6a\x99\xf3\x7a\x6d\xa6\x40\xf8\xb3\xb1\xac\xaf\x0c\x16\x82\x6b\xc4\xfd\x1e\xb1\xe2\xa6\xa1\x53\x4c";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_123() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x31\x07\x89\x2f\x34\x27\x84\x2c\x8d\x6a\xa6\x0a\xfb\x1d\x3b\x14\x41\xe2\x8a\x67\xf1\x0e\x11\x98\xa0\x72\x65\x12\x5b\xbd\xa7\xe2\
\xca\x9d\x6d\xf7\x58\x90\x4f\x22\x07\xcd\xdb\x86\x28\x06\xaf\x0b\x8c\xb6\x6a\xd7\x2b\x16\x1b\x4d\xc9\x59\xac\xf6\x14\xfc\x2f\x90";
    let private = b"\x00\xe4\x61\xc5\xb5\xe6\x3d\x75\xb4\xc8\xc1\x23\xbf\x8b\x9c\xd4\x5e\x71\x2a\xf0\x8f\x7e\x2e\x49\x4a\x8f\x25\x5a\xc9\xd8\x0e\x05\x8b";
    let shared = b"\xde\xf4\x8d\xe0\x1d\x86\xd7\x26\x0e\x5c\x2a\x64\x39\x06\x85\x42\x43\x7a\x20\xb1\x40\xdc\xd4\x56\x23\xdd\x1e\xc0\xd1\x39\x47\x42";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_124() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x09\xe5\xc4\x14\xb7\xf5\x07\x38\x58\x55\x3b\x8b\x8b\x42\x95\x48\x8e\x3f\x3a\xb9\x66\x58\x1f\x24\x0a\x61\x24\x25\x15\x12\x27\x0f\
\x8f\xc1\x25\x63\xfb\x9b\xd6\xf9\x7b\x44\x54\x17\xcf\xb1\x4c\xf9\x94\x4b\xac\x1a\x26\xc1\x76\xb5\x32\xb6\x98\xea\x8c\x1b\xed\x6f";
    let private = b"\x00\xe4\x61\xc5\xb5\xe6\x3d\x75\xb4\xc8\xc1\x23\xbf\x8b\x9c\xd4\x5e\x71\x2a\xf0\x8f\x7e\x2e\x49\x4a\x8f\x25\x5a\xc9\xd8\x0e\x05\x8b";
    let shared = b"\xc0\x6f\x73\x73\xe6\x7e\xe8\xc6\x4d\xd8\x61\x27\xff\xf8\xb2\xd2\x3d\x28\x44\x20\xd3\x0e\x57\x1a\x79\xfb\xb9\xb5\x4a\xa7\x0d\xfe";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_125() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xf9\x3b\x07\x96\x92\x11\xca\xfc\x1a\x30\xc5\xc5\x78\xc8\xbf\x35\xbe\x63\xa0\x4d\xaa\x2b\xa4\x34\xda\x8b\x5e\x4b\x83\x76\x9e\xf5\
\x54\xb0\x22\xe4\xf7\xf4\x06\xbc\x93\xe7\x1a\x87\x19\xad\x0c\xcc\x39\x27\x55\xce\xb2\x74\xe2\x48\x82\x9a\x72\x54\x0e\x95\xf1\x69";
    let private = b"\x00\xe4\x61\xc5\xb5\xe6\x3d\x75\xb4\xc8\xc1\x23\xbf\x8b\x9c\xd4\x5e\x71\x2a\xf0\x8f\x7e\x2e\x49\x4a\x8f\x25\x5a\xc9\xd8\x0e\x05\x8b";
    let shared = b"\x7a\x96\x6e\xa1\xfd\x7c\x32\xb1\xfe\x01\xeb\x14\xb5\x0d\x83\x5d\x92\xc3\x1f\x0a\x42\x04\x51\x7a\xea\x66\x93\x9e\x71\x06\xcc\x1c";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_126() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x51\x36\x09\x65\x7f\x90\x29\x24\xe9\x21\xda\xb1\x41\x16\x85\x31\x6b\x41\xd2\xbf\xc0\xbe\x53\xd1\xde\x49\xdb\x9c\x1c\xa7\x8e\x55\
\x14\x1d\x36\x50\x1a\xac\x4b\x47\xdb\xf2\x4f\xad\x43\xe4\x7b\xac\x11\x15\x96\xc0\x5f\x66\xef\x69\x25\x8d\xdf\x02\x27\xe8\xe7\xad";
    let private = b"\x00\xe4\x61\xc5\xb5\xe6\x3d\x75\xb4\xc8\xc1\x23\xbf\x8b\x9c\xd4\x5e\x71\x2a\xf0\x8f\x7e\x2e\x49\x4a\x8f\x25\x5a\xc9\xd8\x0e\x05\x8b";
    let shared = b"\x27\x34\x7a\x05\xa9\x45\x86\x24\x99\xce\x29\xfa\x7f\x6e\x4b\x2c\x49\x6b\x69\x84\xb3\x93\x6d\xb3\xda\x2a\x5b\x82\xc4\xfe\x63\x02";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_127() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x93\xeb\xaf\x5e\xcc\x0a\xa4\x86\xe7\xe7\x35\x13\x06\x11\xab\x5b\x16\x5f\xe3\x95\xa4\xf1\xea\x8f\x82\x09\x7c\xe4\x22\xf4\x42\x02\
\xae\x85\x5c\x1e\xb4\xc3\x34\xf5\x3b\x87\xe4\x26\x80\x1a\x03\x76\x83\x7d\xb2\xc8\x61\x37\x52\x28\x94\xef\x6d\x9d\x69\x52\x01\x63";
    let private = b"\x00\xe4\x61\xc5\xb5\xe6\x3d\x75\xb4\xc8\xc1\x23\xbf\x8b\x9c\xd4\x5e\x71\x2a\xf0\x8f\x7e\x2e\x49\x4a\x8f\x25\x5a\xc9\xd8\x0e\x05\x8b";
    let shared = b"\x4f\x04\x38\x25\x98\xf2\x28\x8f\x95\xfd\xa3\x65\x7d\x5e\x51\x7b\x5f\x88\x85\xf2\x25\x7d\x12\xb3\xef\xab\xb6\x24\xad\x5d\x26\x26";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_128() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x11\xfd\x00\xb1\x8e\xfc\x4e\xfa\x07\xe8\x78\x78\xb5\xdf\x2e\x7a\x59\x6f\x93\xb9\x50\xe5\x0e\x9a\xdd\xa4\x0d\x4e\x6a\xc8\x54\xc0\
\xcc\x47\xed\xcf\x53\x3f\xe0\x3a\x61\x4c\x03\xa7\x09\xc9\xd0\xc0\xcf\x8d\xbf\xd4\xe2\x14\x0b\x5b\x2d\xf2\x38\x48\xb4\x95\x48\xc2";
    let private = b"\x00\xe4\x61\xc5\xb5\xe6\x3d\x75\xb4\xc8\xc1\x23\xbf\x8b\x9c\xd4\x5e\x71\x2a\xf0\x8f\x7e\x2e\x49\x4a\x8f\x25\x5a\xc9\xd8\x0e\x05\x8b";
    let shared = b"\x3b\x50\xf8\x22\xd5\xc9\x31\x17\x35\xfd\xb3\x58\xe8\xc6\xfb\x2e\x4a\xa6\x95\x65\x6d\x75\xf8\x4f\x15\x1c\xbb\xdc\x40\xf7\xf2\x59";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_129() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x50\x1a\x72\x04\x4f\x83\xc5\x17\x31\x66\x28\xb0\xbc\x9d\x89\xab\x82\x13\x1b\xc1\x2d\xf3\x6c\x7a\x42\xb9\x52\xd5\xbc\x23\xc8\x51\
\x82\xba\x29\x06\xe1\x04\xdd\x0a\x7e\xed\x7b\x0b\x17\x72\xe1\x2b\x3b\x3b\x7f\x40\xa2\xdf\x04\x91\x74\xfa\xb0\x9a\x02\xa1\xa5\xbf";
    let private = b"\x00\xe4\x61\xc5\xb5\xe6\x3d\x75\xb4\xc8\xc1\x23\xbf\x8b\x9c\xd4\x5e\x71\x2a\xf0\x8f\x7e\x2e\x49\x4a\x8f\x25\x5a\xc9\xd8\x0e\x05\x8b";
    let shared = b"\xac\x45\xcd\x4a\xfa\x8a\x5e\x4e\x4a\x0e\x3f\x60\xe7\xbf\xea\x0b\x75\x98\x75\x78\x1a\xa7\x72\x27\x50\x02\x2e\x02\xb6\x6e\x13\x03";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_130() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x1f\x3d\x7d\x05\xb8\x46\xea\xb4\xda\xc4\xdb\x69\x5a\x44\x1f\x19\x4c\x22\x68\x21\xf5\x42\x9f\x66\xab\xa4\xae\x0e\x6b\xa5\xb9\x04\
\x00\x33\x4b\x91\xfd\x40\x73\xd1\xb7\xc3\x54\xbd\x62\xf6\xbc\xed\x7c\xdb\xbb\xd7\xc2\xd3\x92\xb0\x3a\xc1\xfe\x52\xdf\x08\x40\x69";
    let private = b"\x00\xe4\x61\xc5\xb5\xe6\x3d\x75\xb4\xc8\xc1\x23\xbf\x8b\x9c\xd4\x5e\x71\x2a\xf0\x8f\x7e\x2e\x49\x4a\x8f\x25\x5a\xc9\xd8\x0e\x05\x8b";
    let shared = b"\x86\x82\xd1\x23\x13\x8d\xbb\x4d\xc4\x04\x51\x47\x8b\x07\x85\x96\xe5\xb1\x9c\x8b\x1b\x5c\x68\xc2\xa8\xa3\xb0\x46\x87\x3b\xfe\x6e";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_131() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x11\xcc\xde\x06\xe8\xde\x88\xd1\x92\x89\x7f\xd0\xf7\xbb\x58\x96\x55\x3a\x52\x4d\xf3\x19\xe4\x59\x4a\x55\x62\x3b\xc7\x64\x62\xe1\
\x22\xa1\x70\xde\x0b\x94\x42\x31\x4a\x94\x7f\xbf\x5e\x03\x58\x80\xb5\x62\xef\x88\xe3\xac\x98\x59\x4f\x48\xab\xc6\x37\x41\x33\x7b";
    let private = b"\x00\xe4\x61\xc5\xb5\xe6\x3d\x75\xb4\xc8\xc1\x23\xbf\x8b\x9c\xd4\x5e\x71\x2a\xf0\x8f\x7e\x2e\x49\x4a\x8f\x25\x5a\xc9\xd8\x0e\x05\x8b";
    let shared = b"\x24\x6a\x11\x99\x90\xf2\x95\x92\x4b\x62\xb2\x90\xe5\x91\xf4\x28\x05\x4c\x2d\x34\x31\x4c\x54\xee\x50\xdd\x3d\x85\xed\x55\x16\xbe";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_132() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x59\x4b\x08\x52\x72\xf8\x9f\xae\x68\x13\xfd\x39\x44\xba\xdd\xbb\x9f\x2b\x18\x23\x62\x73\xcd\xab\xf3\xe6\x07\xa7\x37\x14\xa2\x52\
\x95\x60\x35\xb2\x53\x1b\x98\xfd\xaf\xa6\x3e\xe7\xe7\x27\x52\xef\x03\xca\xa9\xeb\xbb\x16\x97\xa1\x8e\x6d\x31\xe1\x49\x48\x5e\x5d";
    let private = b"\x00\xe4\x61\xc5\xb5\xe6\x3d\x75\xb4\xc8\xc1\x23\xbf\x8b\x9c\xd4\x5e\x71\x2a\xf0\x8f\x7e\x2e\x49\x4a\x8f\x25\x5a\xc9\xd8\x0e\x05\x8b";
    let shared = b"\x34\x3c\x4a\x2c\x74\xe9\x41\x6b\x07\xc8\x55\xc2\xec\x5a\xb0\x53\xe1\x1b\x51\xc4\x73\x89\xd8\x45\x5d\x61\x75\xe2\x4f\x51\x37\x17";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_133() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x82\x38\xf0\x48\xc2\x92\xe0\x8d\x49\xbd\xb5\xda\xb1\xf0\x8d\xa6\xd3\x9c\xdb\xef\xb1\xd7\x5e\x03\xe7\x60\x48\xb9\x03\xd6\xba\xf9\
\xc7\x61\xb2\x5a\xfb\xf0\x41\xe0\xe6\x5e\xb9\xe0\x13\xc3\x36\xfb\xfc\x36\x41\x34\x35\x5f\xd1\x0a\x86\xc2\x58\xde\x3e\x19\xa8\x57";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x81\xfa\x8c\xa5\x0a\xc1\x55\x20\x0d\xe4\x10\xdf\xdf\xd8\x09\x30\x37\x67\x4b\xab\xa7\xca\x10\x28\x28\xa5\xd0\x02\x6f\x24\xf0\xf5";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_134() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x2d\x08\xcf\x12\x30\x46\x3b\x71\x02\xe8\xa5\x41\x85\x98\x6a\x62\xa3\xf2\x52\x0c\x0c\x15\x1a\xce\x12\xf5\xd0\x73\xa4\x0c\xbb\x2f\
\xec\xb8\xc2\xed\x0a\x72\x21\x85\xe9\x87\xcf\x7c\x32\xac\xc4\x21\x33\xf6\xdd\xb7\x23\x0e\xa4\x8d\xc0\xf7\xc6\xb5\xa4\x3a\x4c\x0f";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x15\x14\x11\xc3\xb8\xe6\xd2\x5c\x51\x51\x86\xc1\xd9\xb9\xc6\xe1\xa0\x5d\xa5\xa7\xf0\x9c\xd4\xea\x88\x44\xe0\x91\x68\x46\xba\x48";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_135() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xbc\xd1\xf2\xa7\x5e\xee\x0b\xaf\x7e\x0f\x55\xbb\xb1\xc8\x76\x96\x6d\x9d\x5d\x21\xf0\x2a\x14\x5a\xc9\x66\x84\x91\xe4\xca\x5e\x51\
\x1c\x5b\xe7\x4b\x40\x82\x59\x6f\x2c\x6c\xdb\xdb\x6c\xc9\x08\x38\x95\xf3\x33\xce\xe8\x07\x5c\x26\x50\x96\x3e\x7e\x72\x79\x06\xe6";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xf7\x2d\x64\xd6\xb5\xe3\x8a\xe2\x23\xc7\x7a\xd3\x46\x78\x18\xf8\xb0\x3b\x95\x35\x01\x14\x00\x15\x7a\x5f\x42\x6c\x4a\x51\x2f\xa1";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_136() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x47\x00\xbc\x54\x8e\x9d\x62\x56\xec\xe3\x82\x11\x2b\x93\xf8\x78\x0f\xd2\xe4\x27\xf6\x90\xc3\x5b\xf3\x1f\x68\x22\x84\x11\x9c\x72\
\x5e\xa4\x08\xd7\xfc\x65\x99\xbd\x2b\x0e\x75\x4f\x9d\xe1\x66\xea\x47\xa4\xe4\x8b\x14\x92\x5f\xa7\xbb\x63\x5e\xf0\x96\x42\xaf\x05";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x10\x8a\x89\xa0\xbc\x8e\x1b\x85\x98\x1f\xe4\x85\x3a\x86\xa4\x26\x48\xcc\xbe\x68\x55\xdd\xa1\x07\x91\x36\xdb\x8c\x59\xfc\x20\x65";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_137() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xa0\xb3\x51\x86\x4a\x8c\x47\xba\x44\x56\x34\xbc\x10\x7f\xed\x06\x45\x1f\x97\x39\x1c\x55\x92\x1d\xb6\x1e\x74\xca\x52\x7a\x6a\x45\
\xfa\xb2\x7b\x18\x96\xd5\x2d\xf4\x61\x1f\x62\x74\x14\xc4\x8b\xa7\xa1\x31\x76\x60\x02\xd5\x52\x3f\xf8\x83\xa4\x99\x76\x9a\x42\x2b";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x7d\x36\x2a\x6e\x1f\x00\xe5\x25\xfb\xf0\x12\xfc\xc9\xda\x98\xe0\x9d\xdc\x28\x1c\x14\x3f\x1e\x02\x3f\xac\x6a\x6b\x63\x03\x34\x1f";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_138() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x13\x50\xca\xc3\x74\xbb\x07\x6e\xe8\x9e\xb8\xaf\x43\xd0\x76\xaf\xc7\x31\x20\x21\x00\x64\x31\xfd\x90\x9d\x22\xdf\x06\x4f\x66\x37\
\x24\x4f\x23\x6a\x65\xe7\xc1\xc7\x78\xf6\xca\xc2\xd9\xb4\xec\x3b\xd9\x99\xac\x18\x57\x97\xa2\x27\xcf\x00\x55\x2d\x6a\xa5\x16\x3a";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x1d\xe1\x65\x6d\x96\x1d\xe1\xf5\x84\xa2\xf7\x17\x9b\xd3\xbe\x3b\x4a\x28\x2c\xbd\x32\x48\xf2\x9e\x74\xb7\x3a\x81\x2c\xad\x8d\x90";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_139() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xc1\x85\x50\x8f\x46\x4f\x67\xaa\xcc\x24\xfa\x85\x9e\x74\x4f\xe5\x7c\x3e\xce\xf2\xfa\x91\x1c\x16\xdd\x2c\xbd\x07\x3b\x30\x8a\xaa\
\x8f\xef\x47\xdc\xef\x6b\x0f\xba\x62\x05\xf0\xb7\xe2\x3d\x17\x75\x8f\x1d\xf5\x40\x1c\xd9\xa3\x9d\xe4\x2b\x07\xb9\x2d\x15\x36\x25";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x56\xae\x03\x8f\x61\xab\xb2\x93\xf4\x33\x28\xa5\xe6\xe4\x0b\xdf\x73\xf9\xe7\xd5\x86\x8e\x5b\xf1\xaf\x3b\x03\xfa\xfa\x55\x9e\x86";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_140() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xdc\xcf\xf1\x94\xa9\xd3\x07\xb5\x90\x0a\x13\xf2\xd7\xa1\x92\xf6\xe8\x28\x45\xaf\x10\x07\xc9\x51\xb5\xb9\x72\x0b\xff\x98\xd0\xa0\
\x28\xfb\x8b\xa9\x23\x8a\xd5\x37\xe0\xd7\xf3\x14\x44\x08\x66\x11\x43\x0a\xba\xea\x54\x79\x13\xa0\x59\x1d\xd9\x08\xec\xd8\x64\xb5";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xc7\x5e\xb0\xa2\xcd\x61\x7f\x01\x17\xf1\xd9\xad\xc1\x05\x6a\x02\x52\xa0\xcc\xa0\xb6\x4b\x37\x3b\xb3\x0d\x52\x31\x38\x04\x15\xca";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_141() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x0c\xb0\x5c\xb7\xa4\xb0\x1d\xb1\x38\x26\x20\xca\x75\x62\x85\xe1\xa7\xc6\x84\x6b\xbb\x59\x5c\xbb\xac\x9f\x89\xe0\xa6\x24\x89\xcc\
\xa8\x88\x29\xc9\x5f\x6b\x2e\x81\x87\xd2\xe1\xc3\xa7\x44\xf4\x1d\x3e\xbc\x98\xfa\x01\x74\x8b\x12\x48\x46\x2b\x35\x02\x56\xa5\xe8";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x01\x03\x85\xfd\xf7\xf4\xc6\x40\x2a\xe4\x32\xe4\xb2\xf1\x1f\x2f\x86\x1c\x75\xc4\xdd\x27\xb4\xf3\x5b\x7f\x1e\xfa\x94\xbb\xee\xcf";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_142() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xf9\x58\x94\xcf\xe4\xf1\x4c\xcc\x48\x3a\xdf\x9c\xdf\x10\x67\x09\xe3\xec\xa5\xce\xb2\x0e\x7c\x14\x5d\x3b\xf1\x8b\x6a\xea\xa8\x03\
\x9c\x42\xc0\xc8\xc3\xdb\x57\xe0\xbb\xb2\x59\x3e\xbe\x08\x87\x71\xeb\xd0\xe2\x85\x7f\xc2\xa8\x77\xc3\x74\x8a\xda\xcd\x03\x85\x42";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xaf\x11\x6b\x17\x22\x37\x91\x53\x70\x62\x5d\x3c\xa7\x36\x0a\x6b\x6d\x65\x1c\x57\x30\x31\xac\x33\xc0\xce\x4b\x72\xa9\x42\x7a\x7c";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_143() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x16\xa8\xb9\x3a\x6b\x95\x29\xb5\x92\x05\x66\x13\x1a\x79\x2c\x55\x4a\xc4\x21\xaf\x3a\x4b\xfc\x34\x14\x08\xd1\x4d\xdc\x89\x71\xc5\
\xf6\x0e\xa4\x66\x34\x49\xbf\x3e\xc7\x47\x48\x1d\x73\x0c\x4d\x97\xa1\x56\x5b\x5b\xb2\x07\xe2\x7e\x55\xae\xc8\x89\x69\xf2\x02\x3e";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x10\xc3\xa4\x1e\x0a\x1d\x00\x18\x44\x4b\xbc\x3b\xcf\x76\xb2\x89\x3f\x66\xb6\x9c\xfb\x04\x62\x55\xc8\x2a\x17\xff\xa3\x41\x32\x46";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_144() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x7d\x9c\x0f\x7a\x01\x1d\xe0\x80\xda\x8e\x6e\x22\x5f\x72\x11\xe7\x29\xc2\x94\x25\xc9\xdc\x9a\x28\x9d\x5c\xf8\xa0\xf6\x35\x89\xaa\
\x12\x9b\x3b\xfc\xb4\x33\xff\x08\x44\x09\xe3\x2f\x73\x74\x1e\x59\x29\x13\x00\x33\x67\x12\x3b\x3e\x6e\xc4\xb7\xfc\x39\x8d\x1b\x29";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x26\x95\xb4\xe4\xa5\xc6\x48\xec\x17\x90\x5e\x69\x28\x6b\x6d\x49\x35\xa2\x17\x72\xf5\xde\xd1\xe5\x51\x36\xcf\x17\x33\x1d\xe9\xd5";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_145() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xfe\xa5\x45\x80\xf4\x09\x62\x99\xc1\x7c\x28\x1a\x3f\xcf\x67\x38\x22\x6b\x63\x6c\x85\xe8\xef\xd3\x60\xa4\x41\x38\x48\xb0\x78\x81\
\xfd\x47\x18\x1a\xe8\xc3\xad\x89\x48\xf6\x5d\x8c\x84\x5a\x86\x3b\x2f\x86\xa6\xce\x8a\xa3\x7a\x5e\x5c\x20\xd3\xe9\x6f\xc9\xc8\x84";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xa6\xf6\x48\xff\x33\x73\xf9\x43\x3a\x21\xa3\x88\x29\xa5\x66\x7c\xcc\x2b\x1b\xcd\x3d\xe1\x35\x16\x53\x7d\x6d\x9b\x77\xc0\x40\x44";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_146() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x08\xbe\xac\xc0\x4a\xc2\x7e\x38\x39\xce\x74\xd5\x15\xd2\x38\xaa\x98\xe1\xaa\x1b\x5e\x58\x0f\xc5\xfa\xe0\x11\x6e\x52\x0d\x88\x0c\
\xba\x05\x85\xf7\x23\xc4\x4f\x24\x38\x13\xb0\x7e\x2d\x76\x26\x60\x5e\xe5\x86\x15\x23\xd1\xac\x07\x54\x79\xda\x77\x3e\xfe\x02\x6e";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xe1\xdb\x68\x84\x1b\x60\x00\xde\xba\x2e\x9a\x66\x6a\xb2\xcd\x22\x7f\xd9\xf3\x3f\x69\x18\x7b\x61\x1d\xaf\xec\x0d\x6c\x9b\x6e\x7e";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_147() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x8c\xc2\x80\x70\x89\xcc\xab\x7b\xdf\xbf\x16\x97\xf1\x53\xd4\xee\xa6\x3f\x30\x43\xce\x63\x13\x5f\x6b\x90\x6f\x82\x35\xf7\x6b\xf9\
\x9e\xbd\xb2\xc2\x6b\x09\xf4\x9b\x12\x2d\x1a\xc7\x3a\x8b\xa3\x7c\xe9\xc3\x85\xc0\x26\x9c\x4e\x40\xac\x3a\x9c\x20\x31\x4a\x44\x37";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x36\x64\x8f\xd5\xe1\x25\xab\xe0\x8a\xe2\x11\x99\xd0\x8e\xb7\x8e\xb7\xe3\x45\xa1\xfb\x3b\x26\xe5\xfd\x25\xd3\xc1\xe9\x6e\x3b\xb5";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_148() {
    // edge case for computation of x with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xe8\x54\xfe\xd8\x84\xe6\xc7\x62\x77\xaf\x9d\x8d\xc8\x3d\xf6\x6b\x81\x47\x8a\x8f\xff\xf2\xc3\x13\xf2\x2a\xbf\x0f\x8d\x44\x42\xf5\
\x0f\x57\x24\x44\x19\xb2\x07\x5c\xe2\xb2\x82\x44\x09\x44\x21\x3d\x87\xc5\x0f\x58\xb9\xe7\xb7\x17\x65\xd4\x5f\xca\xd1\x52\xb3\x33";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x41\x8d\xf7\xa1\xa6\x31\x5f\x55\x10\x4b\x5b\x9f\x96\xda\x45\x47\x25\xf5\x99\x92\xc5\x88\xa5\x31\xe8\x0a\x47\x44\xb8\xd7\xd4\xb8";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_149() {
    // edge case for computation of x with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xc1\xf3\x19\x27\x9a\x7b\xae\x9f\x3d\xc5\x27\xc4\x23\x08\xa7\xa6\x25\x57\x63\xcc\xcd\x6f\x24\xd2\x66\xe7\x5f\x88\xeb\x4d\x02\x2f\
\x6b\x3a\x3c\xf1\x4e\xd3\xb5\xe6\x91\x5f\xf3\x22\xb7\x05\xb1\x75\xda\x07\x22\x3c\xff\x4e\x9a\xd4\x52\x0d\xec\x70\x28\xe1\xe3\x96";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x32\xdd\xa9\x87\x6d\xca\xc2\x5c\x58\x54\x33\x04\xa2\xcf\x6c\x1b\x31\xfd\xab\xf3\xc8\x9e\x43\xd6\xee\xe6\x28\xa0\x24\x22\xb1\x9c";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_150() {
    // edge case for computation of x with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x47\x53\xee\x2e\x3a\xc2\x01\xe9\xa4\xbf\x25\xe3\x15\x13\xa4\x53\x65\xb5\xd0\x52\x6d\xcb\x2e\x0a\x88\x73\x6f\xc8\xae\x26\x81\xc1\
\xcc\x49\xb1\xe8\x68\xd4\xde\x22\x45\x93\xec\x7e\x00\xe9\xf2\xc2\x09\xf3\xb9\x35\x42\x8d\x3b\xfa\x97\x8f\x74\x86\x9a\xf8\x89\xe2";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x4c\x54\xd6\x3b\x14\xb8\xff\x10\xb6\x53\xf6\x63\xf3\x23\x0c\x18\x27\xd6\x82\xc8\x33\xea\xd1\xf4\x4a\xd6\xae\x8e\x7d\xf3\x5e\x2d";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_151() {
    // edge case for computation of x with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x29\xc1\xe7\x74\xc9\xd3\xa8\x93\x0d\xf8\xa6\x63\xfa\xdc\x8b\x9a\x60\x92\xd8\x05\x4f\xf3\x7a\xdf\x59\x8e\xdd\x78\xd0\xa3\xff\xc5\
\x71\x73\xa3\x59\x4b\xe6\x8b\x7a\xd1\x91\xe0\xff\x27\xd7\x9e\xb4\xe7\xbb\x22\xf1\x09\x08\x73\xcf\x30\x7c\xd0\x73\xb2\x73\x68\xfc";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x4d\xf3\xa9\x84\x74\x88\x4b\x1c\x3c\x78\xb6\xc8\x1e\x4f\x90\xd5\x3d\x8b\xb4\xda\xba\x42\x27\xc4\x11\xa5\x74\x7e\x6a\xac\x8c\xb8";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_152() {
    // edge case for computation of x with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x89\x3c\xb0\xc3\x08\xaa\xa2\x09\x2d\x9a\xf9\x3e\x0f\x02\xcd\x95\x1e\xc3\x86\xe8\x66\x48\x0e\xec\xe4\x43\xcc\x89\xe6\x72\x73\x3f\
\xf6\xc6\xf4\x3c\xaa\x1e\x1d\x16\x8b\xa3\xea\xd9\xea\x04\x1c\xf4\xf2\x27\xd7\x6b\x90\xe9\xe2\x5f\x49\x7f\x2e\xce\x89\x35\x51\x2b";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xd2\xaa\x08\x70\x51\xfb\xdc\x35\x05\x1d\x21\xff\x41\x5f\x93\x4a\xb5\x69\x86\x29\xab\xde\x5d\x4b\x39\xf2\xf6\xa7\x6e\x39\x92\xcf";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_153() {
    // edge case for computation of x with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xc5\xa2\xdc\x34\x0e\x09\x83\xaa\xd4\xf8\x95\xbf\x54\xbe\x9d\x9e\x17\x6d\x6b\xa1\xba\x6c\x85\x9c\xa0\x85\x18\x89\xa9\x7b\x7d\xc5\
\xc9\x0d\xab\x79\x20\x7b\x86\x1f\xd9\x96\x42\x96\x39\xcd\x8f\x31\xbe\x02\x98\xb6\x3f\x49\x34\x92\x3a\x48\x3a\x9e\x6f\x7c\x5a\xb9";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xac\x7c\x60\x65\x16\x53\xa4\xf3\xd4\x47\x8e\xbb\x9a\xec\x43\x81\x18\x3f\xfe\x1b\x15\x2b\x66\x43\xc0\x7c\x47\xc0\xb2\xa4\x89\xcd";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_154() {
    // edge case for computation of x with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xe9\xdb\x2c\xf8\x03\x75\x05\xfd\x8a\x80\x44\xf4\xb3\xf8\x0f\x67\xf9\x68\x88\x15\xc6\x9c\x78\x8d\xdb\x26\xfc\xb3\xc8\x4c\xb8\xad\
\xf0\x2e\x12\x1e\x40\x20\x42\x4c\x6d\x8f\x1d\x26\x9c\x00\xf2\xa7\xf2\x3a\x59\x23\x7f\xb4\x8a\x5b\xa1\x7e\xe5\x7c\x1c\x26\x42\x82";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x50\x9d\x06\xdc\x43\x81\x3d\xba\x91\x14\xc1\x3c\x33\x7b\xdc\x0b\xcc\xc2\xc7\xdf\xa7\xa7\xd8\x96\x0e\x55\x93\xc5\x28\x49\xc8\x55";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_155() {
    // edge case for computation of x with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x77\x6a\xef\x1a\xcb\x82\xb6\x28\xe1\x32\xcc\x29\x44\x09\x88\xf0\xa1\x5d\x4c\xc2\xb4\xf3\x28\xae\xcb\x06\x3c\x9b\x86\xe5\x01\x8e\
\x91\xbb\x20\x38\xfb\xbb\x05\x57\x3b\x1c\x94\x3d\xe8\xba\xe0\x85\x3d\x6a\x93\x4d\x4d\x16\x44\x29\xaa\x14\x5d\x68\xe9\xc2\xe0\xcb";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x28\xa8\x8b\x6b\x25\x8f\x23\x30\x20\xba\x6f\xa9\xc0\x0d\x1d\x72\x83\x1f\x45\x15\xb8\x69\x66\xa9\x78\x2f\x52\x13\x15\xe1\x8a\xa7";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_156() {
    // edge case for computation of x with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x9e\xc0\x6b\x0b\x08\x66\x2c\x0e\x1d\xd9\x11\x16\x96\xa6\x3a\x16\x01\xcc\x83\xce\xe2\x06\x95\x77\x8a\xdf\x84\xd4\x30\x64\xfc\x90\
\xea\x9f\xfe\x0e\x7b\x32\xc3\xe3\x0e\x5f\x78\x09\xd9\xac\xc4\x9a\x8d\xa7\xb7\x77\x42\xc2\xa3\xd3\x66\x0f\x1c\xee\x1d\xd4\xbe\x19";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xc4\xff\x86\x5f\xf3\xdc\x49\x53\xea\x78\xd9\x2a\x02\xf3\x34\x5a\x53\xbd\xb6\x05\x0c\xfd\x8f\x41\xba\xa4\x39\x5e\xcb\x6a\xca\xb8";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_157() {
    // edge case for computation of x with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xfa\x51\xd1\x28\xad\xc2\x00\x0f\x09\xff\x12\xc6\xfd\x8e\x25\xaa\x08\x55\x6d\x70\x8b\xf6\xb0\xff\xff\x9e\x8e\xaa\xd4\x78\x3f\x0d\
\x1d\xd4\x0a\xd5\x1a\xe9\x1e\x0a\xb4\x71\xf2\xf6\x06\x70\x52\xb1\xaf\xe9\x6a\x57\xcf\x5e\x4d\xdf\x89\x9a\x62\x58\xf8\x1c\x33\x2f";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xde\x10\x69\xf0\x51\x63\x7e\x10\x16\x65\x59\xce\xf4\x46\x88\xaf\xc8\x09\x34\x18\x55\x26\x12\x15\xc4\xf3\x81\xd9\xd7\xda\x76\xca";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_158() {
    // edge case for computation of x with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x61\x4d\xcf\xbe\xa4\x78\x9a\x3f\x3e\xb4\xa8\xe2\xf1\x11\xc8\x87\xf0\x24\x8d\x93\x16\xb9\x9d\x08\x64\xc9\x27\xa0\x45\xd6\x94\x17\
\xac\x5f\x8c\x40\x01\xf7\xb6\xe6\x7f\xaf\x5b\x26\x92\xf7\x45\xb8\x6f\x51\xe7\x25\xc1\x08\x0f\x15\x33\x0a\x63\x1e\xf6\xa5\x03\xab";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x42\x07\xbf\x41\x59\xfa\xa0\xe5\x0e\xd2\x38\xb9\xc0\xff\x46\x19\x4a\x53\x9a\x1b\xa0\x3a\x5a\x4c\x8d\x68\xf3\x69\xae\xcd\x31\xa5";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_159() {
    // edge case for computation of x with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x83\x21\x76\x3f\x55\x33\x31\x0a\x47\x79\xe8\x3a\x58\xff\x11\x04\x80\x39\x46\x90\xf7\xc2\xf6\x5f\xc2\x29\xc1\xa5\x8f\xfb\xdd\xc8\
\x6d\x17\x01\x41\xa1\x08\xfc\x92\xf2\xbb\x96\xdd\xce\xa0\x65\x2c\xb6\x50\xc5\xe8\x63\xaf\x92\x89\xd3\x7a\xe8\x7a\x29\x02\x2d\x9f";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x7c\x8e\x29\xca\xa0\x1e\x9f\x32\x5e\x1e\x70\xd7\x1a\x59\x85\x07\x49\x23\x9a\xdf\x4e\x1b\x8f\xa5\xd6\xd0\xab\xd7\x0c\x83\xaf\xb7";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_160() {
    // edge case for computation of x with projective coordinates in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xaa\x42\xc9\x77\xda\x1e\xd4\x2e\x52\x04\x1c\x0a\xf2\xc0\x90\xf2\x44\xb2\x2a\xe3\x54\xcc\x9b\x10\x78\x1e\x44\xc8\x9e\xeb\xe3\x36\
\xf7\x10\x0a\x0e\xac\x8b\x55\x51\x3c\xe5\x7a\x8d\x0c\x19\x5a\xdc\xf5\x0d\x1b\x05\xfd\x35\xb0\x57\x6c\xd9\x28\x05\xcb\xab\x4c\x1f";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x98\xaf\xbf\x6e\x00\xeb\x00\x4c\x79\x65\x7b\x40\xb7\x10\x5f\x85\x26\xb5\x20\x59\x42\xaf\x22\x18\xf4\x53\xbc\x26\x33\x73\x06\xbe";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_161() {
    // edge case for computation of x with projective coordinates in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x07\x30\xd7\x7d\x91\x14\xd5\x61\x0d\x49\xa9\x8d\xc1\x96\xca\x9e\x1e\x8f\xd2\xab\xe0\x07\xda\x96\xb5\x74\xf7\x36\xbf\x19\x39\x25\
\x8c\x88\x14\x05\x5a\x77\x4f\x7e\x79\xf7\xb4\xfb\x9c\xfb\x03\xd8\x39\x56\x6a\xfc\x60\x59\x31\x1f\x3d\x55\xd4\x9c\xa4\xdd\xab\x31";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xc5\x37\x40\x90\x21\xad\x95\x64\x6f\xbc\xcf\x92\x32\xea\x47\xfa\x76\x4d\x12\xdb\x75\x95\xf4\x36\xa6\x5a\xd5\xb1\x3c\xdd\x19\xf8";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_162() {
    // edge case for computation of x with projective coordinates in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x85\xa8\x2f\xab\xb6\x0c\x76\x64\xe2\x50\x0c\x59\xd0\xf2\x4e\xac\x1a\xab\x00\x60\xc0\x7b\x49\x82\x8c\x55\x00\x9f\xd2\x7a\xa4\x96\
\x47\xb8\x5f\x72\xb4\x67\xbf\xa2\xfe\x1b\x13\x25\x8f\xeb\x12\x1a\xee\x75\xa3\x15\x5b\x30\xe8\xb4\xb5\x66\xb6\x10\xf1\x3b\x6d\xc5";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xad\x60\x14\x6b\x1c\xf2\xd9\x66\x18\x84\xb9\xef\x86\x7c\xbb\x09\xe4\x24\x66\x56\x39\x36\xb0\x31\x74\xef\xd8\x51\x7c\xa8\xc6\xe0";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_163() {
    // edge case for computation of x with projective coordinates in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x83\x3f\x2a\x6e\x5c\x76\xc3\xdd\xd1\x3a\x10\x6c\xee\x4a\xa8\xb2\xa9\xdc\x32\xe0\xbd\x7b\xbe\x2a\x63\x22\xab\xe0\xab\x41\x10\xa2\
\xab\x93\x84\x54\x03\x80\x8a\x7c\xc8\xe8\xb6\x5f\xa4\x2d\xa4\x14\x32\x7e\xc3\xa1\x9d\x53\x9f\xc0\x33\xba\x8d\x8a\xae\x7c\xb2\x3f";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xf6\x77\xa0\x3d\x68\x57\x0c\xf6\x08\x3a\x1b\xa4\x15\xb4\x0b\x5f\x7f\xfd\xac\xe4\xee\xb8\x04\x98\x3c\xbd\x03\xb9\x79\xd9\x39\xb2";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_164() {
    // edge case for computation of x with projective coordinates in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xcf\x81\x16\xba\x09\x01\xb0\xb9\x53\x08\xbc\x68\x6f\xed\x90\xce\xba\x0e\x5d\x42\x4c\x8e\xc2\x06\xca\xb8\xd7\xcf\xfe\x93\xfb\xa2\
\xd5\xe7\xa6\x2c\xde\xab\x84\xa2\x0f\xce\x37\xb5\xb0\xac\x16\x8c\xa2\xa8\x5a\x1d\x18\xcb\x04\xee\x48\xde\xb2\x50\xb5\x46\x91\xaa";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x30\xc9\xfb\x67\xa3\xdb\x93\xa4\xb3\xa5\x41\x35\xd2\x65\x17\x1a\x14\xa2\xa0\xa7\x9c\xd7\x15\xe1\x35\x15\x51\x07\x93\xd8\xd0\x81";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_165() {
    // edge case for computation of x with projective coordinates in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xe7\x54\xcd\xf8\xe5\x69\x44\xd5\xbd\x36\xd0\x25\xb1\xc0\xf5\xfb\x27\x54\xa2\xee\xe0\xfb\x52\x00\xbd\x16\x9c\xdf\xc8\x3f\x07\xc3\
\x8f\x2b\x78\x81\xde\x64\x7c\x2c\x66\x29\x4e\x1a\xdf\x76\x7e\x51\x5a\xdd\xa7\x42\xd3\xa8\x63\xf0\xcd\xd6\x66\x5b\x96\x4e\x60\xa3";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x84\x51\xf3\x41\x42\x47\x05\x8c\x32\xb5\x3b\xe1\x28\xcf\xfd\x2f\x28\x87\x43\x4a\xb9\x02\xb6\x7b\x05\xfb\xbe\x7a\xee\xd8\xcb\xd1";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_166() {
    // edge case for computation of x with projective coordinates in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x74\xf1\xfe\xb9\xa6\x41\xfd\x87\xa4\x9e\x16\xfb\xb1\xbe\x36\x32\x97\xef\x97\x12\x13\xbc\x7d\x36\xb6\xab\xbf\x29\xd0\xe8\x8a\xc3\
\x4b\x6c\x24\x6b\x31\x3b\xe6\xc3\xc9\xf3\x3d\xef\xd4\xad\xe9\x47\xaf\x54\x71\x68\xf7\xc2\x22\x78\xdf\x8c\xb7\xb0\x6a\x80\x18\xc5";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xdd\x6b\xf0\x55\xa9\xe4\x31\x47\x97\x07\xe6\x45\x90\xfc\x58\xf9\x7a\xd3\x23\x8d\x06\x3c\xe8\xf6\x6d\x5d\x37\xb2\xe3\x47\x56\x38";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_167() {
    // edge case for computation of x with projective coordinates in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x93\x68\x06\x6a\x07\x48\x86\x7a\x7b\x87\x02\x44\xf5\xc9\xf8\x2e\xa8\xbd\x51\x55\x29\x59\xdd\x55\x0b\xb7\x39\x44\x97\x15\x9a\x5d\
\xbf\x89\xb5\x21\xe5\x1d\xb3\x72\xc0\xbc\xd1\x1f\xee\x41\x68\x2c\xec\xf8\xe7\x02\xf5\x95\x6f\x12\x74\xef\xee\x4d\xfc\xb2\xf6\x5f";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x45\x29\xf4\xb6\x31\xc9\x98\x4a\xb2\x16\xa6\x80\x12\x81\xfc\x4f\xd8\x73\x1a\x58\xb6\x5c\xa8\xd0\x7b\xff\x07\x81\x11\x16\x37\x1f";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_168() {
    // edge case for computation of x with projective coordinates in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x64\xe5\xd7\xb0\xf7\xfc\xf4\xc9\xc1\x61\x56\xcb\x87\x45\xc4\x39\x95\xf8\x23\xe7\xe1\x09\x54\x13\x1e\x61\xf9\xfa\x09\x05\x9e\x2c\
\x2f\x7a\x39\xdd\x0d\xc6\xe8\xa9\xbb\x7c\xc7\x9d\x82\x1e\x7c\x74\x99\x63\xdd\x97\xc7\x07\x01\x29\xdb\x63\x8c\x0d\xd1\xba\x05\x3a";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x12\xae\xb4\x26\x30\xe4\x88\x5a\x93\xca\xc0\x90\xc6\x64\x79\xd0\x11\xa1\xfd\xfa\xa4\x6c\x0d\xb3\x3e\x0f\xd5\x1e\x1e\x57\x3c\xd8";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_169() {
    // edge case for computation of x with projective coordinates in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x3d\xa0\x65\x5a\x52\xe3\xd6\x85\x7a\x39\xfa\xef\x86\x4c\xee\x42\xf1\x81\x6b\xd8\xd8\x3a\xf8\xc6\x57\x99\x08\x46\x82\x1f\x00\x22\
\x8f\x76\xd1\x01\x62\xe2\x95\xfd\x77\x37\xd0\xd2\x2f\xaf\xba\xb2\x4d\x5d\xb0\xff\x43\x2b\x51\x35\x40\x30\xe1\xfb\x09\x27\x3c\x51";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xad\x8d\xea\xe4\x00\xae\x52\xdf\xc8\xd5\xec\xd3\x51\x8d\x78\xc7\x89\xb3\xec\x88\xcc\x1e\xc7\x71\x90\x81\xa0\x66\xde\xf2\x6c\x4e";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_170() {
    // edge case for computation of y with projective coordinates
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x42\xe8\x31\xd5\xdf\xd2\xb9\xf5\x38\x72\x63\xcd\x68\x6e\xe0\x3d\xfa\x23\x5c\xbc\x07\xf6\xf3\xa8\x7a\x7e\x81\x50\x55\x63\x62\xb3\
\x2b\xe4\x7f\x8e\x30\x11\x57\x28\x55\xca\x48\x7f\xfb\x59\x4f\x77\x22\xef\x9f\xc3\x29\x29\x02\xa2\x31\x46\xc1\x9b\xbf\x6d\xa7\x6a";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xe6\xd3\x99\x1e\xec\xb1\xa4\xb7\x8a\xa7\x00\xea\x56\x93\x4a\x38\x78\x5b\x36\x62\xc5\x97\x66\xe2\xee\x5b\x15\x7f\x77\xec\xbb\x7c";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_171() {
    // edge case for computation of y with projective coordinates
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x13\x21\x83\x8e\xfd\x80\xe1\xdd\x8e\x4d\x0d\x95\xd1\x78\x95\xc7\xdc\x60\x30\x3a\x5c\x23\x41\x82\xb5\x92\xd9\xd2\x1e\xf1\x47\x52\
\xa4\x4e\xaf\x33\x94\xc6\x37\x08\x76\x3f\x3b\x97\xb2\xd2\x86\x3f\xd3\xb7\x7e\xbd\xa4\x48\x62\xc7\xc2\x3d\xaa\xa4\x37\xd5\xfe\x59";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x99\xbf\xe7\x3e\xab\xa2\x59\x9e\x79\x30\x74\x88\x04\x72\x36\xde\x00\x3e\x9f\xd2\x6f\x5f\xf1\xdb\xef\x62\xb3\xfe\xc7\x5f\xd6\x12";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_172() {
    // edge case for computation of y with projective coordinates
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x24\x07\xbb\x2c\xef\x16\x14\x72\xcc\x79\x9d\xb1\x4e\x70\x31\x83\x67\x6f\x31\x2c\x57\x1e\x9f\x3d\xf1\x37\xf5\x5d\xf9\x44\x2c\x40\
\x77\xbf\x00\x50\x0a\xa7\xbe\xce\x8c\x1f\x76\x2f\xf0\x8a\x0e\xc7\x1b\xfd\xad\xfa\xf1\x33\x80\x70\x4e\x62\x02\xde\x62\xc5\xf2\x2f";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xfa\xed\xeb\x03\xf8\xb5\x17\x8d\xb5\x86\x04\xab\x69\xb1\x0b\x17\x6e\x92\xc5\xde\xcc\xf4\x24\x9a\x9d\x60\x01\x0d\xcd\x16\xa6\x35";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_173() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x24\x77\xb9\xec\x12\x02\x9a\x86\xf5\x0c\xd9\x5d\xda\x6c\xea\xd7\xa3\x4f\x1c\x23\x60\xf3\x9e\x3d\x11\x59\x79\x3c\x8e\xe6\x63\xa6\
\xbc\xfe\xd8\x5b\xd1\x9d\x4e\xd3\x85\x58\x07\x26\x7e\x39\x15\x64\x13\xb4\x1e\x39\xa7\x01\xd8\xd1\x7a\x23\xac\x68\x5f\xe5\x36\x0c";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x47\xe5\x85\x8a\xf9\x9e\x4e\x91\x60\x54\x89\x78\x07\xd6\x85\xc8\xcb\x8b\x0f\x16\x92\xba\x78\x2b\xec\x22\x90\xa5\x82\x48\xc6\x83";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_174() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xc8\x29\xd3\xa9\x9b\xb4\x7e\x42\x56\xfc\xc6\x32\x10\xc1\x32\x82\xab\x59\xe7\xaa\xe9\x08\x77\xb1\x79\x7b\xd6\x99\xd6\x72\xa3\x8b\
\x86\x96\xa0\x37\x30\x70\x42\x04\x89\x4a\xa9\x67\x27\x3c\x12\x0b\x57\xcb\xb7\x1f\x9f\xca\x62\xc6\x4f\x69\x2e\x7f\x49\x59\x8d\x2b";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xad\xe4\xff\x34\x37\xdf\x25\x46\x96\xfb\x2b\x19\xf5\x15\x41\x08\xd8\x8e\x77\x5e\x57\xd3\x45\xbb\xf5\x7a\x02\xb2\xab\xb3\xf0\x7a";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_175() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xfd\x61\xec\x55\x52\xfb\xb2\x4b\x57\x5e\xbd\xc9\xd4\xa4\x43\xe1\x56\xbf\xc0\xd1\x3c\x9d\xc6\x11\x14\x9e\x21\xd7\x9c\x48\xc4\x44\
\xb7\xb7\x3a\x8d\xbb\x83\xa5\xe2\x26\x7a\x8b\xcd\x39\x8b\x10\xaf\x08\x43\x47\x4c\x75\x02\x65\xe9\xd4\x8d\x04\xac\x4a\xb6\x04\x05";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x59\x89\x22\xa3\x53\xfe\x1a\xdd\x65\xac\x8f\x66\xfd\x22\x5e\x82\x6f\xa8\xce\x49\x34\x70\x32\x25\x93\x73\x5f\xc6\x62\x7e\x6f\x2f";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_176() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x9c\xd9\xe0\xf1\x7c\x11\xa1\x0f\x8a\xaa\x1f\x47\xea\x71\x41\xf6\x39\x9f\x40\xb0\x79\xb0\x7b\x14\xcd\x38\x8f\x3b\x6b\x0a\x47\xa8\
\xef\xc8\x69\x98\xf7\x17\xa8\x3e\x53\xc8\xe5\x8a\xd2\x3c\x71\xd0\xec\xc8\xbc\x84\x1b\xc1\x6f\xf2\x32\xa5\xe3\x26\x84\x4c\xd4\xc9";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x92\x3c\xca\x70\x6d\xeb\x11\xde\x7c\x17\xf8\xdc\x08\x9d\xad\xce\xe1\x50\x42\xd5\x61\x97\x32\xd9\xea\x53\x7f\x7d\xd9\x93\xfc\x31";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_177() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x38\x46\xb4\x07\x78\x22\x43\xfd\xf3\xb0\x40\x42\x99\x0b\x16\xe2\xab\xdb\x32\x5b\xa0\x98\x53\x28\x79\xd1\x4e\x16\xe9\x14\xc2\x74\
\xde\x57\x1b\xc4\xce\x2e\xdd\x7d\x2d\x37\xdf\x55\x93\x95\x9b\x5c\x7a\xb5\x9a\xc8\xfe\x5e\x06\xc4\x4b\xba\xe6\x96\x0b\x6c\x25\x10";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xbf\x62\x34\xcf\x4d\xe2\x04\x05\x48\xdd\x0e\xa2\xa9\x93\x10\x38\x9d\xb4\x8f\xe6\xc0\xeb\x81\x39\x5a\xb2\xd4\x24\x84\xf8\x41\xae";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_178() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xd3\xa0\x7a\x4b\x6f\x9b\x66\x0d\x92\xb3\xfe\x93\x7e\x2e\xbf\x91\xdd\xa8\x00\x5a\x7f\xfd\x02\x92\xda\xd9\x1d\x05\x92\xf1\xa8\x9e\
\xd7\x20\x95\x13\xbd\xe0\x02\x87\xb8\x23\x4e\x28\x0c\x00\xb3\xc5\x9d\xc5\xe3\x33\xc8\xc5\x68\x64\xbb\x6c\xfb\x36\x4e\x3f\x2d\x85";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xda\x22\x3b\xd7\x33\xd4\x03\xe2\xf2\xf9\xf5\x9f\xf7\x12\x23\x0b\x0a\xb7\xfe\xaf\xc8\x7d\xc7\x02\x16\x44\x56\x9e\x3d\x51\x37\x95";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_179() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x2a\xd9\x55\x07\x28\xf6\x5b\x14\x2e\xd6\x76\x43\x8b\xaf\xe8\x0e\x36\x5c\xff\x4e\xb5\x57\x52\x65\x60\xe4\xad\xfd\x69\x6d\xa7\x78\
\xf0\xf0\x1d\xa8\xe9\x47\x62\x83\x46\x61\x4e\xd7\xfe\xfe\x24\x90\x1f\x9e\xee\x79\xde\x6d\xc0\x6d\x85\xd5\x63\x72\x2e\xc7\x79\x61";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xfb\x88\x8d\xf1\xc3\x4b\x3f\xf1\x56\x20\xb9\x4a\x20\x72\x69\x54\xeb\x79\x89\xe6\xf8\xa2\x66\xee\x49\x02\xf4\x5e\x7e\x86\xe2\x1a";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_180() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x19\xf5\xf0\xb4\xed\xd6\x12\x4e\x34\x0a\xdb\xcc\xe7\x91\xb0\x6d\x14\x05\x4c\x7e\xb1\xf9\x91\x4b\x44\x24\x5c\x51\xd6\xc1\x10\x1d\
\x82\x30\x4d\x11\x7f\x72\x9e\xf0\x6d\x97\xeb\x56\xae\xb9\x9a\x62\x22\xdc\x3d\xe5\xe3\x0c\x07\x19\x56\xfd\x73\xee\x8c\xdb\xeb\x81";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xc6\x56\xa2\x7f\xc4\x80\x53\xf9\xbc\xfa\x3a\x24\x0f\x90\x4b\xe7\x69\x54\xcc\x8b\x8c\xb3\xf4\x79\x06\x13\xe6\x18\xc5\x06\x9d\xdb";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_181() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x44\x85\xdc\x2f\xbc\x68\x07\x9c\x35\x7a\x04\xda\xa6\xd5\x30\x6c\xc7\x88\x27\xb0\xfa\x64\x93\x57\x47\xb9\x81\x23\x00\x9b\x26\x60\
\x52\x58\xc4\xa5\x60\x83\x15\x00\x7d\xb0\x8c\x27\xba\x86\xc8\x97\x1b\xdd\xc5\x29\xd1\xc1\x4e\x66\x47\x8e\xf7\xfd\x92\xb3\x3a\xe0";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x59\xe1\x68\x70\x1d\x96\x76\x74\x2f\xd2\x03\xe9\xff\x35\x7d\xfa\xfb\xbe\x51\xec\xcb\x27\x97\xf7\xbb\x41\x6d\x4a\xe2\x1b\xad\x99";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_182() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x2f\x98\xfd\x0d\xc4\xb3\x78\x07\xd9\xb1\xdd\x01\x5a\x08\xa9\x0d\xc9\x0c\x08\x80\x14\xd1\x30\x5e\x49\x01\x7b\x60\xd5\xb0\x7e\x0e\
\x1e\x8e\xc8\x78\x73\x12\x77\x19\x3c\x54\x99\x13\x53\xd1\xa4\x24\xa1\x15\x3b\x87\xbf\x2c\xf2\x53\x09\xc7\x40\x32\xfd\xc7\x3f\x95";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x7f\x19\x65\x2f\x30\x77\xe7\x3a\x96\x77\xfe\xe2\x1d\x0c\xba\xd2\x99\x14\xe3\xbb\x02\x70\xfe\x77\x50\x0c\x4c\x0a\x9d\xa8\xee\xb8";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_183() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xdf\x1a\x49\x93\x87\xec\xe4\x23\x21\x5b\x04\x1d\x19\x07\x6b\x61\x90\x2d\x31\xbe\xc5\x13\x59\x10\xb9\x0d\x88\x19\xdf\x3b\xd2\xfe\
\x9a\x9b\xff\xe9\xf1\xb6\x8a\xca\xb7\xf5\x7f\x9a\x19\xca\x58\x20\x38\x9f\x1d\x73\x53\x3d\xd7\x3f\x65\x32\xd6\x96\x52\x33\x6f\xb7";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xb1\xc7\x91\x05\xff\xd4\xb5\xf4\xf9\x2c\xe3\xa5\xf5\x56\x24\xfd\x2a\xac\xe8\xee\xe3\xb8\x0f\x54\x38\xc8\x41\x9c\x55\x05\x1a\x7d";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_184() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xb8\xc2\xc4\x7d\x8c\x6d\xd3\xbd\xee\x17\xa5\x80\x81\xcb\xa3\x59\xe8\x6e\xf4\xe1\x9b\x36\x8d\x46\xed\x5e\x43\xfb\xe0\x74\xb0\x8c\
\x9b\x30\x31\xb7\x75\x6e\x74\x60\x99\xd2\x2c\x98\x5e\x9f\xd6\x21\x35\x19\x18\x6a\xcb\x53\x7f\xe4\xbc\xdb\x69\xf5\xf3\xa0\x19\x68";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xe1\xf3\x3b\xe4\x62\xde\xd1\xd1\x21\xdd\x2a\x15\xd4\x13\xfb\x8b\x9a\x10\x59\x22\xcb\x90\xc5\x50\xab\xe7\xdd\xf3\x52\x26\x6c\x75";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_185() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x21\xa3\x4e\xeb\x4e\x1e\x2e\xd7\xe4\x54\x6a\x81\x44\xa8\xd1\xc8\x3e\xd6\x4f\x33\x18\xf7\x2f\x7a\x2d\x78\x63\x16\xbd\xb5\xe9\x74\
\x12\xa8\xcf\xaa\x2f\xac\x86\x29\xfa\x7e\x20\xd9\x22\x9f\x35\x66\x2f\x5d\x05\xea\x8c\xd3\x88\x36\x53\x7d\x16\xc1\xa6\x46\x05\xaa";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x04\xb2\x95\x92\x95\x82\xf1\xa5\x27\x33\x46\x62\x3d\x9d\x07\xfa\x43\xc6\x54\xe9\xb1\x56\x42\x44\xdd\xf8\x2d\x61\x79\x3f\xec\xb8";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_186() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x7e\x99\x06\x20\x2c\xd1\xab\xf7\x14\x70\x27\xc8\x64\x7b\x3a\x58\x16\xb3\x63\x26\x63\x26\x80\x4d\x6d\x59\x6e\x87\x5f\x02\xe1\xe6\
\x86\xa9\x81\xef\x38\x87\x1a\xd5\x9f\x42\x78\x15\xce\xdc\x1a\xea\xd3\x39\xc9\x0d\x61\xda\x12\xb0\xf7\x27\x5f\x40\x84\x76\x1a\xfb";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xbc\x33\x39\x0a\xc6\x4b\x08\x2b\xb0\xf2\xec\x68\x9f\x23\x9e\x59\x31\xa5\x44\x83\xe7\xac\xae\x90\x44\x2a\x94\x01\xc3\x64\x52\x23";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_187() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xbc\x21\x00\x4d\x79\x9e\xcb\x47\x32\x53\xe3\xed\x07\xb4\xaf\xf2\xd3\xca\x90\xf1\x29\x43\xa7\x6e\x9e\xbd\xcd\x49\x31\xc4\x38\xea\
\xa9\xb6\xe2\xc6\x83\x4b\xfb\xe5\x6f\x4c\x4e\x5e\x22\xb1\x25\x81\x4d\x83\xf2\x97\x3d\xcd\x64\xdc\x7f\x51\x93\x95\x74\x00\x2f\xac";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x5a\x0c\x1a\x2a\x33\x17\x6d\xcb\x56\x64\x5a\x35\x48\xff\x70\x9e\x31\xc3\x70\x67\xe5\xef\x96\x9d\x23\x0c\x1b\x19\x27\xd7\x5d\x62";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_188() {
    // edge case for computation of y with projective coordinates in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xca\x6b\x6e\x4e\xda\x95\xcc\xcd\x6c\xc8\xe1\x6c\x3c\x6c\x74\x8e\x2a\xcb\xe3\x1b\x70\x52\x9b\xcb\x69\x44\x5c\x11\x40\xe6\x3e\x25\
\x83\xcf\x3c\x33\x72\x36\x59\xb2\xe3\x03\x05\x1c\x3c\x1e\x9f\x70\x2f\x9f\x27\x42\x1f\x6b\x34\x57\xe3\x77\x35\x60\x18\x48\x9b\x46";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x7c\x6a\x5a\x4a\x56\x08\xae\x11\xac\xda\x62\x92\xf6\xd3\xb0\x5b\x71\x53\x87\x7d\xd6\xe1\xad\x91\x4f\xf5\xe3\x55\x0f\x45\x76\x61";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_189() {
    // edge case for computation of y with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x88\x4c\xf0\xd1\x7d\xf4\xef\x5e\x48\x8d\x72\x5b\x47\xd0\x69\xcd\x2b\x99\x94\x0b\x05\xb2\x6e\xfc\xd5\x5d\x0e\x5e\xcd\x20\x5b\x61\
\xe3\xb1\x91\xa7\xf9\xf9\x20\xcf\xab\x05\xb0\xf9\xcd\xdd\x02\xfe\xcf\x85\x7d\x0e\x40\x5c\xa3\x6f\x01\x06\xaa\x36\x7d\x49\x24\x60";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xd9\x90\xca\x49\xc9\xb4\x14\x81\x86\x22\xb9\xc6\x91\x97\xfc\xcb\x19\x7c\x94\xbd\x1c\xe1\x3c\x24\x11\x0e\x94\xc5\xc3\x21\xe2\xc9";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_190() {
    // edge case for computation of y with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xb1\xe5\xae\xc6\x27\x2d\xbb\x85\x64\x17\xe7\xce\x61\x02\xba\xce\x3e\x0d\xd7\xc3\x23\x86\x51\x1e\x06\x5c\x1a\x32\xd5\x68\x8f\xc5\
\xc0\x78\xaf\xf9\x4b\x8e\xac\x78\xbd\xb5\x4b\x21\x0b\xc7\x46\x76\xd2\x33\x6a\xb7\xbc\x72\x36\x80\x82\x91\x54\x0f\x65\xc8\x29\x82";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x97\x3a\xf5\x3e\x8a\x92\xe7\x46\x98\x56\x26\x52\x29\xac\xbb\xe0\xad\xb5\x57\x4b\xeb\x32\xea\x67\x80\xbe\x38\x5b\x28\xae\x8b\x07";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_191() {
    // edge case for computation of y with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xff\x8d\x38\xf6\x1f\x63\x3c\x5e\xb5\x70\xef\x87\x7e\x61\xb4\x46\x6b\x51\x1e\xcc\x3d\xc3\xde\x87\xe6\x22\x4a\x8c\x78\xc0\x89\x3d\
\x71\x53\xd4\xf8\x7b\x7f\x9d\x04\x88\xb6\x58\x8d\xf5\x6c\x99\x34\xae\x75\xd1\x48\x6c\x1e\xbd\xb4\x94\x44\xba\xd8\x32\xd0\x80\x17";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xd9\xfd\xde\x34\xe4\x8c\xad\xf6\xe6\x3c\x1d\xe8\x4b\x22\xda\x71\x80\xac\x64\x4c\x42\xc0\x55\xd2\x86\x25\xb2\xbf\x11\xcf\x49\x51";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_192() {
    // edge case for computation of y with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x4c\x38\x1e\xf0\x30\x2e\x1b\x42\x8f\x48\x87\xf7\xb4\xfd\xe4\x96\x02\x45\x92\x0f\x40\xc4\x00\x56\x69\xa0\x91\x64\x4c\x27\x48\x2b\
\xef\x73\x9b\xc3\xa3\xd2\x2c\x6e\x70\x75\x57\xf2\x46\x9f\x50\x4a\xea\x9e\x8a\x07\x59\x17\x76\xb3\x32\x4b\xeb\x5c\x49\x8e\x6f\x55";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x9d\xda\x17\xa9\x1a\xd4\x4d\x47\x23\x04\xc8\x05\xb3\x50\xf9\xee\x55\xde\x2d\x94\xd7\x32\x71\x60\xdb\xc5\x0e\x2e\xaa\x85\xe4\xe8";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_193() {
    // edge case for computation of y with projective coordinates in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x24\x5a\x53\x0c\x56\xd0\x79\x78\xf9\x11\x77\xe8\xd9\x7c\xb1\x36\x85\x46\xba\xfe\xfb\xf8\x14\x8c\xef\x33\x9f\xe7\xbb\x65\x2b\xa5\
\xb2\x7a\x60\xed\xd2\xf4\x98\xca\x63\x69\x96\xa9\xe5\xe6\x29\xd5\xc9\xec\x20\x32\x17\xc1\xb5\x40\x2f\xf9\x9a\x0d\x2f\xa9\x7c\xad";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x7a\x69\xb8\xde\x61\xda\x48\xf9\x90\x1f\xf4\x40\x19\x2f\xc9\x00\x86\xc3\xa2\xbb\x56\xbd\xb2\x24\xa5\x5b\x89\xcb\x82\xc7\x21\x62";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_194() {
    // edge case for computation of y with projective coordinates in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x3c\xc5\x66\xa2\x30\xb3\xdf\x27\x2a\x17\x2c\xd8\x0f\xb4\x81\xcf\xdb\x8d\xd1\xc2\x7a\x84\xdb\xb7\xa3\x91\xf1\x14\x84\xf1\x4e\xf9\
\x9b\xe9\xd4\xcf\xd3\x37\x48\xee\x15\x76\x25\xf8\x09\xd0\xfb\xc1\xa6\xf0\x31\x7d\x97\xdb\xfe\xda\x49\x99\x74\x24\x55\xfd\xf7\x8e";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x76\xa4\x00\x6d\xb3\xde\x3e\x09\x89\x36\xd0\x04\xca\xc1\xf7\xaf\x41\xd5\x15\xf7\x53\xb9\xaa\x44\x33\xeb\x24\x66\xda\x42\xac\xfc";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_195() {
    // edge case for computation of y with projective coordinates in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x45\x5f\xc1\x39\x90\x66\x3b\xf2\x4c\xf5\x90\x8c\x59\xe4\xc3\xa0\x84\xfc\x39\xee\x1a\x7b\x14\xd8\x12\xc2\x27\xa8\xda\xbd\x6f\x94\
\x68\x5d\x00\xad\x60\x4b\x20\x6d\x59\xb2\xf4\xd9\xa7\x54\x42\x08\x3b\x85\xa3\x16\xda\xb7\x85\x74\xa3\xbb\xaa\x62\x59\xe8\x9a\x3e";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x3b\xe9\x2a\x85\x7f\xfb\x42\xc5\xd5\xc1\x28\x92\x5b\x89\xae\xc3\x4c\xfe\x64\x99\x20\xdf\xd6\x47\xf0\xa0\x3f\x42\x1f\xb2\x0f\x09";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_196() {
    // edge case for computation of y with projective coordinates in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xf9\x33\x57\x8f\xd1\x93\x8e\x44\xb2\x71\xae\x43\x1f\xfd\x0d\xf5\x54\x84\x96\x94\x5d\x91\xcb\x8d\x31\x1e\xbe\xc9\xdd\x50\xd0\x36\
\xf3\xd8\x8f\xa2\xaa\xe4\x23\x6c\xb0\x88\x58\x15\x8d\x72\x5e\x12\x13\xfd\xb9\x82\x50\x3b\xc9\x10\xa5\xb5\x83\x66\xcd\x85\xee\x0e";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x19\xe0\xd4\x12\x57\xcc\xbe\xe1\xc4\x53\xf8\x34\xfa\x5f\x34\x9c\xd9\xbb\xb9\x8a\x92\xe8\x48\x35\x4a\x75\x79\xdf\xd2\xc7\x8e\x30";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_197() {
    // edge case for computation of y with projective coordinates in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x56\x06\xcb\xf0\xc5\xb5\x2f\x0f\x46\x41\x37\xd0\x13\x35\x59\xfe\xa5\x0a\xf2\x71\xa9\x82\x6f\xf6\x12\x57\x46\x63\x6d\x98\x18\x50\
\xd7\xb1\x0d\xab\x8e\x64\xb2\xf8\xdf\x6f\xaf\xb8\xd5\x94\x3e\x7b\x37\xc6\x50\x0f\xa9\x5b\xfd\x66\x80\xd8\xf2\xff\x74\xc4\x40\x7a";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x3a\x7a\x54\x99\x60\x53\xb4\x13\x61\xb6\x05\xe7\x38\x52\xa5\xa0\xb1\x7d\x85\xb4\x2b\x3c\x4a\x6f\x11\x9c\x6c\x87\xeb\xeb\x9f\x03";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_198() {
    // edge case for computation of y with projective coordinates in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xbf\x23\x64\x50\xef\x33\xbc\xef\xfb\xb9\x0e\x0b\x86\xf8\xe9\x9d\xea\xa1\x33\x7c\x89\x82\x63\x63\xb3\xcb\x4e\x0a\x66\xd5\x41\x03\
\x06\x76\x70\x3a\xfc\x89\x2b\x80\x59\xc9\x2e\x24\xf6\x53\xb9\xcb\x2a\x11\xa5\xf5\x20\xc8\x48\x30\x3c\x17\xc2\xc4\x86\x00\xc8\x4c";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x72\xf0\x42\xa5\xb2\x76\xa9\x80\xd5\x0a\x05\x83\x48\x3e\xed\xa7\x2d\xe8\xac\x79\x6b\x1d\x50\xa8\x43\xb4\x55\x2a\x15\x1e\x19\x9d";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_199() {
    // point with coordinate x = 0
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x66\x48\x5c\x78\x0e\x2f\x83\xd7\x24\x33\xbd\x5d\x84\xa0\x6b\xb6\x54\x1c\x2a\xf3\x1d\xae\x87\x17\x28\xbf\x85\x6a\x17\x4f\x93\xf4";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x40\xea\xfb\x85\x0c\xa7\xe0\x8f\x19\xee\x64\x47\xf1\x96\xae\xab\xf2\x92\xe2\x73\x97\x85\x6e\x10\x6e\x60\xa6\xc8\xb4\x8c\xdb\x27";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_200() {
    // point with coordinate x = 0
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x81\xbf\xb5\x5b\x01\x0b\x1b\xdf\x08\xb8\xd9\xd8\x59\x00\x87\xaa\x27\x8e\x28\xfe\xbf\xf3\xb0\x56\x32\xee\xff\x09\x01\x1c\x55\x79\
\x8c\xd2\xf1\x99\xd9\x81\x5d\x75\x85\x07\x30\x34\xeb\x76\xc9\x3d\x50\x79\x9b\x35\x4b\x0f\xb1\xe7\x7e\xb7\x5e\xba\x8b\xff\x3d\x58";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xb4\x85\xf3\x36\x43\x54\xb7\x38\xdc\x54\x02\x72\x9b\x88\x0c\x90\xc5\x02\xd9\xab\x52\xcc\xf8\x1e\x3d\x21\x60\x2c\x7b\x9b\xd9\x09";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_201() {
    // point with coordinate x = 0
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x61\x4d\xcf\xbe\xa4\x78\x9a\x3f\x3e\xb4\xa8\xe2\xf1\x11\xc8\x87\xf0\x24\x8d\x93\x16\xb9\x9d\x08\x64\xc9\x27\xa0\x45\xd6\x94\x17\
\x53\xa0\x73\xbe\xfe\x08\x49\x1a\x80\x50\xa4\xd9\x6d\x08\xba\x47\x90\xae\x18\xdb\x3e\xf7\xf0\xea\xcc\xf5\x9c\xe1\x09\x5a\xfc\x54";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x42\x07\xbf\x41\x59\xfa\xa0\xe5\x0e\xd2\x38\xb9\xc0\xff\x46\x19\x4a\x53\x9a\x1b\xa0\x3a\x5a\x4c\x8d\x68\xf3\x69\xae\xcd\x31\xa5";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_202() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xdb\xfa\x46\x6f\x12\x01\x32\x55\xf9\xd5\x7a\x64\x96\xc1\x58\xee\x7d\xd2\x02\xa1\xce\x4a\x5a\x53\x00\x5b\x35\x64\xd5\x09\xa0\xbb\
\xf2\x57\x80\x07\xe8\x57\xbd\xd0\x82\x75\x1e\xf2\xf3\xb4\xb9\xc3\x8a\x0b\x87\xba\xb4\x13\xd5\x5c\xcb\x26\xa5\x74\xf2\xb4\xbe\x9d";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xe2\xd5\x7e\xee\xc9\x83\x75\x6c\x91\x24\xf8\x85\xa4\xd1\x18\xed\x5b\x8d\xe7\xd2\x89\x5f\xd9\x12\x64\xcf\x29\x14\x96\x94\x9a\x12";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_203() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x82\x38\xf0\x48\xc2\x92\xe0\x8d\x49\xbd\xb5\xda\xb1\xf0\x8d\xa6\xd3\x9c\xdb\xef\xb1\xd7\x5e\x03\xe7\x60\x48\xb9\x03\xd6\xba\xf9\
\x38\x9e\x4d\xa4\x04\x0f\xbe\x20\x19\xa1\x46\x1f\xec\x3c\xc9\x04\x03\xc9\xbe\xcc\xca\xa0\x2e\xf5\x79\x3d\xa7\x21\xc1\xe6\x57\xa8";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x81\xfa\x8c\xa5\x0a\xc1\x55\x20\x0d\xe4\x10\xdf\xdf\xd8\x09\x30\x37\x67\x4b\xab\xa7\xca\x10\x28\x28\xa5\xd0\x02\x6f\x24\xf0\xf5";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_204() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x2d\x08\xcf\x12\x30\x46\x3b\x71\x02\xe8\xa5\x41\x85\x98\x6a\x62\xa3\xf2\x52\x0c\x0c\x15\x1a\xce\x12\xf5\xd0\x73\xa4\x0c\xbb\x2f\
\x13\x47\x3d\x11\xf5\x8d\xde\x7b\x16\x78\x30\x83\xcd\x53\x3b\xde\xcc\x09\x22\x49\xdc\xf1\x5b\x72\x3f\x08\x39\x4a\x5b\xc5\xb3\xf0";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x15\x14\x11\xc3\xb8\xe6\xd2\x5c\x51\x51\x86\xc1\xd9\xb9\xc6\xe1\xa0\x5d\xa5\xa7\xf0\x9c\xd4\xea\x88\x44\xe0\x91\x68\x46\xba\x48";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_205() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x6e\x89\x66\xa6\x01\x3d\xde\x2b\xb3\xb2\xa2\x8c\x6e\xb0\x13\xc4\x81\xdd\xb7\x24\x9e\xf1\x9d\x73\xb9\x2d\xa3\x5c\xad\x1d\x6f\x14\
\x60\x4b\xf4\x3d\x79\x8a\xe2\x76\x21\xdf\x2e\xdd\xc8\xf5\xd9\x0e\xe0\x28\x9c\x54\xbb\xac\x82\xb3\xc5\x26\x4c\x47\x87\x61\xd1\x53";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x54\x60\xbb\xc8\x67\xf4\xf6\x1b\x79\xed\x49\x1e\x41\x77\x9e\x2a\xc8\xde\xa2\x7e\xc1\x32\x0b\x55\x8f\x3c\xff\x5b\x6a\x94\xc2\x24";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_206() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x4f\x61\x2e\x02\x52\xb8\xd4\x84\xbd\x26\x57\xa9\xca\x1b\xba\x22\xaf\xe9\x78\x46\x6a\xae\x6f\x12\xbf\x1d\x91\x71\xe0\x16\x83\xca\
\x48\xf4\xf3\xc9\x86\xbf\x94\x1b\x52\x38\x89\xa7\x58\x3f\xae\x69\x5d\x3d\x4e\xa4\xad\xfb\x57\xd0\xc8\x23\x70\xfd\x82\x36\x4c\x1e";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xa7\x8a\xc2\x66\xfc\x5a\x85\x10\x2d\xb7\x81\x80\xbd\x9a\xe4\xb7\x70\x39\xec\x97\x39\x1a\x21\x14\x03\x32\x2e\x4d\x56\xb5\x90\x49";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_207() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xe8\xb7\x82\xda\xb2\xdb\xa4\xdb\x06\x66\x70\xae\x65\x6c\x7e\xca\x4a\xbc\x7b\x1a\x24\xc7\x97\x6d\xe2\xce\x02\xf2\x5b\x66\x84\x13\
\xbd\xa2\xf9\x99\x1a\xd7\xaa\xf4\x44\x37\xbf\xdd\x3d\x91\xc8\xf9\x41\x78\xcd\xe0\xf8\xaf\x98\x33\x54\x4c\xcc\x9e\x2d\x60\x6b\x8e";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xf4\x81\xae\x23\xb9\x19\x21\x91\xe8\xe1\xc4\x72\x03\xf6\xa8\x07\xe5\x4e\x1f\xf4\x71\xe6\x64\x27\x16\xf0\x78\x95\xb3\x2f\x44\x51";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_208() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x13\x50\xca\xc3\x74\xbb\x07\x6e\xe8\x9e\xb8\xaf\x43\xd0\x76\xaf\xc7\x31\x20\x21\x00\x64\x31\xfd\x90\x9d\x22\xdf\x06\x4f\x66\x37\
\xdb\xb0\xdc\x94\x9a\x18\x3e\x39\x87\x09\x35\x3d\x26\x4b\x13\xc4\x26\x66\x53\xe8\xa8\x68\x5d\xd8\x30\xff\xaa\xd2\x95\x5a\xe9\xc5";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x1d\xe1\x65\x6d\x96\x1d\xe1\xf5\x84\xa2\xf7\x17\x9b\xd3\xbe\x3b\x4a\x28\x2c\xbd\x32\x48\xf2\x9e\x74\xb7\x3a\x81\x2c\xad\x8d\x90";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_209() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xec\x62\x4c\xda\x95\xaf\x66\x33\x08\x8f\x98\x09\xe4\x41\x10\x43\x22\xff\x52\x9e\x09\x52\xaa\xd4\xef\xe3\x28\x62\x03\xe0\xc7\x00\
\x39\x6b\x89\xe7\x16\x8b\x1d\xa4\xda\xb1\x23\xaa\x6e\xb7\xed\x60\x06\x9d\x07\xb2\x41\xd6\xff\xf4\xba\x04\x64\x7e\x4f\xcc\xf1\xa9";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x50\xb1\x39\x20\xc2\x36\x8b\x9a\x2e\x8c\x80\xa0\x2a\x6f\x4e\x4a\x2f\x84\xaf\x33\x53\x2e\xaf\x57\x28\xda\x16\x1e\x62\x0a\x31\x2a";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_210() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xd8\x0a\x50\x8b\x15\x5f\x0c\x73\x39\x36\xd5\x23\x20\x1b\xde\x33\x97\x94\x41\x78\x58\xcd\x4a\x34\xb6\x85\x63\x51\x38\xdd\xcf\x67\
\xb4\xaf\x7e\xb4\x7f\x6a\x84\x91\xc9\x14\x7b\x49\xba\xbc\xdd\x65\x38\xe0\xa1\x26\x54\x74\x93\xcd\xcb\x7e\x8c\x90\x0d\x48\x33\x7f";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xe5\x97\xc3\x9f\xd4\x26\x49\x41\x8b\xb4\x9e\xca\x83\x58\x96\x45\xdf\x32\xff\x1b\x3f\x34\x17\x08\x7c\xcb\x3e\xe5\xbf\x38\xfb\xf5";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_211() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x0c\xb0\x5c\xb7\xa4\xb0\x1d\xb1\x38\x26\x20\xca\x75\x62\x85\xe1\xa7\xc6\x84\x6b\xbb\x59\x5c\xbb\xac\x9f\x89\xe0\xa6\x24\x89\xcc\
\x57\x77\xd6\x35\xa0\x94\xd1\x7f\x78\x2d\x1e\x3c\x58\xbb\x0b\xe2\xc1\x43\x67\x06\xfe\x8b\x74\xed\xb7\xb9\xd4\xca\xfd\xa9\x5a\x17";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x01\x03\x85\xfd\xf7\xf4\xc6\x40\x2a\xe4\x32\xe4\xb2\xf1\x1f\x2f\x86\x1c\x75\xc4\xdd\x27\xb4\xf3\x5b\x7f\x1e\xfa\x94\xbb\xee\xcf";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_212() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x72\xab\xa1\x8b\xcc\xce\xa8\x49\x09\xfa\x72\x48\x88\xc2\xd1\xd0\x07\xb1\x1c\x97\xe0\x2f\x61\xe4\x4b\x12\x5b\x40\x2a\x11\x04\x1a\
\x3c\xa1\xfa\xea\x5f\x02\xdd\x5f\x13\x27\xd5\x02\x8d\xe7\x0e\x78\xc8\x1b\x05\x33\x8a\x2b\x2e\x3d\xa5\x09\xf0\x8e\x2b\xd9\xea\x3f";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x56\x96\xfa\x19\x9e\xf1\x08\x8f\x88\xc8\x97\x9d\xb2\x57\x21\xd0\xa7\x07\xeb\x7a\x51\xbf\xd9\x7a\x12\x78\xbc\xfd\x43\xb3\x83\x04";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_213() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x27\x6e\x45\x46\x1a\x0e\x00\x70\x4b\xee\x88\x3b\x3e\x61\x01\x6e\xec\x41\x67\x8d\x81\x76\xd3\x7e\xba\x25\x55\x7a\x74\x02\x84\xe0\
\x5a\xb0\xfd\x1b\xf9\xfd\xac\x37\xfa\x83\xf8\x3f\x51\x56\x64\x8b\xb0\x36\xd6\xce\x46\xff\x1f\x6a\xd4\xc7\x2b\xc9\x53\x21\x4f\x0f";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xea\xb6\x38\x13\x80\x7e\xec\x13\x8a\x69\x6b\xe8\xb9\xe0\x02\x3d\xd3\xc6\xce\xe3\x5b\x73\x78\x17\x4a\xac\x70\x83\x88\x66\xc2\x16";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_214() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xec\x90\xe4\x5d\xb5\x7b\xc0\x1f\x74\xd7\xd0\x1e\x87\x83\x93\x77\x23\xf8\xe2\x7b\xa9\x95\x41\x69\x8e\x01\xc5\x7c\xd2\xa3\x9d\xa0\
\x93\x3b\xfd\x2d\x11\xd3\x1a\xf9\xcb\xa4\xc5\x3a\xea\xbe\x6a\x36\x35\xa0\x64\x3c\x11\x4a\xfa\x10\x9a\xda\x02\x00\x42\x86\xae\xa1";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xc9\x82\xc6\xd7\x3a\x93\x07\x03\x8b\xbe\xd2\x50\x36\x9a\xca\x65\xa7\xe3\x92\xbf\x15\xf4\x40\x22\x7e\xb9\xfe\xa4\x3c\xc4\x75\x6e";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_215() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x28\x99\x3d\x7c\x18\x77\x0e\xec\x44\x18\xc1\x6d\x59\x59\x87\xc1\x96\x41\x2f\x7b\x27\x3d\xa4\x41\x36\xb1\x9d\x4b\x51\x6a\x2a\xc7\
\xb9\xba\x35\x74\xa3\x11\x69\xd3\xf2\xf7\xa6\x27\x58\xd9\xd2\x7a\x2a\x4f\xea\x90\x4b\x24\xd4\x23\x12\xa9\xeb\xfb\x49\xae\x35\x5a";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x55\x81\xa9\xf0\x97\x1c\x60\x70\x9e\xba\xf5\x3b\x1f\xeb\xd6\xe0\xd1\x74\x66\x4b\x82\xa3\x66\x92\x65\x69\x53\x50\x7c\x0f\x6d\xc9";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_216() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x3e\x48\x51\xb2\xb0\xd1\x46\x3b\x9c\x90\x77\x2e\x10\xfe\x8c\xf2\x9b\x18\x14\x63\xde\x28\xe9\xcf\x81\xb4\xc9\x60\x49\x31\xa4\xda\
\xbd\xe2\x52\xd0\x7c\x10\x61\xe6\x0f\x4f\x8c\xba\xe5\xc2\xa2\x90\xc0\x34\x43\x8a\x06\xa8\xba\xc6\x7b\x1e\xce\x8e\xd5\x51\xa2\x34";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xc7\xdf\x69\xb1\xbc\x48\x48\x04\xa3\x68\x34\x49\xc3\xa2\x28\xff\x78\x73\x87\xd5\x66\x72\x58\x81\x40\xc9\x80\xb1\xfd\x47\x65\xe2";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_217() {
    // point with coordinate x = 0 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x3c\xed\xff\x36\x09\xbd\x11\x39\x7e\xd3\xac\xa8\x4a\x0a\x7b\xff\xd0\x09\xd4\x8b\xea\xb1\x00\x71\x9c\x76\x07\xed\x28\xe5\x61\x24\
\xa1\x5f\x6a\xf6\x27\xe0\x3f\x57\xa9\x80\x12\xfb\xa1\x83\x21\xb1\xdf\xf6\xc2\x4f\x51\xd7\xb6\x41\x5d\x10\x26\x08\xb7\x72\xa4\x4e";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x97\x3c\x07\x89\x16\xec\xc4\xc6\x60\xaa\x00\xdd\x4e\xc1\xe1\xdf\x87\x93\xcb\x7f\x86\x70\x76\x6a\x51\x56\xf8\x34\x40\x88\x00\x2f";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_218() {
    // point with coordinate x = 0 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x41\xe9\xd4\xcf\xa8\xef\xe8\x0b\x89\x5a\x8c\xbc\xce\x25\x68\xe2\x51\xdb\x7e\xcd\xfd\x20\xa7\xad\x71\x0d\x4a\x4b\xf2\xad\xdc\x6b\
\x5e\xc3\x6a\x83\x39\x16\x8a\x03\xf1\x5b\x8c\x80\xf2\xa2\xa8\x28\xf1\x51\xd3\x87\x91\x58\x48\x53\xba\x2f\xf4\x4a\x2a\x04\x60\xa1";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xb4\x8e\x11\x9d\x29\xee\xf7\xdb\xb7\x6b\x64\x21\x8e\x72\x8d\xdb\xf6\xec\x60\x05\x05\xec\x7c\xed\x6a\xb6\xfb\x87\x63\x30\x8d\xa5";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_219() {
    // point with coordinate x = 0 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x77\x6a\xef\x1a\xcb\x82\xb6\x28\xe1\x32\xcc\x29\x44\x09\x88\xf0\xa1\x5d\x4c\xc2\xb4\xf3\x28\xae\xcb\x06\x3c\x9b\x86\xe5\x01\x8e\
\x6e\x44\xdf\xc6\x04\x44\xfa\xa9\xc4\xe3\x6b\xc2\x17\x45\x1f\x7a\xc2\x95\x6c\xb3\xb2\xe9\xbb\xd6\x55\xeb\xa2\x97\x16\x3d\x1f\x34";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x28\xa8\x8b\x6b\x25\x8f\x23\x30\x20\xba\x6f\xa9\xc0\x0d\x1d\x72\x83\x1f\x45\x15\xb8\x69\x66\xa9\x78\x2f\x52\x13\x15\xe1\x8a\xa7";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_220() {
    // point with coordinate x = 0 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x9e\xc0\x6b\x0b\x08\x66\x2c\x0e\x1d\xd9\x11\x16\x96\xa6\x3a\x16\x01\xcc\x83\xce\xe2\x06\x95\x77\x8a\xdf\x84\xd4\x30\x64\xfc\x90\
\x15\x60\x01\xf0\x84\xcd\x3c\x1d\xf1\xa0\x87\xf6\x26\x53\x3b\x65\x72\x58\x48\x89\xbd\x3d\x5c\x2c\x99\xf0\xe3\x11\xe2\x2b\x41\xe6";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xc4\xff\x86\x5f\xf3\xdc\x49\x53\xea\x78\xd9\x2a\x02\xf3\x34\x5a\x53\xbd\xb6\x05\x0c\xfd\x8f\x41\xba\xa4\x39\x5e\xcb\x6a\xca\xb8";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_221() {
    // point with coordinate x = 0 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xfa\x51\xd1\x28\xad\xc2\x00\x0f\x09\xff\x12\xc6\xfd\x8e\x25\xaa\x08\x55\x6d\x70\x8b\xf6\xb0\xff\xff\x9e\x8e\xaa\xd4\x78\x3f\x0d\
\xe2\x2b\xf5\x29\xe5\x16\xe1\xf6\x4b\x8e\x0d\x09\xf9\x8f\xad\x4e\x50\x16\x95\xa9\x30\xa1\xb2\x20\x76\x65\x9d\xa7\x07\xe3\xcc\xd0";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xde\x10\x69\xf0\x51\x63\x7e\x10\x16\x65\x59\xce\xf4\x46\x88\xaf\xc8\x09\x34\x18\x55\x26\x12\x15\xc4\xf3\x81\xd9\xd7\xda\x76\xca";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_222() {
    // point with coordinate x = 0 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xef\xe7\x75\x4e\xd4\xc0\xb3\xc1\xdd\x30\x1b\xc1\xed\x69\x80\x0a\xa2\xff\x5d\x51\xfb\x85\x93\x77\x15\xe6\x0d\x2e\x7b\xca\xda\x8e\
\xb1\x58\x1a\xb7\x5f\xb3\xc7\x97\xef\x94\xa9\xdb\xa3\xd8\x25\x68\xc8\x46\x17\xea\xf3\xfa\x04\xf2\x79\xfb\xfd\x89\x8f\x70\x46\x04";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xb5\xa0\xec\x92\xae\xcc\x30\x10\xd2\x7d\x22\x63\xd3\xda\x66\xe3\xd2\xf3\x39\x5d\x23\x94\x70\x24\xa3\xf4\x74\x44\x54\x62\x20\x27";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_223() {
    // point with coordinate x = 0 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xd8\xe1\x3f\xbd\x01\x7f\x1f\x9a\x26\xbe\x35\xc6\x11\xd7\xb2\x29\x9f\x5d\x10\xde\x3c\x8a\x26\x36\x22\x73\xff\xfb\x85\x23\x8f\x3e\
\xd1\x42\x6b\x74\x8c\x1f\x87\xe3\xaf\xa2\xc1\xe7\xa0\x22\x43\x10\xc9\x80\x65\x5e\x07\x39\x95\x90\xd1\x49\x4d\x6d\x6b\xea\x03\x96";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xd2\xa5\xbc\x66\x49\x8c\x60\x36\xae\xcd\xfa\xad\x04\x1c\xef\x73\x2a\x89\x3d\xe1\x90\xa0\xa5\xb4\x2f\xf7\x1e\x13\xf0\x92\x80\xe7";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_224() {
    // point with coordinate x = 0 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x5a\x10\x27\x66\x6a\x0e\x37\x24\x81\xfe\xc0\xb3\x90\x1e\x05\x8d\x60\x10\x7c\x07\xb1\x11\x55\x50\xce\xb0\x57\x89\xb5\x5a\x6d\x35\
\x06\x3d\x4c\x8e\xe6\x6e\xd4\x5f\xf3\xe1\xdf\xdc\xfd\x73\xed\x96\xa9\xe8\x31\x93\x88\x4a\xdb\xca\xa5\x74\xb2\xdd\x11\x8a\x69\x2b";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x1f\x81\x23\x13\xdd\xcf\x36\xbc\x38\x07\x1d\x0e\x51\xa7\x41\x00\xd6\x30\xc8\xe2\x0c\xc4\x14\x32\x6e\xef\xa4\x2e\xcb\x1b\x5f\x8e";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_225() {
    // point with coordinate x = 0 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x79\x37\xb9\xc4\x09\x86\xdd\x75\x5a\x06\x56\x20\x30\x89\x78\x25\x83\xda\x7d\x81\x13\xa4\x41\x90\x76\x2a\xb4\x74\xa2\x0b\xcf\x60\
\xef\xcb\xc1\x52\x5a\xed\x5b\x4a\xd8\xe6\x87\xcb\x02\xc2\xef\x88\x87\x09\x5c\xad\xca\x56\xc7\x65\xb4\x1b\x4a\x95\x44\xff\x2f\xe8";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xf2\x84\x08\x9b\xdd\xd5\xe2\xe1\xbe\x3f\x82\x64\x0e\xfa\x06\x58\x46\x8f\xa1\xf1\x0b\x28\x19\x63\xa3\xca\x19\x0c\x39\x82\xfd\xa6";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_226() {
    // point with coordinate x = 0 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x93\x68\x06\x6a\x07\x48\x86\x7a\x7b\x87\x02\x44\xf5\xc9\xf8\x2e\xa8\xbd\x51\x55\x29\x59\xdd\x55\x0b\xb7\x39\x44\x97\x15\x9a\x5d\
\x40\x76\x4a\xdd\x1a\xe2\x4c\x8e\x3f\x43\x2e\xe0\x11\xbe\x97\xd3\x13\x07\x18\xfe\x0a\x6a\x90\xed\x8b\x10\x11\xb2\x03\x4d\x09\xa0";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x45\x29\xf4\xb6\x31\xc9\x98\x4a\xb2\x16\xa6\x80\x12\x81\xfc\x4f\xd8\x73\x1a\x58\xb6\x5c\xa8\xd0\x7b\xff\x07\x81\x11\x16\x37\x1f";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_227() {
    // point with coordinate x = 0 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x98\x1d\x74\x49\xbd\xf0\x01\x3f\x5e\xed\xdb\xb7\xe4\x2c\x44\x2f\x7c\xcd\xd9\x42\x7b\xd2\x6d\x7b\x38\x87\x55\xaa\x5e\x26\xf4\x6a\
\x12\x92\xb8\x8f\xa6\xbf\x5d\xff\xca\x05\x4d\xd4\x2e\xd3\x59\x42\x77\xb5\x93\xdc\xc4\x02\xd8\x03\x40\xfb\x78\x16\xe4\xdc\xab\x37";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x64\xbb\xc9\xfd\xd7\x36\x43\xeb\x29\x54\xf4\xab\x64\x03\x81\xb9\x38\xc5\xe6\x01\x84\x6a\x0c\x6b\x69\x54\x96\x6e\x0d\xc7\x3e\x6f";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_228() {
    // point with coordinate y = 1
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x09\xe7\x8d\x4e\xf6\x0d\x05\xf7\x50\xf6\x63\x62\x09\x09\x2b\xc4\x3c\xbd\xd6\xb4\x7e\x11\xa9\xde\x20\xa9\xfe\xb2\xa5\x0b\xb9\x6c\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x28\xf6\x77\x57\xac\xc2\x8b\x16\x84\xba\x76\xff\xd5\x34\xae\xd4\x2d\x45\xb8\xb3\xf1\x0b\x82\xa5\x69\x94\x16\xef\xf7\x19\x9a\x74";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_229() {
    // point with coordinate y = 1
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x53\x84\xd6\xc0\xde\xf7\x89\x60\xdb\x96\x7b\x80\x96\xd3\x54\x77\xc5\xa5\xce\x30\xef\x0c\x6d\x88\x79\xa5\x56\x8c\xa8\x7e\x97\x94\
\x01\xee\x56\xc4\x58\x17\x22\x61\x0b\x43\xf3\xcb\xfc\xf3\x86\x2c\x08\x2a\x6e\x36\xba\xa3\x6f\xd6\xf7\x84\x03\xc0\xe3\x99\xfa\xa5";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x9e\xe6\x53\xcd\xa4\x6d\xb6\x76\x12\x76\x0c\xe3\x5b\xac\x84\x50\xbb\xf4\x8d\xbf\x74\x45\x1e\xd9\x3a\xbb\x6d\xb4\x08\xa9\xfe\x10";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_230() {
    // point with coordinate y = 1
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x4e\xca\x76\x41\xa4\xaf\xd5\xea\xb0\xb2\x14\x65\x7f\xf3\xbd\xcb\xfc\x66\xf1\x55\x1a\x53\xbb\x59\x49\x3b\xc3\x8e\xd7\x8f\xf3\x96\
\x14\xa0\xca\xdf\xf1\x4c\x14\x73\x6e\xdb\xdc\xda\xb5\x10\xcb\xa0\x7a\x89\x24\xff\xd0\x49\x0e\xe5\x14\xae\xdf\xaa\xdb\x64\x8b\x01";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x97\x36\xad\x6b\x2a\x2e\xf1\x7e\xc3\xf8\xc8\xdc\x2e\x35\x71\x5f\xb1\xc0\x6f\x28\xd8\x2e\x4e\x26\x87\x6f\x02\x14\x58\x81\x65\xf1";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_231() {
    // point with coordinate y = 1
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x8d\x01\x77\xeb\xab\x9c\x6e\x9e\x10\xdb\x6d\xd0\x95\xdb\xac\x0d\x63\x75\xe8\xa9\x7b\x70\xf6\x11\x87\x5d\x87\x7f\x00\x69\xd2\xc7\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x74\x8f\xa4\xf5\xa3\x99\x32\x03\x82\xdc\x92\x00\x26\x93\x86\x94\xc4\x1a\x26\xfe\x2a\xaa\x31\x8c\x5e\x71\x01\x98\xdd\x71\xc7\x93";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_232() {
    // point with coordinate y = 1
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x5f\xdb\x7f\x0c\xff\xb8\xb5\xb1\x14\x2d\x24\x69\x8a\x4b\xda\x76\xbf\x98\x27\xd6\x3b\x1a\x6b\xd8\x5a\x4e\x2f\x9b\x59\xc5\x10\xcf\
\xbc\xb3\x5b\xa9\xc9\x87\x10\x8b\x6d\x43\x37\xad\x53\x93\xf9\xf9\x10\xec\x92\x41\x0c\x23\x08\x69\xd6\x65\x28\xed\x88\xc1\xb9\x8a";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x7f\x97\xdb\x83\xb4\xd8\x6f\x04\xfe\x28\x60\x41\xee\x21\xe8\x0e\xc3\xd5\x9f\x3c\xe8\x2c\xde\xea\xf3\x62\x01\x6f\xc8\x7a\x3e\x02";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_233() {
    // point with coordinate y = 1
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x53\x0b\x22\x93\xe6\x0c\x6b\x6f\x14\xc7\x5c\x90\xb1\xef\x8b\x9f\x9f\xa6\xb2\x15\x1b\x8d\x98\x55\x79\x2e\xb2\xb3\xdc\x69\xf0\x7a\
\x0d\xb4\x24\x40\xe7\x3f\xd7\xd6\xdf\x04\xae\xd5\x02\x2f\xbe\x21\xce\xae\xc3\x3c\x5f\xba\xde\x1b\xd6\xad\x32\x1e\xf2\xe1\x0d\x0b";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x21\x79\x4c\xf2\x4f\x56\x27\x3f\xa4\x46\x3c\xc7\xae\x42\x32\xfa\x34\xdb\xe0\xf1\x8b\x73\x61\x3b\x8a\xe9\xcb\xfb\x9c\x36\xab\xf0";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_234() {
    // point with coordinate y = 1
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x69\x16\xfa\xc4\x5e\x56\x8b\x6b\x9e\x2e\x2e\xcd\x61\x1b\x28\x2e\x5f\xcc\x40\xa3\x06\x7d\x60\x10\x57\xf8\x79\xce\x5a\x8a\x73\xcc\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x91\x51\x06\xd0\x78\x16\xe8\x79\xe7\x64\x3f\x00\xab\xf6\xd7\x9f\xb8\xf1\xcb\x78\xbf\x64\xa6\xa3\x82\x7f\x91\xa7\xb0\xef\x0f\x41";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_235() {
    // point with coordinate y = 1
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xed\x95\x68\xc8\x5b\xc5\x2a\x6b\x45\x73\x36\x18\xc3\x60\x21\x07\xc1\xfd\xac\xf2\x3b\x1a\x38\xe4\x86\xaf\x95\x97\x8a\x21\x4e\x2e\
\xfa\x0d\x71\xd5\xe7\x37\x89\x1c\x42\x76\xe2\x47\x58\x1e\xe6\x13\x90\x11\xca\x14\x60\xdb\x9b\x1e\x20\xb3\x64\xd9\x27\x56\x83\xe2";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x2f\xcc\xe5\x52\x31\x08\x19\xdd\x77\x5a\xb7\xba\x9f\xf0\xf9\x6a\x1f\xca\xdd\x25\xa0\xc7\x09\x70\x3c\xef\x04\xbb\x6e\x1a\x7b\xd7";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_236() {
    // point with coordinate y = 1
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x9f\xf7\x73\x1c\x00\xf2\xaa\x88\xb3\xfc\x17\x4a\xba\x90\x7a\xd1\x75\x95\xe6\x02\xe7\x68\xa5\xf1\xe9\x46\x2a\x6d\x4b\x89\xb2\xd2\
\x3f\x17\x8a\x70\xb9\xbb\x3e\xdc\xe2\x89\x11\x83\x38\xa3\x3d\xf3\x0c\x43\x2c\x34\x7f\x12\xa3\xde\x0a\x2b\x03\xb3\x53\x87\x8d\x96";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x75\x7d\x92\x6a\x26\x93\xbc\x8a\x3d\x2d\x8c\x05\x54\xa1\x35\x79\xef\x9e\x55\x91\x86\x57\x89\x11\xf3\x7e\xdc\x88\xb2\xf5\xe6\x1a";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_237() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x82\x70\xf8\x17\x9d\x57\x43\x6b\x34\xdf\xc0\xbd\xf7\xd4\x17\xa5\xc8\x95\x11\x6b\x90\xcb\x51\xae\xc7\x18\x61\x4f\x86\x4a\x63\x5d\
\x17\x48\x04\xe0\xc0\xe0\x6e\x3d\x68\xd3\x14\x9e\x0b\x95\x66\x21\xc6\xaa\x2b\xde\x83\xf4\xd1\x7d\x03\xd2\x8e\xf8\xaa\x38\x9f\xff";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x3d\xb2\x9e\xc6\xf9\x78\xd2\x26\x9e\x92\xe9\xc7\xeb\x5c\x8b\x5a\x8e\x56\xc2\x22\x8a\x4f\xb9\xe4\x83\xfe\xca\x50\xaa\x3e\x45\x1f";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_238() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xc6\x17\x50\xe9\x8a\xba\xf2\x02\x25\xa8\x81\xdb\xfd\x35\x10\x53\x2c\xfc\x3d\xf9\x71\xbb\xbc\xa4\xa2\xbd\x52\xf9\x1a\xcc\x9c\x59\
\xd0\xfe\x79\x34\x20\x97\xf8\x8a\xe7\x8f\xc7\x9a\x80\x32\x24\x5f\xdd\x2c\x30\xcc\x64\xac\xea\xaa\x9f\xd5\x7b\x08\x25\x69\x25\x31";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x72\xc5\x7c\x2e\x10\xd7\x73\x18\xb3\xa7\x96\x09\x7b\xbf\x76\x8c\x63\x66\x14\x2d\x80\xf9\x8c\x90\xa9\x37\x80\xa8\x41\x07\x5f\x32";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_239() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x9c\x5d\x3b\xb5\x46\x50\xd9\x55\x0e\x1e\xe2\xef\xa3\xea\x43\xc1\x4a\xb9\x9d\x18\xbb\x04\x9f\x37\xb4\x2a\x6d\xac\x48\x23\x2f\x0b\
\xd3\xa2\x76\x0d\x83\xd3\x3a\xfe\x4c\xe6\xf1\xd1\x24\x54\x89\xc5\x09\xbd\x26\xb0\x25\x1f\x30\x8f\x8c\x99\x6e\x80\xf7\xa3\xf8\xeb";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xa9\x6b\x07\x94\x4e\x9e\xb2\xb2\x2a\x9a\x36\x57\x5e\xff\x1f\x4f\x63\x63\xb4\xaa\x3a\x53\xb1\x00\xb8\x51\x8a\x67\xba\x54\x05\xdd";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_240() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xf1\x72\x4e\xfd\x48\x1a\xd4\x5a\x55\x79\x5f\x06\x12\x6b\x1f\x5e\xd2\x8e\x7d\x9b\xb4\xfe\xe9\x10\xaf\x2a\xd8\xc1\x37\x3b\x18\xff\
\x77\xed\xbc\x34\xda\x6c\x78\x7e\xc7\x34\x30\x34\x7f\x4d\xa8\x68\x10\x03\x2d\x88\xf7\x47\x5f\x6c\x42\xf1\x59\x14\x07\x9d\x17\x9e";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x85\x58\x83\x31\x6b\x6d\x09\x7a\xe5\xea\xb6\xc6\x7e\x84\x11\xa1\x39\x73\x49\xa0\x9b\x9d\x7d\x8f\x09\x6b\x2b\xa1\xbd\x03\xea\x31";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_241() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xfc\x36\x80\xaf\x52\xfa\x89\xff\xcd\x19\x3e\xcc\x0b\x07\x14\x46\x6f\xe5\xdb\x27\x7e\xe5\x87\x28\x46\xc5\x20\xbf\x4e\x37\x21\xd9\
\x27\x26\x0a\x0e\x22\x5a\x3d\x37\x7e\x67\x23\xec\xb6\xbe\xf8\xd4\x49\x3c\x2d\xa7\x8a\x22\xa3\x07\xfc\xca\x8f\x88\xf4\x52\x72\x08";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x5a\x75\xbb\x7a\x0c\x96\xb8\x34\x0d\x08\x42\xbc\xcc\xf1\x19\x74\xe1\xa5\xa2\xc8\xf4\xbc\x22\xb3\x33\x43\x3c\xce\x64\x6b\x6a\x8a";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_242() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x10\x6b\x6f\x81\xe3\x48\x2d\xb1\x8d\x74\x02\x92\x91\x82\x1a\xe4\x48\xc3\x88\x44\xef\x78\x3b\xf1\xd6\x99\x9a\x40\x44\x01\xf6\x3f\
\x6a\x57\x53\xf0\xed\xc6\x8a\x62\xcf\xd6\xa0\xb1\x81\xbb\x25\x99\xe1\xf3\xba\xc5\xfa\x88\x24\xaf\x16\x0d\xe7\x9e\xd8\x67\xc3\x50";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xd9\x64\x12\xe3\x1c\xf4\xd2\x61\x95\x92\x0c\xac\x95\x2f\xb7\x9e\xa2\x5f\x6c\x50\xab\xc7\x9b\x5e\xd0\xef\x80\x26\xa6\xe8\x33\x19";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_243() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x09\x3c\xb5\x19\x3a\x4f\x94\xcd\x18\xed\xaa\x20\xa9\x73\xb8\x7f\xf7\x9b\x0c\x03\x68\x4c\x79\x48\x7e\xcf\xee\x34\x7e\x53\x54\xeb\
\x04\xfc\xb5\x75\x25\x39\x17\x07\x77\x93\x2b\xe1\x5c\xd8\x4c\x97\xf0\x38\x15\xff\xee\x8b\x60\xb6\x47\xc1\x78\xee\xbb\x8e\x14\xd4";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x2b\x0e\xed\x9b\xad\xc9\x2a\x10\x68\x19\x6d\xfe\xc1\x24\xfe\x8f\x9d\x3f\x45\x1e\x29\x4d\x32\x2e\xb8\x81\xcc\xe0\x2f\x28\x60\x26";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_244() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xd6\xc3\x8f\x44\x8b\x96\x4e\x27\xb5\xb4\x50\xcc\x38\xd3\xcf\x41\xef\x9d\xf8\x3d\x8a\x95\x97\x71\xeb\x9c\x21\x85\x5c\xb3\x64\x45\
\xdf\x63\x8a\xef\x46\xa2\xae\xb1\x31\x99\x28\x1e\x1a\x26\xd1\x2f\xe6\x1b\x02\x9e\xc7\xf6\x8b\x90\xfa\xa8\x9f\x88\xc7\xa9\x59\x42";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xed\x0b\x1d\x8d\xfd\x27\xa6\x1f\xce\x91\xdc\x64\x05\xbf\xc5\x3b\x6d\x48\xa8\xc1\x3b\xa5\x41\xc9\x6e\xf3\xdc\xf3\x1d\x7c\xdb\x88";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_245() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x8a\x74\x8d\x61\xf5\x9c\x3b\x6a\x29\xb7\x33\xb0\xd5\x54\xb2\x49\x2e\x7f\x76\xfa\xd7\xca\xe1\xc1\x7f\x2a\xc3\xde\x9e\x4a\x65\xd2\
\xee\xdb\xe6\xc2\x6b\x6f\xd2\x2b\xfc\x03\xc1\x68\x75\x55\xd2\xf0\xa3\x8e\x02\xad\xee\x55\x70\x68\x61\x71\xab\xfe\xc6\x68\x19\x17";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xa7\x96\xdd\x14\x4f\x21\xba\x33\x18\xf9\xe1\x08\x28\xec\xef\xc9\xc0\xf6\xef\x2c\x42\x7a\xe3\x13\x51\xc1\x6c\x2f\xbf\xa3\xcf\xa6";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_246() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xf1\x05\x26\x99\xd8\x7e\x56\x77\xc7\x5e\x26\xb2\xab\xe7\x19\x31\x06\x48\xd8\x20\xa9\x6e\x5b\x38\x1f\xff\x58\xb3\x92\x40\x15\x81\
\xb1\xbb\x16\xae\x8b\x68\xcb\xb7\x6a\x32\x56\x87\x0b\xad\x1e\xe5\xa3\x0f\xf9\xfd\x66\x2f\xd4\xf8\xd1\xfe\x5b\x5f\x1f\x98\xff\x46";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x1f\x3a\x96\x15\xb0\x74\x50\x46\xa9\x72\xba\xd5\xd5\x97\x94\xa0\xb6\x0b\x03\x2b\x4a\xc9\x4f\xe8\x5f\x77\xdf\xb3\x80\xd1\xf3\x2b";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_247() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x12\x19\xaf\x52\x30\x06\x4e\xe9\x77\x86\x67\x22\x5f\x0e\x00\x9c\xdb\x96\x13\x30\xe3\x86\xed\xb3\x4e\x4f\xa9\xfd\xdd\x0e\x5b\xe7\
\xe2\xa1\x25\x54\x22\x7f\x61\x3a\xaa\xa7\x89\x38\xdd\xbb\xc9\x9b\x92\x3f\x9d\x18\x1b\x81\x92\xdc\x4b\x81\x65\x77\xe8\xf3\xb7\xe9";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xca\xf9\x14\x1d\x1f\xca\x4d\x0f\x10\x68\x3b\x5e\x86\xd2\xb4\x1a\xf5\x60\x2f\x01\x79\x91\xfe\x73\x48\xd4\x4e\x8d\x70\x14\x11\x5c";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_248() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x60\xde\xf1\x30\xf1\x90\xe6\xdc\x44\xf5\xeb\x8a\x59\xe1\x2e\x7e\xfb\x27\xdb\x96\x8c\x7f\xa6\xcc\x6d\x31\x78\x5f\x06\x6b\x41\xb1\
\xf1\xbb\x55\x6a\xc4\xcd\x77\x03\x3e\x7a\xa6\xc5\xba\x16\xf4\x7e\xba\xfb\x14\x97\x5a\x7f\xd7\x2d\xd9\xb7\xfe\x23\x11\x6b\xca\x55";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x65\x39\xec\x1c\x98\xfa\x75\x19\x7b\xa0\x7c\x67\x8b\x26\x30\x0b\x3d\xa1\xfe\x40\x7d\xd4\xc6\x8b\x89\x45\x7e\xd6\x69\x08\x2e\x06";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_249() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xf2\x3f\x09\xbd\xb7\xd1\x72\x89\xeb\x00\x59\x75\xa7\x57\xa3\x93\x25\xb4\xdf\x9b\x29\xe5\x5b\xa2\xca\x67\x9b\x5e\xc0\x97\x3a\xe9\
\x18\xc8\x81\xf3\xc7\xb6\xc1\x2b\xed\x1e\xc5\x4b\x83\x7d\x08\xc5\x90\x8e\x89\xbd\xce\xdd\x84\xb9\x17\x77\x20\x37\x8f\x78\x96\x00";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x0b\x66\x19\x82\x7c\xfa\x94\x8d\x63\xf0\x21\xe9\xed\xdb\x92\xf8\x84\xfb\x5c\xe8\xa4\x04\xbf\xe0\x59\xe9\x93\xfc\x23\x44\x7a\x69";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_250() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x5d\xbe\xc0\x98\xc1\xb7\xde\x3e\x3e\x2e\x73\xd0\xb6\x2c\xd4\x9c\x87\x7e\x1a\x01\x30\xa1\xb3\x9e\xb2\xfd\x4d\xbd\x44\x26\xaa\x4c\
\xcb\xee\xe2\x17\x59\x1a\x8d\x76\xcc\x8d\xea\xf1\x4d\xde\x52\xe3\xf4\x01\xe5\x3b\x30\xcb\xb9\xc1\x80\x79\x10\xd8\x27\xd0\x04\x1d";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x2a\x53\xa5\x61\xac\xf5\xca\xec\x6e\xb0\xd8\xaa\x40\x72\x79\x42\x88\x1a\x75\xd1\x36\x89\x9d\xfb\xff\x91\x52\x82\x36\x92\x6c\x39";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_251() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x1e\x70\x73\x0d\xc4\xf3\x9c\x89\x70\x18\x2e\x1a\x29\xcc\x83\x6b\x9e\x9d\x6c\xbd\x6f\xca\xa8\xc0\xdc\x10\x62\xfe\xd9\xa8\x49\x69\
\x3e\x7b\x91\x51\xf9\xc8\xa3\x34\x53\x66\xf8\x22\x1c\x8f\xb7\x00\xe8\xc3\xa9\xaa\x7f\x0c\xc4\x6a\x48\x86\x4e\x16\x05\x59\x20\x94";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x9b\x37\x77\x16\xff\x1d\x05\x6d\xac\x8e\x39\x22\x49\xea\xec\x74\x0d\x2f\x5a\xa6\x23\x03\xf4\xba\xf6\xbb\x1b\x03\xb2\xa2\x76\xc5";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_252() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xf4\x28\xc9\xae\x3e\x23\xea\xf9\xc2\xa5\xb9\xa7\xe4\x1e\xfd\x1c\xff\xbf\x35\xf8\x81\xbf\xc3\x56\x94\xd9\xc0\x5d\x1e\x31\x2b\x10\
\xef\x6d\xa9\x02\x3c\xfd\x2d\xd0\xcb\x7b\x9e\x2a\x77\xd6\x44\xaf\xfe\x62\xa6\x3f\xb0\xf2\x9d\x45\x29\x1c\x68\x61\xaa\x06\x3c\x5c";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x0c\x0c\x68\x67\x66\x97\x43\x08\x25\x47\xaa\x94\x45\x1f\xeb\x36\x2f\xa2\x9f\xba\xf2\x28\xdf\xb3\xea\xf3\x75\xf1\xa5\xec\x2f\xb3";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_253() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xb9\xa1\x6d\x9a\x5b\x85\xa7\x14\xe2\xbb\x2a\xa2\x2b\x08\x6a\x17\x40\x4c\x7a\x3f\xf6\x24\x52\x73\x23\x47\x41\x9c\x99\xe9\x0b\xda\
\xd5\x78\xb4\x62\xf5\x23\x99\x43\x04\xb6\xaf\xcf\x69\x44\xa9\xcc\x5d\x0a\xd1\xaf\xad\x95\x64\x75\xc8\xf2\x95\x3c\x06\xb0\x6b\x97";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xd1\x1f\x9e\x32\x58\x7f\xd3\xb6\xf4\xa2\x35\x48\x12\x61\x8b\x4b\x3b\x4a\x75\x39\xb8\xa2\x23\xb3\x88\xbb\x74\x37\xf8\xd1\x38\xa5";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_254() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x8f\x65\x9a\x16\x3a\x58\xe9\xf9\x00\xc1\xe9\xb3\x4f\xb1\xcd\x61\xff\xc9\x89\x02\x67\xbe\x34\x17\xc8\xaf\xe7\x9d\x57\x21\x4d\xa0\
\x5c\xd5\xcb\x68\xa2\xb9\x3d\xa0\xdb\xe5\x6c\x1c\xfc\x0d\xce\x8b\x6c\x32\x60\xe0\xc4\x83\x79\xc6\xd2\x09\x1f\x16\xb3\x92\x21\xc0";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x4b\xab\xf6\x36\x8e\x03\x59\xb7\x86\x14\x06\x02\x41\xec\xe4\x6f\xac\xca\x3f\x52\xf5\xbb\xc4\x7a\xc0\xb4\x6a\x07\x5b\x5d\xd3\xa0";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_255() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xd2\x57\xf1\x33\xf0\x0a\x07\x9f\x4e\x67\x78\xea\x4a\x9b\xf4\x2b\x9f\x23\x12\x90\x43\x1b\x5b\x93\xd7\xe8\xb0\xe3\x5b\x48\x01\x06\
\x50\xd6\xc6\xb4\x65\x74\xd1\xef\xce\x03\x51\x0b\x8d\xb4\xa0\x98\x1c\xe1\x38\xc5\xbd\x8f\xe0\xe5\x4c\x98\x8c\x40\xc5\xfc\x92\x00";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x96\x27\xcc\x5c\x8d\x8b\x72\x27\x8b\xe8\x9c\x32\xb5\x22\x10\x17\x3e\x6f\x4b\x8e\x2f\x48\xe4\x60\xc6\x42\x9f\x46\xf9\xf4\x69\xae";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_256() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x5e\xf2\xac\x57\xc4\xe9\x3c\xf7\x8d\x8f\x86\xc3\x5d\x41\x3b\x98\xdc\x19\x02\xdd\x24\x5a\xff\xde\x5c\x16\x03\x4a\xfc\x7e\xa4\x55\
\x47\xb3\xe9\xf7\x7f\xbc\x50\x75\xba\xd0\x3c\x41\x80\x94\xf1\xae\xc1\xd0\x3e\xde\xaf\xa1\x67\xfa\x6a\xf8\x35\x26\x55\x2f\x70\x34";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xd2\xb1\x78\xbc\x9b\xb1\x6b\x5a\x91\xa1\x00\xbb\x72\xe1\x5a\x96\x39\xe0\x50\xc0\x34\x34\x60\x61\x41\x3e\xc2\x0c\x4f\xcc\x9b\xbc";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_257() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xa7\xb5\x13\xf9\x62\x66\x41\x4f\xa6\xff\x43\x9a\x35\xd8\xf0\x9a\xb6\x15\xdb\x0b\xb6\xa3\xb1\xa1\x20\xc2\x17\x68\x3f\x72\x4b\x23\
\x42\x00\x7a\x2c\x9f\xea\xbc\xd6\x24\x9a\x0d\x17\xac\xec\xd9\x95\xe2\xa2\x17\xfb\x5f\x07\xbe\xc9\x69\x38\x01\x6e\x29\x7e\xfa\x52";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x6c\xdc\xa0\xa7\x31\xaf\xf1\xcc\xfb\x19\x04\xa7\x69\xce\xf7\x9e\xba\x96\x5f\xba\xb1\xcc\x64\xd2\x04\x9d\x0d\xf4\x5d\xcc\xd2\x76";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_258() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x77\x43\xab\x72\x48\xda\xe5\xf1\xa5\x9a\xc6\xb0\xa1\x36\xe9\xf1\xe5\x1a\xff\x8b\xd4\x57\x95\xac\xe5\xf8\x18\x7a\x13\xed\xf9\xad\
\xbd\x96\x42\x07\x83\x78\xba\xb5\xc6\xd4\x84\xf9\xe1\xce\x39\x67\x5b\x72\x17\x0b\xf3\x9a\xbc\x9b\xe7\x94\x2f\xc0\x1f\xc4\x35\xd7";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xbd\x15\xe9\x7a\x7f\x49\xaa\x33\xe5\x7b\x54\x14\x0a\x75\xff\xfc\xe7\x1b\x78\x8c\xe0\xfa\xa3\x34\xcf\x8b\x45\x62\x3d\xcc\x81\x8a";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_259() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x0e\x3a\xa9\x71\xba\xcd\xac\xe3\x50\xdc\x09\x57\xfa\x5b\xde\x09\x46\x32\x4e\xb1\x39\x93\x9d\x7f\xc1\x99\x7c\x70\x1e\xff\xd0\x4a\
\x4e\x6c\x36\x25\xd9\x56\x41\x68\xd3\xa7\x52\x96\x12\x21\xa1\xde\x8c\xf5\xf3\xd6\x03\x75\x2a\x8c\x2e\x62\x77\xac\x3a\x91\x8c\x25";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xc8\xb5\xe8\xe7\x48\x88\x57\xa2\xdd\xe6\x2c\x5f\xc2\x1e\x45\x25\xeb\xab\xa0\xe0\x6b\x5b\xe8\x3e\xc6\xe7\xdd\x77\x1e\x15\xa0\x1a";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_260() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x0f\x56\x3e\x21\xbf\x9b\x24\x01\x5a\x7c\xdb\xb6\xf0\x00\xa6\x92\x78\x4a\xc2\xe4\xbc\x27\x15\xc7\x6f\x68\x42\x64\xa8\x99\xc8\x24\
\x0c\xab\x0d\x76\xe6\xb0\x1c\xab\xe4\xf3\x27\x42\x9d\x11\xbe\x11\x5e\xd6\xdc\x0c\xa7\x4f\x02\xc1\xb9\x87\xa0\x82\xf5\xaf\x43\xa8";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x1c\x63\xa4\x57\x50\x9b\x14\x82\x72\x68\x7e\x6e\x44\x2b\xde\x51\x98\x2d\x41\xb0\x08\x0d\x8c\x0c\x5e\xb7\x14\x25\x7a\xf9\x71\xe7";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_261() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x5d\xa4\x9f\x10\x24\x9e\x4d\xf3\xdb\xb4\xe3\x1e\xce\x0b\x0e\xe9\xaa\x07\x3f\x25\x88\x19\x5a\xaa\xe6\x3e\x74\xf6\x56\x7a\x77\x48\
\x10\xb5\xdd\x61\xb6\xbf\x21\x9e\x9e\xab\x30\xef\x09\xc1\x3f\xc1\x84\xb3\xd0\x9f\xf7\xa4\xe1\x92\xbc\xa8\xf5\x11\x1c\x41\x63\xc7";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x73\xa1\xac\x9e\xce\x35\x4a\x93\x0d\xfd\x9c\x77\x57\x7b\x4f\x50\xac\xc0\xa7\x89\x64\xea\x0d\x77\x75\x63\x1d\x64\xc7\x09\xc4\xa2";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_262() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x6f\x72\xe6\xe5\xc6\x30\x06\x79\xd3\xf1\x4f\x0f\x6e\x59\x06\x65\x64\x35\x76\xae\x8b\xbc\xb7\xc0\x5b\x2f\x4a\x83\xe7\x5e\x6a\xc3\
\xe7\x12\xcb\x05\x6f\xf0\x34\xda\x34\x05\x43\xc5\xda\x69\x97\xe6\x5a\x3a\xb4\xcd\x39\xe9\x97\x89\x2b\xb9\x2e\xe2\xc2\x2b\x81\x67";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xfc\xaa\x40\x63\x29\xbb\x74\xf9\x95\x86\x2c\xea\x7c\xec\xc7\x42\x5c\x6b\xd4\x14\x8e\xf1\xa9\xf4\x6b\x5d\x42\xda\x59\x94\x55\x6a";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_263() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x6b\x54\x4d\xf9\x16\x8e\x77\x87\xdb\x28\x2e\x2a\xe0\x1d\xd7\x23\x06\xd9\xc9\xbc\x80\xf5\xab\x38\xce\x59\x47\x66\xc3\xd9\x29\xe9\
\x67\x49\x3f\xf6\x01\xca\x60\x86\x2b\x47\xd3\xa0\x78\x5c\x91\x7e\x44\x58\x40\x44\xe3\x60\x23\xa5\x44\x24\x01\x5e\x58\xbe\x50\x40";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xe4\x9f\xf1\x1d\x46\xb6\xc4\xb5\xdd\xe5\x28\xb0\x41\x32\xd1\x5c\x04\x0e\x79\xf9\xb7\x15\x1f\xbc\x65\x00\x30\x98\x80\x28\xcb\x87";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_264() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x1c\x31\x38\x5b\x9d\xb9\xb3\x74\xe9\x24\x99\x93\x9a\xb0\xfd\x7e\x7e\xda\x46\x45\x61\xeb\xa8\x9f\xcd\x7b\x47\x69\x81\x4a\x86\x38\
\xa4\x76\x4c\xf8\xce\x97\xb5\xd1\x43\xbb\x8e\xeb\x9e\x1b\x27\x28\x7f\x2b\x73\x94\x2e\xcd\xbc\x63\x59\xaa\xfb\x1e\xe7\xa1\x52\xc2";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xfc\x8f\x64\xea\xc1\xc7\xe6\x88\xc5\x2c\x46\x71\x85\xde\x21\x91\x4e\x8b\x25\x30\x56\xd9\xe4\xbe\x01\x0e\xd0\x12\x8f\x92\xa8\x89";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_265() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xaa\xbc\xf8\xb1\x44\x3d\x6c\xbb\x1d\xe1\x29\xa0\xff\xe0\x9f\x60\xb2\x3f\xd9\xd0\xa4\x4b\x6b\xdf\x25\xbe\xd7\x37\x3f\xdb\xfd\x1d\
\xb7\x16\xbd\xe7\xfe\x9f\x2f\x46\xde\x0b\x68\x8e\x30\x25\xe0\x29\xcf\xf1\x52\x44\x42\x9a\xd4\xf8\x34\x84\xf5\xde\xa4\xaf\x85\x83";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x6b\x56\xd8\xa0\x1a\x88\x43\x19\xab\x5f\xb9\xd8\x90\xca\xcf\xc7\xaa\xbd\x81\xad\x93\x8c\xb5\xea\xae\x20\x7c\x8c\x1a\xa0\x6e\xfb";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_266() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xe7\xcd\x58\x0b\xd9\x57\x91\x5d\x52\x70\x56\x83\x2e\x37\x79\x3a\xb3\xb0\x82\xdd\xfa\xd9\x37\x24\x12\xe1\x90\x8e\x5c\x16\xbb\xb6\
\x20\x86\x01\xa9\x70\xd5\x84\x4b\x78\x0d\x92\x46\xe9\x58\x3e\xb3\x59\x18\xc4\x2e\xd6\x95\xc0\x7d\x52\x24\x40\x37\xf0\xe3\x1d\xb5";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x2f\x64\xb5\xc8\x04\x6d\x41\xa4\xe1\xd6\x31\xff\x23\x84\x6b\xff\x95\x6a\x49\x25\xa4\x7f\x85\x34\x49\x0a\x20\xb4\xb1\x91\x8b\x9c";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_267() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x2a\x52\xdb\x1f\xe2\x46\xb7\x1c\x79\xc0\xd0\xac\x49\xa7\xd3\x8d\xe6\x7b\x20\x29\x95\xef\xbb\xd2\xa9\xcc\x52\x5f\x6f\x36\x01\x03\
\x68\xf4\x94\xbe\x27\xe0\x59\x3e\x2d\x61\x2f\x1f\xa1\x0a\x92\x11\x43\x7e\x6a\xa1\x6e\x65\xd9\x77\x35\x01\x40\x72\xf0\xdc\xec\x94";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x63\xac\x31\xe7\x18\xb9\xa7\x80\xa8\x5f\x06\x70\xe1\xd3\x68\x5b\xbe\x30\x6e\x5f\x06\xfe\xe2\x82\xa8\x78\x47\x00\xb5\x03\xc1\x24";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_268() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x1c\x50\xdc\x49\xfe\xf7\x08\xc4\xcd\xd6\x2e\x76\x6f\x9b\x60\xf7\x84\xd5\x1a\xfe\xe1\x7a\x8f\xe9\xf3\x70\x1b\x2f\xae\x55\xb7\xa5\
\xd1\x0f\x0d\x96\x39\xd8\x3d\xce\x8f\x26\xa8\x69\x70\x5a\x6d\x6d\x38\xe6\xd3\x28\xf5\x68\x55\x81\x14\x2a\xec\x0d\xcd\x1f\x90\xe7";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x55\x5c\x19\x17\xb7\x70\xce\xbe\x6a\x98\x33\x7a\x00\x8a\xe3\xd8\xd0\x4f\x57\x15\x65\x32\x7c\x93\xde\xbf\x61\xef\x90\xdd\xdd\xd8";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_269() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x6d\x0a\xa1\xbc\x1c\xee\x6d\x07\xd0\x45\x00\x2c\x13\x29\x0d\x0c\xa2\x5c\xa3\xc8\x78\x33\x43\xa5\x25\xfa\xc7\x04\x72\xb9\x2c\x62\
\xd6\xfb\xa7\x11\x74\x44\x8b\x47\x2c\xf1\x72\xb0\xca\x9e\x37\x7f\x1a\x26\x03\xba\x7a\xe1\x27\x6d\x15\x3b\x20\xc6\x3e\x7d\x24\xbf";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x3a\x65\xa9\x20\x0f\x8f\x96\x63\x59\x12\xfa\xa5\xe7\x85\x9f\xa3\x03\xa7\x6a\x1c\x2a\x41\xea\x97\xef\x61\xaa\x39\x28\x77\x00\xa9";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_270() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xf0\x7e\x3d\x8b\xe2\xba\x54\xc6\x08\x41\x41\xe1\xfd\x2b\x29\xcf\xd0\x0d\x4e\x6d\xd6\xff\xb1\x15\xed\x83\x9b\x10\xbd\x8a\x42\x2f\
\x42\x99\x2c\xb9\xa5\x24\x38\x97\xd5\x54\x08\xe9\xbb\x55\x60\x43\x31\x8d\x87\x34\x9a\xf3\x5d\xcc\x09\x75\xed\x80\x5c\x8f\xa2\xc9";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xbb\x7b\xb5\x2d\xa5\x70\xba\x58\xe0\x5f\xd3\x22\xf8\x2d\x55\x6c\x2d\x65\xb3\x65\xdb\x30\x81\x58\x79\xf6\x7f\x23\x3b\x08\x9b\x51";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_271() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x43\xa9\xb9\x02\x74\xdb\xd5\xf3\x6d\xd2\x90\x46\xfc\x83\x90\x00\x8d\xde\x74\x51\x3c\xe4\xc3\xe8\x89\x2b\x23\x6e\xff\xf8\x0c\x9d\
\xc7\x15\x47\x15\x2a\x58\x97\xdb\xe1\x69\x57\xbd\x15\xd1\xa8\x7d\x77\x04\x96\xf8\x14\xfe\x29\x21\xc8\xf3\x3d\xf0\x43\x93\xc7\xf8";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xe8\xca\xe9\x94\x42\x33\xb8\x67\xee\xdf\x59\x02\xfc\x49\xec\xd0\x7e\x4c\x81\xc4\x62\x79\x53\x1e\x89\x52\x0b\x74\xba\x53\x70\xb5";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_272() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xe9\xaf\x8e\x8c\x19\xda\x9d\x5c\x2f\x3b\x3c\x03\xb8\xe9\x27\xc3\xcb\xe2\xd7\x17\xf9\x8f\x50\x09\x72\xe5\x6d\x82\xeb\x07\xc2\xb1\
\x4e\x83\xfc\xaa\xca\xdc\x26\xf8\xbb\x5e\x7b\x94\x74\x1f\xe5\x4f\x31\x27\x5e\xbd\x6e\x1c\x96\x9d\x7e\xc2\xfe\xce\xad\x8a\x0d\xae";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xe7\x2a\xd0\xcd\xb2\x5f\x43\x07\xd1\xd8\x34\xa5\xf7\x92\xe9\xaf\x64\xfd\x1b\x69\xa4\x70\x41\xec\x8f\xa4\x6d\x52\x6f\x41\x9e\x4d";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_273() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x33\xd9\x58\x2b\x56\x7a\xad\xbe\x59\x60\x6f\xa6\xff\xc1\x18\x48\xe4\x94\x7b\x51\x79\x59\x73\x17\x77\x63\x17\xb2\xb4\xff\x65\xd0\
\xb4\xd8\x56\x8d\xc8\x43\x31\x9c\xc0\x4f\x4b\xf1\x10\x49\x6d\xee\x7c\x92\x29\xfc\x68\xcb\x09\x58\xf3\xcb\xd3\x7e\xcc\xa6\x99\x0f";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x00\x01\x97\xfb\xc2\x60\xa8\x4d\xbc\xbf\x88\x13\x6a\xea\xa7\x9b\x03\xbb\x89\x49\xae\xfd\x24\x16\xbe\xf6\x39\x29\xef\x78\x9b\xf3";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_274() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xe2\x1c\x02\x82\xad\xb1\xb2\x05\x5f\xda\x74\x46\x44\xc6\x86\x12\xcf\xb0\xc6\x8a\x70\xb9\x81\x2d\x00\x7f\x21\xa7\x8f\x1a\xdc\x48\
\x49\xf3\xe7\x64\x4b\xc6\x63\x3e\x27\x73\xa2\xf3\xcc\x52\x14\xfa\x72\x08\xe3\x0a\xfb\x3d\xe9\x92\xf0\x77\xee\x32\x15\x69\xdc\x48";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xcd\xb1\x8b\xf6\x26\x70\xa8\x53\x48\x8c\xa5\x10\xd8\xf5\x5b\xab\x29\x18\x99\x14\x24\x92\x5b\xd9\xb7\x4a\x82\x1d\x2c\x6e\x7e\x3c";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_275() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xaf\x27\xde\x0d\xa6\x55\x6e\x4e\x64\x58\x8c\x96\x94\xaf\xee\x9a\x84\xe1\xcb\xd0\xc3\x88\x97\x2d\xf3\xa9\x97\xf7\x60\xbb\xcd\x90\
\x3c\x5a\x02\xe1\x61\x55\x1f\x33\x3d\x77\x05\x59\xab\x1a\xf4\x9b\xf8\xb6\x82\x74\x89\x65\x90\x93\x9c\xe9\x56\xd9\x91\x3b\x67\x6f";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x16\x73\x03\x50\x5d\x22\xcf\x9e\xf7\x8c\x5b\x96\x87\xa5\x41\x8f\xa9\xfb\x28\x4f\x2b\x0f\xf6\x83\x16\x28\x8e\xcd\x7f\x2e\x2e\x09";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_276() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x0d\xa4\x1b\x82\x55\x0b\x35\x8f\xf4\x74\x91\x5d\x83\x10\x4d\x41\xa8\x3a\x12\xef\x70\x58\x9b\x9d\x39\x2f\x0f\x30\xdc\x32\x42\x9e\
\xdc\x76\x16\x3c\x8f\xe0\x7a\x3f\x70\x9c\xbd\x92\xda\x0b\xbf\xc5\x04\x5f\x3d\xb8\x2a\xa5\x34\x4c\xf1\xfd\x5b\x27\xfc\xd2\xf7\xa6";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x85\x60\x0f\xf2\x3c\x3c\xde\x26\x00\x9f\xea\x9b\x65\x39\x66\x4b\xf0\x45\x05\x68\x83\x72\x8a\xb0\xd4\x49\x8e\xa0\xa8\xf4\xa4\x53";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_277() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x19\xc8\x44\xb8\xc7\x20\x90\x26\xa0\x99\x6a\x78\x29\x83\xe1\xbd\x0f\x0d\xe9\x25\x5b\x86\x73\x9b\xe9\xbe\xf0\x8e\xa5\x47\x5c\xc6\
\x69\xa7\x79\xdd\xf5\x77\x47\xcf\x7d\x9a\x22\xf0\x0e\xd8\xef\xc6\xe8\x18\xaf\x58\x27\xb7\x50\xd6\x65\xfe\xe6\xd6\xd5\x8a\x22\xe8";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xa3\x25\x0a\x2b\xfb\x14\x5c\xe8\x6e\x70\x6a\xc3\xab\x2b\xf5\x03\xa6\x64\x86\xac\x0b\x2f\x75\x22\x60\x1c\x12\x4b\x0e\x0f\x9c\x5b";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_278() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xbd\x07\xbd\x43\x26\xcd\xca\xbf\x42\x90\x5e\xfa\x45\x59\xa3\x0e\x68\xcb\x21\x5d\x40\xc9\xaf\xb6\x0c\xe0\x2d\x4f\xda\x61\x75\x79\
\xb9\x27\xb5\xcb\xa0\x2d\x24\xfb\x9a\xaf\xe1\xd4\x29\x35\x1e\x48\xba\xe9\xdd\x92\xd7\xbc\x7b\xe1\x5e\x5b\x8a\x30\xa8\x6b\xe1\x3d";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x2d\x70\xcc\x8c\x8a\xf0\x13\x66\x05\x1c\xc8\x35\x9c\x2f\xc8\xf2\x58\x75\x7e\x26\x01\xfd\x8f\x3e\x08\x42\x2a\x7b\x23\xbf\xef\xf5";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_279() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x00\x89\xde\xe2\x7a\x60\xd0\x71\xda\xbb\xaf\x58\xf3\xe5\x66\x14\xda\xd3\xb7\xf9\xa8\x03\x07\x69\xfd\x04\x63\xb3\xe6\xe0\xf0\x3a\
\x14\x7b\x4d\x6e\x7e\x7f\xd9\x39\xb9\xb5\x4d\xab\x45\x8f\xd5\x56\xad\x8f\xda\xf4\xda\x6c\x39\x09\x58\x8c\x4e\x05\x0c\xa7\x4a\x67";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xcb\xe0\xc5\x71\xd1\x08\x0e\xa3\x4e\xe2\x0a\xd1\xbf\xd2\x1e\xa5\xec\xc4\x42\xea\xd7\x33\xfb\x4e\xee\x3c\x0d\x7b\x0c\xce\x99\x35";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_280() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x42\xed\xe1\x06\xcf\x85\xae\xf4\x6d\xf7\xe5\xdb\xa8\xa8\xb0\x04\x59\x31\x7d\x9e\x76\x6a\x7b\x77\xc2\x99\xaa\x0e\x17\xde\xa1\x42\
\xb6\xe9\xa8\x6f\x4f\xc3\xe9\x45\xd4\x32\x3b\xa8\xe4\x59\xf6\xb7\xb1\x4c\x56\x3a\x69\x8c\x75\x7a\x2d\x5f\x7b\x0b\xc3\x01\xed\xe2";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x33\x32\x0f\xc7\x91\x7f\xe4\xe1\x92\x80\xbf\xbf\xe1\x6f\x22\x3c\x03\x7f\x7c\x2d\xc3\x0c\x0f\xda\x98\x31\x07\x40\xf5\x7f\xe2\x89";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_281() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x97\x4b\x43\x16\xc5\xe7\xd1\x34\x8b\x28\xdb\xc4\xfd\x61\xd8\xd3\x47\x0d\xe7\x44\xc3\x0f\x5b\xe2\x37\xf8\x5f\x29\x96\x9d\xea\x77\
\xb5\xf0\x0b\x58\xb8\x3c\xfc\x7b\xc5\x16\x55\x46\x5b\x4a\x28\xab\xe1\xed\x3d\xbe\xc2\x0c\x6b\x46\x43\xae\xc8\x5b\x95\xa5\xbe\xc6";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x35\xc7\x26\xea\xd6\x6c\x39\x41\x4f\xe0\xc2\x46\x04\xdf\x78\x38\xe5\x72\x5d\x2f\xc1\xbd\x08\x53\x26\x1e\x1d\xe3\x33\x8e\xcb\x4f";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_282() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x59\x87\x3d\x75\x23\x93\x6a\x12\x1b\x62\x9e\x98\x70\xf9\x30\x41\x9f\x25\x3a\x57\x67\xb9\xd0\xdc\x49\x71\x6f\x2c\x50\xe1\x7b\xd0\
\x16\x3b\x71\xf2\xbf\x43\x18\xfb\xde\x1c\xea\xa5\x85\x45\x00\x80\xee\xc2\x84\x74\xcd\x18\xbf\x7c\x21\xd2\xd1\xbf\xde\x4f\xf6\x77";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x66\xea\x42\xfe\x6f\xd8\x74\x1b\x37\x59\x9b\xbd\xad\xa3\xec\x0e\x6b\x08\xc0\xb5\x2e\xa6\x7c\x29\xa3\x31\x72\xf7\x27\x42\x58\x3c";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_283() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xbd\x85\xa7\x9f\x81\xc4\xf9\x61\x3e\x64\xfa\x34\x78\x86\x43\x78\x56\xc7\x35\x8d\x1b\x69\xcf\x1e\x92\x3d\x77\x42\xd8\x2f\x9b\x67\
\x67\xd2\x69\x18\xea\xa8\xac\xb1\x13\xa1\xda\xad\xae\xdc\x70\x97\x42\x45\x73\x03\xeb\xc2\x3c\xdd\xa5\x57\x26\x13\xdc\x82\x77\x03";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x2f\x8a\x50\x2e\x4f\x44\x01\x33\xe8\x4f\xb6\x25\x29\x2c\xbe\xab\xe2\xcb\x79\xda\x73\x98\x7c\x76\xd4\xfe\xd8\x64\xd1\xb1\xb7\x62";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_284() {
    // point with coordinate y = 1 in left to right addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x3e\x6a\x4e\xff\xc4\x7c\x2f\x59\x26\xbb\x6b\x4a\xcf\x2e\xac\x48\xb9\x52\x4c\x47\xd5\x11\xf8\x16\x97\x67\x96\x77\x86\x00\xd6\xc5\
\xbf\xce\x59\x32\x42\xa5\x98\x5a\x97\x75\x90\xf8\xd7\x48\x5d\xf3\xf9\x53\x35\x29\x57\xf3\xc1\x7c\x13\xe9\x45\x83\xd9\xc0\xe7\xb9";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x06\x43\x68\x17\xd8\x92\x8b\x77\xb7\x3d\x16\xc5\xc3\xb3\x5e\x24\x3a\xd3\xef\x2a\xb5\x9a\xd0\x47\x14\x2c\x67\xa6\xd0\x92\x3c\x84";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_285() {
    // point with coordinate y = 1 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x9a\x44\x87\xfc\xfc\xe8\x39\x66\x88\xe7\x44\x9e\x09\x5f\xe8\x03\xca\xa2\x53\xd4\xbd\x7c\x66\xdb\xc6\x26\x1c\xc9\xd9\xf8\x83\xa5\
\x0e\x52\x51\xba\xe2\x9c\x5a\x5c\xdf\xa3\x1b\xc6\x11\x05\x67\x1a\x88\xa0\x18\x46\x73\x98\x15\x8d\x35\xb8\x88\x29\x23\x7c\x0b\xff";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x7e\x83\xfd\x2c\x3d\x71\x3b\xc8\x5d\x6d\x85\xd9\x07\x8b\x3a\x08\x42\x82\x4d\x41\x0e\x8a\xbd\xe0\x4d\xa0\xfd\x71\xc7\xd9\x47\x05";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_286() {
    // point with coordinate y = 1 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xfe\xd6\xce\x12\x72\x90\xc1\x29\x1c\xa5\xce\x64\xac\xb4\xe0\xf2\xf8\x90\x56\x54\xd1\xd2\x5b\xa5\x7c\x1f\x74\xab\x52\xf2\x1f\x42\
\x96\x3d\x31\x67\x1c\x06\xb8\x02\x16\x99\x29\x52\x5c\x4a\x1f\xde\xff\x5b\x1e\xaf\xab\x91\x9d\xc2\xdf\x6c\x52\xbe\x84\xdf\xae\xf3";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x0e\x3d\xfd\xab\x60\x6e\xbd\xc6\x42\x82\x82\xac\xd4\x43\xf1\x89\xc9\x9b\x3b\x48\x3a\xa1\x01\xfd\x8d\x6b\xed\x38\xae\xc5\x9e\x02";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_287() {
    // point with coordinate y = 1 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xf7\xce\xe5\xb5\x5f\x18\x69\xf1\x37\xdd\x70\x7c\x8f\x8f\xb8\x96\x5a\x2b\xe5\x84\x0c\x31\x49\xfb\x75\x96\x95\xa4\x66\x1b\x9c\x0d\
\x23\xc7\x8c\x4e\x96\x47\xb0\xd6\xcb\x2f\x26\x02\xbe\x73\xff\x25\xcf\x3d\x09\xc9\x6d\x89\x2b\x57\x45\xfe\x5e\xca\x81\x4a\xec\x91";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xf4\x89\xf2\xbd\x93\xf7\x6b\x8e\x41\xfc\x6b\x9f\x21\x1b\xc5\x99\xd4\x9d\xb1\xf1\x7a\x38\xe9\x5b\xab\x1d\x31\xb2\xa2\xb5\x58\x29";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_288() {
    // point with coordinate y = 1 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x2b\xaa\xae\xc3\xb3\xe8\xd5\x4a\x4e\x18\xf0\x96\x0b\x94\x7d\xa2\x53\x5e\x3c\xfc\xca\x2c\xfa\x8b\x71\x13\xaa\xd8\xe3\xb6\x62\x6f\
\x72\xf7\x1e\x7c\x9e\x96\x04\x2c\x1d\x39\xcc\x8f\x11\x39\xd5\x14\x7c\x6f\x4f\xe6\x2e\x23\xcf\x6d\xf3\x64\xb5\xf4\xd8\x99\xf8\x42";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xcc\x57\x38\xb4\x9d\x30\xd5\xd0\x2c\xf7\xe0\xc5\x4a\x3d\xe0\x9b\x5b\x6f\x3c\x4d\xea\x91\xdd\x06\x79\x07\x2a\x35\x62\x44\x4c\x37";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_289() {
    // point with coordinate y = 1 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xa5\x1a\xb1\x23\x8b\xc1\xbe\xd2\x52\x47\xe7\xd1\x79\xc8\x3a\x61\xae\x2d\x4a\x9f\xe2\x28\x8c\x36\x3a\xe0\xeb\x7a\x77\xde\x43\x2a\
\x3c\x6d\x35\xd8\x2b\xa8\x01\x7e\x6c\xa9\x04\x1c\xc7\x85\xa3\x07\x03\xf7\xbc\x44\x27\x50\x6e\x62\x4a\xc5\x97\x9d\x71\x54\x21\xdd";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x89\xa1\x11\x77\xd6\x90\x7a\x81\xd4\x74\x67\x09\x3b\xf6\xa3\xcc\x8b\xa5\x5d\xee\x05\x23\x9b\x16\x0a\x31\xa3\x00\x0f\x5d\x80\x7b";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_290() {
    // point with coordinate y = 1 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x8b\x5a\xe8\xa0\xe5\x5f\x30\xf5\x09\x06\x13\x15\xab\xae\x79\xac\x48\x0f\x88\xb4\x46\x55\xf7\x26\x9a\x38\x5c\x81\x52\x68\x84\xbe\
\x26\x29\x74\xa3\x1a\x0e\x23\x22\x12\x6c\x2d\x77\xb2\x6b\x10\x8a\xbd\x81\xf8\xb9\x52\xc4\x58\xcc\xc9\x5d\x46\xfb\x49\x24\xc7\xc0";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x2c\xb0\x3c\x30\xb2\x00\x37\xa5\xcf\x4d\x5b\x33\x57\x4f\x3a\xba\xc8\x95\xbf\xab\x37\x86\x7e\xb2\xeb\xed\x26\x0e\x09\x29\x05\x8d";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_291() {
    // point with coordinate y = 1 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x5f\x60\xc7\x7e\x47\x4d\xd6\x6c\x81\x35\xee\x3d\xaf\xc7\x5b\xa6\x44\x64\x98\x24\xc7\x27\x37\x54\x20\x91\xad\x46\x9a\xdb\xb6\x85\
\x31\x2c\x09\xc6\x9b\x62\x9d\x04\x36\xbf\x3b\xd6\xc6\x08\x3f\xf2\xa8\x7b\xe4\x84\xa7\x3e\xf3\xa5\xd2\xc3\xe0\x6b\x5d\x9b\x21\xb3";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xe5\x4d\x48\x7d\x0c\x4b\x12\xfe\x52\x2a\xf3\xe6\x63\xce\x31\x6e\x63\x2b\xa9\xd6\x3a\x1f\x02\xa3\x6f\xc5\xa8\x2b\xf8\x27\x31\xa4";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_292() {
    // point with coordinate y = 1 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xe0\x6e\xaa\x73\xf6\xfe\xae\x45\x41\x7d\x85\x9b\xba\xd4\xbc\x40\x4b\x28\x85\xbc\xd2\x13\xeb\xac\xe5\x94\xe1\x6f\x49\x70\xe0\xc4\
\x11\xed\x33\x23\xa3\xd7\xaf\xc7\x07\x62\x39\x88\x43\x07\xf9\x18\x49\xed\x5f\x5e\x36\xb6\x17\x1d\x30\x9c\x81\x34\x4c\x53\xe0\x6d";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xcc\xea\x96\x9d\x40\xfa\x42\x93\x3f\x4f\xbd\xc4\xca\xbe\x21\x85\xf8\xa4\x52\x99\x62\x54\xc1\xf4\xe0\xdd\xe5\xe1\x4f\xee\xea\x8d";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_293() {
    // point with coordinate y = 1 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x0f\x1c\x1b\x89\xe9\xfc\x6f\xc0\xfa\xef\xc9\x10\x9f\xc4\xa1\x24\x7d\x9f\x54\xc7\x49\x7b\x6c\xc9\x75\xe6\xa5\x45\x5b\xef\x41\x08\
\x36\xcb\x38\x18\x54\x8a\xc9\xb4\x1e\x2b\x83\x36\xc3\xeb\x8d\x97\x07\x5a\xe4\x7e\x18\x27\xfa\x1f\xf9\x3d\x43\x41\xd4\x3c\x0c\x1d";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xea\xae\x0e\x18\x8c\x94\x27\xbf\x3c\x8b\x3d\xed\x77\x21\x22\x20\x4c\x32\x8d\x59\x41\xe3\x89\xd8\x08\xe2\x72\x46\x38\xf9\xaf\xf8";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_294() {
    // point with coordinate y = 1 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x57\x70\x69\xe8\x28\x4a\x95\xf5\x1d\xca\xb9\x19\xb0\x53\x66\x57\x05\x89\x71\xda\xb7\x62\x17\xf8\xd3\xae\x72\x2a\x64\x09\x2e\x26\
\xe5\x1f\x68\xa7\x22\xcc\x03\x97\xf4\x80\x14\x01\x77\x1e\x9a\x3d\x19\x88\xd4\xaf\x76\xf1\x4f\x9e\x2f\x9c\x36\xe0\x77\x3e\x29\xc2";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xfe\xa0\xcc\xe1\x35\x8f\x1f\xf4\x0f\xfe\xaa\xff\xbf\x91\xb2\xe8\xd4\x26\xd4\xe3\x1e\x96\x27\x73\x1a\xce\x3a\x12\x2e\xab\x6b\x0d";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_295() {
    // point with coordinate y = 1 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x24\x06\xa2\x75\x90\x50\xb9\x25\xdd\x4f\x81\x4c\x50\x33\xe3\x55\x54\x8f\x42\xbb\xf1\xaf\xb7\x91\xc1\x10\xf0\x03\x1f\x29\xf6\x80\
\x99\xd5\xf4\xb0\x05\xde\x39\x27\xf1\x65\xab\xef\xf1\x96\xa2\x8c\x72\x17\xfa\xb1\xbe\x2b\x52\x09\xc3\x24\xe7\xd6\x2d\x2d\xd6\x87";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x83\x76\x21\xea\x48\x27\xbb\xa0\x37\x6a\xaa\x8a\xa6\x6c\xfe\x14\x4a\x2f\xf1\xe3\x59\xdc\x61\x9a\x06\x44\x1d\x3e\x05\x5f\x97\x71";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_296() {
    // point with coordinate y = 1 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xcc\xaa\xc6\x1f\x35\xa2\x78\x61\x18\x36\x21\x64\x2b\xc5\x73\xaf\x91\x33\x56\xfb\x47\xcf\x58\x2f\x0b\x52\x99\x09\x9d\x6f\x6c\x69\
\x91\xf7\x27\x2b\x83\xb7\x38\xa7\xa5\xd3\x04\x47\xc8\x7f\x12\x6a\x7d\x98\xec\x72\xfa\x26\x09\xd0\x93\x9d\x18\xdb\x7e\xa7\xeb\x3a";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x63\x97\x4c\xe6\x15\x37\x62\xe5\xb3\x64\x52\x3c\xea\xd9\x3e\x8c\xe8\xbc\xc7\x7d\xda\x56\x36\x5d\x67\x61\x36\x16\x9f\xc4\xe3\x9b";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_297() {
    // point with coordinate y = 1 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x01\x41\x59\x17\x27\x2f\x19\x84\xe7\x21\x7a\x36\xfb\x31\x1f\xd2\x90\x4d\x41\xa6\xb1\x39\x73\xf9\x2a\xae\x3b\x90\xe8\x5e\x4d\x56\
\xd9\x7c\x82\x2e\xb7\xb2\x1a\x84\xd0\xd1\xbe\x48\x67\x40\x4a\x80\xc3\x48\x67\xf4\x31\x39\xda\xdc\xc3\x61\x9e\x10\xb2\x22\x56\x2b";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x0a\x04\x88\x14\x4b\xc3\x6d\x69\x0b\x62\x14\x8a\xc3\x07\x60\x47\xd4\x6d\x48\xf7\xad\xbb\x0f\x34\xfe\xe9\xa6\x36\x29\x5f\xe7\x37";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_298() {
    // point with coordinate y = 1 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xb2\x57\x5d\x10\x0c\x6f\xa0\x56\xbc\xd1\x37\xab\x11\x1b\x53\x15\xa8\x90\x8c\x29\x24\x3b\x84\xf3\xdc\x99\x6d\x0e\x45\x76\x4b\x91\
\x66\xca\xbe\xb4\x18\x85\x58\x8e\xc0\x8b\x47\x25\x7d\xf5\x8b\xd5\x8f\x7d\xcd\x9e\x01\x2e\x26\x69\xfa\x2f\x52\xe2\x57\x67\xfc\x4c";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x12\x32\x16\x55\x38\xa4\x42\x68\xaa\x7c\x19\x9c\x54\xd6\xd2\x07\xc4\xef\x3f\x5a\xa7\x90\xc1\x0c\x92\x6a\x20\x75\x2c\xa6\x45\xce";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_299() {
    // point with coordinate y = 1 in precomputation or right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xc1\x73\x55\xed\x30\xcc\xd6\x42\x7f\x96\x85\x70\x90\x21\xb2\x5c\x11\xed\x17\x6e\x96\x10\xc4\x79\xbc\xc4\xcc\x75\x52\xa7\x38\xe6\
\x1f\x75\x11\x47\x61\xdb\xa0\xec\x60\xcd\x26\x4b\xba\xb7\x63\xc5\xd5\xab\xcc\x75\xcd\x8f\xb5\x65\x1d\x06\x45\x17\x99\x88\xcc\x6d";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xdc\xab\x5e\x87\x4e\x4f\xb7\x6b\xc4\x31\x25\x28\xe9\xd7\x6d\xfa\xe5\x61\x45\x92\x25\x33\x08\x97\x34\x11\x0b\xf5\x65\x3f\x4d\x77";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_300() {
    // point with coordinate y = 1 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x34\x15\x92\x39\x0c\xcc\xe4\x85\xde\x88\x80\xf3\xd7\x27\xf6\x64\xc3\x81\x91\x4a\x1b\xec\xec\x38\x3b\x35\x58\x67\x51\xfc\x81\xc2\
\xad\xd7\x18\x52\xb8\x70\x16\xe1\x01\x9c\xae\x7a\x90\x80\xe7\x5c\xe0\xb0\xb8\xaa\xc1\x75\xd6\x92\xd5\xe7\xb4\xda\xd0\x88\xf5\xcc";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x4c\xe2\x70\x1b\x2b\xe6\x3a\x00\x83\xa4\xc5\x3f\x7a\x0b\xf0\x4c\xf8\x71\x65\x4f\x5e\xdb\x6f\x62\x5e\x3e\xa5\xe7\xd0\xbd\xcc\x90";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_301() {
    // point with coordinate y = 1 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xfa\x76\x4b\x6b\x76\xa8\x6c\x3b\x76\x21\x20\x82\x5d\x35\x3a\x24\x76\x62\x08\xc1\xf5\xcc\x0f\xe3\xfe\x79\x98\x02\x6a\x2e\xc5\xc4\
\x3b\xb2\xf9\x48\xfd\x94\xcd\xaa\x58\x69\xb1\xe0\xe7\x3a\x4d\x97\x03\x5c\xc4\x93\x57\xfb\x7b\x74\xd7\xed\x0a\x2c\x5b\x8d\x54\xeb";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x7a\xbe\xf9\x76\x5c\xca\x72\x13\x20\xfb\xf8\xed\xcb\xef\x6d\x2b\xa2\x5d\x17\xb7\x0f\xfa\x17\x76\x02\x9b\xc3\x8f\xe6\x77\xa1\x2c";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_302() {
    // point with coordinate y = 1 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xa7\x1f\xbb\x61\x71\x99\xbd\x58\x5b\x4b\x66\x21\x2c\xa3\x3c\xa9\xe0\x93\x70\xe6\xbf\x15\xc8\xea\x0a\xce\xfd\x9c\x8e\x94\x5d\x06\
\x84\x0f\x05\x88\x63\x07\x8e\x74\x3e\x22\x0f\xf9\x9f\x23\xbb\xc1\xda\xa3\x68\x35\xd4\xb1\x26\x9f\x0a\x75\x36\xe6\x3f\x06\xd8\x53";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x5f\x61\x40\x4d\xbb\xbc\x28\x67\xdf\xf9\x5c\x1f\x37\xed\x44\xf4\xcb\x8f\xab\xcd\x22\x3b\x03\x73\x9d\x88\x83\x08\xd1\x3b\xc4\x12";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_303() {
    // point with coordinate y = 1 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x13\xc8\x29\x2d\x85\x4d\x39\x45\x1c\x0c\x63\xa8\x02\xb8\xc0\x3e\x4f\xcb\x87\x5e\xf0\x12\x39\x89\x62\x95\xba\x1c\x0f\x38\x69\x75\
\xf8\x2d\xf1\x97\x08\x6f\xd8\x60\x32\xcb\x36\xb6\x9a\x27\x87\x6d\xd7\x5a\x8e\x96\x79\xf3\x6f\xfc\x22\x10\xed\xb1\x28\xd4\xbe\x13";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x8d\x67\x3a\x57\x7e\x35\xbf\x9d\x5d\x00\x67\x6c\x08\xb2\xc7\x39\x61\x7c\x46\xa0\x52\x18\x84\x03\xaa\x06\xdc\x71\x4a\xf6\xac\xc1";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_304() {
    // point with coordinate y = 1 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x0c\xd9\xdf\x41\x5a\xcc\x0c\x32\xfd\x4e\x3d\x69\x24\xce\x53\x07\x5b\x04\x52\xbf\x91\x9a\x2a\xb2\xeb\xe2\x65\x97\x57\x0f\x1e\xcd\
\x59\x85\xd8\xd2\xc5\xdf\x78\xfc\x10\x0f\x87\xef\xb6\xdf\xa9\x54\x37\x57\xbd\xff\xec\xf0\x83\xdf\xcd\x1e\xcb\x38\xde\x6c\x23\xf8";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xa7\x83\x5f\xfe\xe0\xf2\xa6\x9d\xfc\xf7\x0d\x4e\x79\x8d\xbe\x3e\xd3\x2b\xa0\x3c\xfd\xda\xe5\xdd\xd1\x1d\x8c\x0a\xc3\xd7\x4f\x9b";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_305() {
    // point with coordinate y = 1 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xd2\xdb\xea\x40\x46\xb2\x3f\xd2\xb2\x33\xd1\xce\x31\xdc\xed\xdb\x89\xb2\x5f\x26\xc0\x62\x7a\x9d\x2d\xb3\xc5\x60\x5c\x9c\xc9\x95\
\x35\xbd\xc8\xde\x74\x51\xc1\xe2\x7e\x97\xaa\x91\x40\x2c\xce\x38\x82\xc7\x12\x69\xd9\xcb\xdc\xb5\xd7\xac\x0c\xeb\x91\x1b\x9b\x6d";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xe9\x8e\xa2\x22\x09\xcd\x39\x7e\xdb\x6c\x31\x96\x48\xc1\xeb\x24\xbc\x4d\x39\x59\x8a\xb1\x19\x95\x57\x19\x26\x68\x4c\xe2\xce\xca";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_306() {
    // point with coordinate y = 1 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x88\x8f\xb0\x44\xfb\x2b\x6c\xaa\x60\x36\x6b\xfa\x66\x2a\xdb\xa4\x79\xb8\x36\x5a\x65\x55\xa2\x98\x87\xd5\x80\xf5\x87\x08\x6b\xa8\
\x48\x2f\x4e\xc2\x40\x82\xa4\x8d\x64\x02\xaf\xa1\x62\x21\x43\xf2\x6e\x61\xd9\x1b\x7e\x30\xd6\xa4\xb2\x23\x63\x0e\xe1\x0f\x70\xfb";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x91\xb6\x57\x33\x86\x0b\x1b\xdb\x95\x41\xd9\xf5\x58\x95\xa3\xdb\xb3\xf1\x3c\x19\x92\x51\xd3\x30\x06\xb6\xdc\xf9\x0a\xc3\x49\xed";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_307() {
    // point with coordinate y = 1 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x2e\x2b\xec\x13\x42\x49\x37\x9d\x57\x70\x03\x01\xf3\xa5\x8e\x4b\x39\x5a\x4d\x28\x37\x0d\x2a\x06\xe6\x5e\x7a\xc8\x9e\xd7\x6a\xc6\
\x97\xdc\x96\x0b\xd7\x95\xcd\xf4\xfb\xcf\xdd\x75\x14\x90\x57\xb8\xe0\x22\x33\x1c\x7b\x54\x61\xf3\x83\xac\x58\x9d\x76\x4d\xf3\x33";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x1f\xdf\x7c\x5c\x48\x04\x7a\x11\x3e\x5e\x5d\x1b\x7e\xd5\x93\x33\x7e\x76\x92\x31\xcc\xa5\xc7\x11\x01\x60\xe0\xc1\xb9\x7f\x42\x56";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_308() {
    // point with coordinate y = 1 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xc7\x8c\xda\x7e\x3b\x9e\x17\x72\xeb\xed\x30\xb2\xb5\x1d\xcf\x15\x5a\x69\xa0\xfc\x50\x45\x57\x83\x6e\x25\x14\x7c\xfb\x81\x27\xd2\
\xf8\x28\x9c\xf3\x8b\x03\x3d\x37\x63\xc8\xf9\xf6\xc0\x91\x78\x7a\x31\x42\xfb\x83\xdf\xf5\x71\x95\x90\x28\x2c\x6f\x85\x2e\x01\x05";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xba\x0a\xbc\x3e\x71\x72\x6c\xb5\x13\x30\x48\x91\x76\x35\x7b\x81\xb8\x07\x4d\x76\x90\xe4\xe8\x2e\x9a\x3c\x00\x15\x1e\x1f\xa3\x18";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_309() {
    // point with coordinate y = 1 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x1e\x3d\xf4\xdd\x7f\xb7\x71\x8c\xb0\xaa\x0d\xd7\x2f\x8a\x25\xc8\x3c\x4e\x80\x4e\x7c\xbd\x48\xc5\xe9\x65\x65\x1f\x9e\x23\xbf\x4e\
\xf0\xff\x40\xdd\x97\x96\xe4\xa9\xa5\xed\xdd\x2c\x4c\xa4\xeb\xd1\x09\x90\xd8\xfb\x89\x18\xd1\x2d\x53\xc7\x60\x01\xaf\xa9\xde\x7f";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x16\xe6\x32\xf9\x75\x2d\x36\x60\x2c\x95\xec\x27\x4b\x32\xad\x59\x4f\x39\xf6\xac\x3b\xd4\xb0\xb2\x0f\x86\x37\x39\x21\x42\xce\xf4";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_310() {
    // point with coordinate y = 1 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xe5\xc5\xdc\x3f\xd8\x8d\x85\x66\x8b\x3b\x70\x9f\xd6\xb4\x23\x2f\x1f\x80\x94\x9c\xbc\xcb\x55\x88\x36\x3e\x6c\x21\x7a\x2b\x3e\xd8\
\x8d\xbd\x0d\x6e\x3c\xc9\x7f\x30\x81\xd1\x66\x02\xaa\x3d\x1b\x65\x5e\xe0\x79\x1c\x87\xfc\xb5\xab\xe6\x21\x7d\x8c\x85\x13\x80\x7e";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x9e\xed\x4b\x96\x56\x9f\x60\x4a\x4d\x3f\x5a\xf9\x74\x99\x80\x71\x11\xfc\x98\x88\xc4\x58\xec\xe2\xe3\x00\x0e\x24\x5c\x2c\x02\xb0";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_311() {
    // point with coordinate y = 1 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x02\x1c\x41\xec\xee\xc2\x4e\x0f\xba\x89\x4a\xd7\x41\x5a\x95\x98\xcb\xcd\x14\xfa\x6c\xa4\x6e\x25\x57\x52\x68\xa1\xd8\xe5\xbb\xc6\
\x3f\x84\x6c\x6a\x18\x5f\xa3\xf2\x3b\xb9\x2c\x14\xe7\xe2\xcb\xa8\xc7\x40\x47\xc0\x9a\xf7\x66\xf5\x5e\xf0\xc9\x07\xc8\x0d\x94\x51";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x21\xac\x32\x01\x38\x38\x81\x26\x21\xdb\xb5\x84\x96\x5b\xde\xd6\xfc\x85\x1d\x3a\x02\x98\x10\x67\x9b\xc5\x7b\x23\x81\xbb\x7a\x7d";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_312() {
    // point with coordinate y = 1 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x8e\x24\x19\x2c\xd3\x33\x35\xa1\x14\xf5\x07\x02\x66\xc0\x14\xcb\x0d\x8c\x70\x4d\x16\xd6\x04\x2e\x89\xc1\x75\x97\xbc\xd4\xe7\x7e\
\xbd\xb4\xc5\x17\x17\x04\xc2\xc0\x92\x75\xc2\x2a\x31\x0e\x0c\x4f\xe0\x92\xe4\x08\x48\x56\xda\x99\xb9\x4a\xbb\xfa\x9f\x46\x9f\x48";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xfc\x59\x78\xda\x01\xca\x83\xe1\x27\xdd\xdf\x98\x9a\x03\x58\x87\x1b\x3c\x4c\xe0\x75\x5b\xfb\x02\x06\x33\xdb\x46\x7e\x21\xa5\x3c";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_313() {
    // point with coordinate y = 1 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\x31\xc9\x0a\xe4\x7a\x93\xd0\x9a\x23\x52\xb6\xf3\x67\x7e\x79\x75\xea\x62\xaa\xde\xdb\x56\xc1\x18\xeb\x8b\x9f\x77\x1e\x2d\xd9\xf5\
\xf2\x60\x1f\xb9\xcc\xa2\x30\x4e\x59\x44\x23\xcf\x48\x06\x4d\xbe\xd1\x7a\xe4\x04\x52\xf1\x8b\xe6\xae\x01\x83\x21\x91\x1e\x8c\xb3";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\x9f\x41\x73\x41\x26\x1a\xa4\x5d\x39\x6b\x0c\xcf\x2a\x3d\xee\x7a\x46\x6c\xa4\x7e\x3c\xe8\x6e\xcd\x20\x71\xd9\xc4\xdb\x08\x82\x0e";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_314() {
    // point with coordinate y = 1 in right to left addition chain
    // flags: EdgeCaseDoubling
    // expect: valid
    let public = b"\x04\
\xd2\xf2\x11\xcf\xab\x84\xe0\x1c\x8e\x55\x44\x03\x62\x34\xde\xbe\x35\xae\x10\x3b\xb8\x78\xd7\xab\xce\xa6\x82\x5f\x75\x3e\x03\xa3\
\x85\xf7\xf1\x87\x0e\x64\xf1\x26\x2a\xf6\x7a\x25\xef\x98\x80\x41\x9f\x45\x60\x8e\x7f\x9d\xa6\xde\xe8\x3f\x5f\x46\xce\xb5\x3d\xcb";
    let private = b"\x00\x80\x9c\x46\x1d\x8b\x39\x16\x35\x37\xff\x8f\x5e\xf5\xb9\x77\xe4\xcd\xb9\x80\xe7\x0e\x38\xa7\xee\x0b\x37\xcc\x87\x67\x29\xe9\xff";
    let shared = b"\xf4\x19\xfe\xbb\x32\xc2\x54\x61\x1a\xdf\x56\x9c\x2d\x58\x3b\x17\x54\x2b\x15\x38\xca\xa0\x00\x19\x67\xf0\xa4\xbc\x34\xb8\xb7\x89";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_315() {
    // edge case private key
    // flags: AdditionChain
    // expect: valid
    let public = b"\x04\
\x31\x02\x8f\x33\x77\xfc\x8f\x2b\x19\x67\xed\xaa\xb9\x02\x13\xac\xad\x0d\xa9\xf5\x08\x97\xf0\x8f\x57\x53\x7f\x78\xf1\x16\x74\x47\
\x43\xa1\x93\x01\x89\x36\x3b\xbd\xe2\xac\x4c\xbd\x16\x49\xcd\xc6\xf4\x51\xad\xd7\x1d\xd2\xf1\x6a\x8a\x86\x7f\x2b\x17\xca\xa1\x6b";
    let private = b"\x03";
    let shared = b"\x85\xa0\xb5\x85\x19\xb2\x8e\x70\xa6\x94\xec\x51\x98\xf7\x2c\x4b\xfd\xab\xaa\x30\xa7\x0f\x71\x43\xb5\xb1\xcd\x75\x36\xf7\x16\xca";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_316() {
    // edge case private key
    // flags: AdditionChain
    // expect: valid
    let public = b"\x04\
\x31\x02\x8f\x33\x77\xfc\x8f\x2b\x19\x67\xed\xaa\xb9\x02\x13\xac\xad\x0d\xa9\xf5\x08\x97\xf0\x8f\x57\x53\x7f\x78\xf1\x16\x74\x47\
\x43\xa1\x93\x01\x89\x36\x3b\xbd\xe2\xac\x4c\xbd\x16\x49\xcd\xc6\xf4\x51\xad\xd7\x1d\xd2\xf1\x6a\x8a\x86\x7f\x2b\x17\xca\xa1\x6b";
    let private = b"\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff";
    let shared = b"\xa3\x29\xa7\xd8\x04\x24\xea\x2d\x6c\x90\x43\x93\x80\x8e\x51\x0d\xfb\xb2\x81\x55\x09\x2f\x1b\xac\x28\x4d\xce\xda\x1f\x13\xaf\xe5";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_317() {
    // edge case private key
    // flags: AdditionChain
    // expect: valid
    let public = b"\x04\
\x31\x02\x8f\x33\x77\xfc\x8f\x2b\x19\x67\xed\xaa\xb9\x02\x13\xac\xad\x0d\xa9\xf5\x08\x97\xf0\x8f\x57\x53\x7f\x78\xf1\x16\x74\x47\
\x43\xa1\x93\x01\x89\x36\x3b\xbd\xe2\xac\x4c\xbd\x16\x49\xcd\xc6\xf4\x51\xad\xd7\x1d\xd2\xf1\x6a\x8a\x86\x7f\x2b\x17\xca\xa1\x6b";
    let private = b"\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    let shared = b"\xbd\x26\xd0\x29\x3e\x88\x51\xc5\x1e\xbe\x0d\x42\x63\x45\x68\x3a\xe9\x40\x26\xac\xa5\x45\x28\x2a\x47\x59\xfa\xa8\x5f\xde\x66\x87";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_318() {
    // edge case private key
    // flags: AdditionChain
    // expect: valid
    let public = b"\x04\
\x31\x02\x8f\x33\x77\xfc\x8f\x2b\x19\x67\xed\xaa\xb9\x02\x13\xac\xad\x0d\xa9\xf5\x08\x97\xf0\x8f\x57\x53\x7f\x78\xf1\x16\x74\x47\
\x43\xa1\x93\x01\x89\x36\x3b\xbd\xe2\xac\x4c\xbd\x16\x49\xcd\xc6\xf4\x51\xad\xd7\x1d\xd2\xf1\x6a\x8a\x86\x7f\x2b\x17\xca\xa1\x6b";
    let private = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff";
    let shared = b"\xea\x93\x50\xb2\x49\x0a\x20\x10\xc7\xab\xf4\x3f\xb1\xa3\x8b\xe7\x29\xa2\xde\x37\x5e\xa7\xa6\xac\x34\xff\x58\xcc\x87\xe5\x1b\x6c";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_319() {
    // edge case private key
    // flags: AdditionChain
    // expect: valid
    let public = b"\x04\
\x31\x02\x8f\x33\x77\xfc\x8f\x2b\x19\x67\xed\xaa\xb9\x02\x13\xac\xad\x0d\xa9\xf5\x08\x97\xf0\x8f\x57\x53\x7f\x78\xf1\x16\x74\x47\
\x43\xa1\x93\x01\x89\x36\x3b\xbd\xe2\xac\x4c\xbd\x16\x49\xcd\xc6\xf4\x51\xad\xd7\x1d\xd2\xf1\x6a\x8a\x86\x7f\x2b\x17\xca\xa1\x6b";
    let private = b"\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    let shared = b"\x34\xee\xd3\xf6\x67\x3d\x34\x0b\x6f\x71\x69\x13\xf6\xdf\xa3\x6b\x5a\xc8\x5f\xa6\x67\x79\x1e\x2d\x6a\x21\x7b\x0c\x0b\x7b\xa8\x07";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_320() {
    // edge case private key
    // flags: AdditionChain
    // expect: valid
    let public = b"\x04\
\x31\x02\x8f\x33\x77\xfc\x8f\x2b\x19\x67\xed\xaa\xb9\x02\x13\xac\xad\x0d\xa9\xf5\x08\x97\xf0\x8f\x57\x53\x7f\x78\xf1\x16\x74\x47\
\x43\xa1\x93\x01\x89\x36\x3b\xbd\xe2\xac\x4c\xbd\x16\x49\xcd\xc6\xf4\x51\xad\xd7\x1d\xd2\xf1\x6a\x8a\x86\x7f\x2b\x17\xca\xa1\x6b";
    let private = b"\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x83\xf3\xb9\xca\xc2\xfc\x63\x25\x51";
    let shared = b"\x13\x54\xce\x66\x92\xc9\xdf\x7b\x6f\xc3\x11\x9d\x47\xc5\x63\x38\xaf\xbe\xdc\xcb\x62\xfa\xa5\x46\xc0\xfe\x6e\xd4\x95\x9e\x41\xc3";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_321() {
    // edge case private key
    // flags: AdditionChain
    // expect: valid
    let public = b"\x04\
\x31\x02\x8f\x33\x77\xfc\x8f\x2b\x19\x67\xed\xaa\xb9\x02\x13\xac\xad\x0d\xa9\xf5\x08\x97\xf0\x8f\x57\x53\x7f\x78\xf1\x16\x74\x47\
\x43\xa1\x93\x01\x89\x36\x3b\xbd\xe2\xac\x4c\xbd\x16\x49\xcd\xc6\xf4\x51\xad\xd7\x1d\xd2\xf1\x6a\x8a\x86\x7f\x2b\x17\xca\xa1\x6b";
    let private = b"\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xa9\xca\xc2\xfc\x63\x25\x51";
    let shared = b"\xfe\x74\x96\xc3\x0d\x53\x49\x95\xf0\xbf\x42\x8b\x54\x71\xc2\x15\x85\xaa\xaf\xc8\x17\x33\x91\x6f\x01\x65\x59\x7a\x55\xd1\x2c\xb4";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_322() {
    // edge case private key
    // flags: AdditionChain
    // expect: valid
    let public = b"\x04\
\x31\x02\x8f\x33\x77\xfc\x8f\x2b\x19\x67\xed\xaa\xb9\x02\x13\xac\xad\x0d\xa9\xf5\x08\x97\xf0\x8f\x57\x53\x7f\x78\xf1\x16\x74\x47\
\x43\xa1\x93\x01\x89\x36\x3b\xbd\xe2\xac\x4c\xbd\x16\x49\xcd\xc6\xf4\x51\xad\xd7\x1d\xd2\xf1\x6a\x8a\x86\x7f\x2b\x17\xca\xa1\x6b";
    let private = b"\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb1\xca\xc2\xfc\x63\x25\x51";
    let shared = b"\x34\x8b\xf8\x04\x2e\x4e\xdf\x1d\x03\xc8\xb3\x6a\xb8\x15\x15\x6e\x77\xc2\x01\xb7\x64\xed\x45\x62\xcf\xe2\xee\x90\x63\x8f\xfe\xf5";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_323() {
    // edge case private key
    // flags: AdditionChain
    // expect: valid
    let public = b"\x04\
\x31\x02\x8f\x33\x77\xfc\x8f\x2b\x19\x67\xed\xaa\xb9\x02\x13\xac\xad\x0d\xa9\xf5\x08\x97\xf0\x8f\x57\x53\x7f\x78\xf1\x16\x74\x47\
\x43\xa1\x93\x01\x89\x36\x3b\xbd\xe2\xac\x4c\xbd\x16\x49\xcd\xc6\xf4\x51\xad\xd7\x1d\xd2\xf1\x6a\x8a\x86\x7f\x2b\x17\xca\xa1\x6b";
    let private = b"\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc1\xfc\x63\x25\x51";
    let shared = b"\x6e\x4e\xc5\x47\x9a\x7c\x20\xa5\x37\x50\x17\x00\x48\x4f\x6f\x43\x3a\x8a\x8f\xe5\x3c\x28\x8f\x7a\x25\xc8\xe8\xc9\x2d\x39\xe8\xdc";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_324() {
    // edge case private key
    // flags: AdditionChain
    // expect: valid
    let public = b"\x04\
\x31\x02\x8f\x33\x77\xfc\x8f\x2b\x19\x67\xed\xaa\xb9\x02\x13\xac\xad\x0d\xa9\xf5\x08\x97\xf0\x8f\x57\x53\x7f\x78\xf1\x16\x74\x47\
\x43\xa1\x93\x01\x89\x36\x3b\xbd\xe2\xac\x4c\xbd\x16\x49\xcd\xc6\xf4\x51\xad\xd7\x1d\xd2\xf1\x6a\x8a\x86\x7f\x2b\x17\xca\xa1\x6b";
    let private = b"\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x24\xf3";
    let shared = b"\xf7\x40\x7d\x61\xfd\xf5\x81\xbe\x4f\x56\x46\x21\xd5\x90\xca\x9b\x7b\xa3\x7f\x31\x39\x61\x50\xf9\x92\x2f\x15\x01\xda\x8c\x83\xef";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_325() {
    // edge case private key
    // flags: AdditionChain
    // expect: valid
    let public = b"\x04\
\x31\x02\x8f\x33\x77\xfc\x8f\x2b\x19\x67\xed\xaa\xb9\x02\x13\xac\xad\x0d\xa9\xf5\x08\x97\xf0\x8f\x57\x53\x7f\x78\xf1\x16\x74\x47\
\x43\xa1\x93\x01\x89\x36\x3b\xbd\xe2\xac\x4c\xbd\x16\x49\xcd\xc6\xf4\x51\xad\xd7\x1d\xd2\xf1\x6a\x8a\x86\x7f\x2b\x17\xca\xa1\x6b";
    let private = b"\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x33";
    let shared = b"\x82\x23\x6f\xd2\x72\x20\x86\x93\xe0\x57\x45\x55\xca\x46\x5c\x6c\xc5\x12\x16\x34\x86\x08\x4f\xa5\x7f\x5e\x1b\xd2\xe2\xcc\xc0\xb3";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_326() {
    // edge case private key
    // flags: AdditionChain
    // expect: valid
    let public = b"\x04\
\x31\x02\x8f\x33\x77\xfc\x8f\x2b\x19\x67\xed\xaa\xb9\x02\x13\xac\xad\x0d\xa9\xf5\x08\x97\xf0\x8f\x57\x53\x7f\x78\xf1\x16\x74\x47\
\x43\xa1\x93\x01\x89\x36\x3b\xbd\xe2\xac\x4c\xbd\x16\x49\xcd\xc6\xf4\x51\xad\xd7\x1d\xd2\xf1\x6a\x8a\x86\x7f\x2b\x17\xca\xa1\x6b";
    let private = b"\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x43";
    let shared = b"\x06\x53\x71\x49\x66\x4d\xba\x1a\x99\x24\x65\x4c\xb7\xf7\x87\xed\x22\x48\x51\xb0\xdf\x25\xef\x53\xfc\xf5\x4f\x8f\x26\xcd\x5f\x3f";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_327() {
    // edge case private key
    // flags: AdditionChain
    // expect: valid
    let public = b"\x04\
\x31\x02\x8f\x33\x77\xfc\x8f\x2b\x19\x67\xed\xaa\xb9\x02\x13\xac\xad\x0d\xa9\xf5\x08\x97\xf0\x8f\x57\x53\x7f\x78\xf1\x16\x74\x47\
\x43\xa1\x93\x01\x89\x36\x3b\xbd\xe2\xac\x4c\xbd\x16\x49\xcd\xc6\xf4\x51\xad\xd7\x1d\xd2\xf1\x6a\x8a\x86\x7f\x2b\x17\xca\xa1\x6b";
    let private = b"\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x4b";
    let shared = b"\xf2\xb3\x85\x39\xbc\xe9\x95\xd4\x43\xc7\xbf\xee\xef\xad\xc9\xe4\x2c\xc2\xc8\x9c\x60\xbf\x4e\x86\xea\xc9\x5d\x51\x98\x7b\xd1\x12";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_328() {
    // edge case private key
    // flags: AdditionChain
    // expect: valid
    let public = b"\x04\
\x31\x02\x8f\x33\x77\xfc\x8f\x2b\x19\x67\xed\xaa\xb9\x02\x13\xac\xad\x0d\xa9\xf5\x08\x97\xf0\x8f\x57\x53\x7f\x78\xf1\x16\x74\x47\
\x43\xa1\x93\x01\x89\x36\x3b\xbd\xe2\xac\x4c\xbd\x16\x49\xcd\xc6\xf4\x51\xad\xd7\x1d\xd2\xf1\x6a\x8a\x86\x7f\x2b\x17\xca\xa1\x6b";
    let private = b"\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x4e";
    let shared = b"\x85\xa0\xb5\x85\x19\xb2\x8e\x70\xa6\x94\xec\x51\x98\xf7\x2c\x4b\xfd\xab\xaa\x30\xa7\x0f\x71\x43\xb5\xb1\xcd\x75\x36\xf7\x16\xca";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_329() {
    // edge case private key
    // flags: AdditionChain
    // expect: valid
    let public = b"\x04\
\x31\x02\x8f\x33\x77\xfc\x8f\x2b\x19\x67\xed\xaa\xb9\x02\x13\xac\xad\x0d\xa9\xf5\x08\x97\xf0\x8f\x57\x53\x7f\x78\xf1\x16\x74\x47\
\x43\xa1\x93\x01\x89\x36\x3b\xbd\xe2\xac\x4c\xbd\x16\x49\xcd\xc6\xf4\x51\xad\xd7\x1d\xd2\xf1\x6a\x8a\x86\x7f\x2b\x17\xca\xa1\x6b";
    let private = b"\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x4f";
    let shared = b"\x02\x7b\x01\x3a\x6f\x16\x6d\xb6\x55\xd6\x9d\x64\x3c\x12\x7e\xf8\xac\xe1\x75\x31\x1e\x66\x7d\xff\x25\x20\xf5\xb5\xc7\x5b\x76\x59";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_330() {
    // CVE-2017-8932
    // flags: CVE-2017-8932
    // expect: valid
    let public = b"\x04\
\x02\x38\x19\x81\x3a\xc9\x69\x84\x70\x59\x02\x8e\xa8\x8a\x1f\x30\xdf\xbc\xde\x03\xfc\x79\x1d\x3a\x25\x2c\x6b\x41\x21\x18\x82\xea\
\xf9\x3e\x4a\xe4\x33\xcc\x12\xcf\x2a\x43\xfc\x0e\xf2\x64\x00\xc0\xe1\x25\x50\x82\x24\xcd\xb6\x49\x38\x0f\x25\x47\x91\x48\xa4\xad";
    let private = b"\x2a\x26\x5f\x8b\xcb\xdc\xaf\x94\xd5\x85\x19\x14\x1e\x57\x81\x24\xcb\x40\xd6\x4a\x50\x1f\xba\x9c\x11\x84\x7b\x28\x96\x5b\xc7\x37";
    let shared = b"\x4d\x4d\xe8\x0f\x15\x34\x85\x0d\x26\x10\x75\x99\x7e\x30\x49\x32\x1a\x08\x64\x08\x2d\x24\xa9\x17\x86\x33\x66\xc0\x72\x4f\x5a\xe3";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}

#[test]
fn test_point_mul_331() {
    // CVE-2017-8932
    // flags: CVE-2017-8932
    // expect: valid
    let public = b"\x04\
\xcc\x11\x88\x7b\x2d\x66\xcb\xae\x8f\x4d\x30\x66\x27\x19\x25\x22\x93\x21\x46\xb4\x2f\x01\xd3\xc6\xf9\x2b\xd5\xc8\xba\x73\x9b\x06\
\xa2\xf0\x8a\x02\x9c\xd0\x6b\x46\x18\x30\x85\xba\xe9\x24\x8b\x0e\xd1\x5b\x70\x28\x0c\x7e\xf1\x3a\x45\x7f\x5a\xf3\x82\x42\x60\x31";
    let private = b"\x31\x3f\x72\xff\x9f\xe8\x11\xbf\x57\x31\x76\x23\x1b\x28\x6a\x3b\xdb\x6f\x1b\x14\xe0\x5c\x40\x14\x65\x90\x72\x7a\x71\xc3\xbc\xcd";
    let shared = b"\x83\x1c\x3f\x6b\x5f\x76\x2d\x2f\x46\x19\x01\x57\x7a\xf4\x13\x54\xac\x5f\x22\x8c\x25\x91\xf8\x4f\x8a\x6e\x51\xe2\xe3\xf1\x79\x91";
    let public_key = PublicKey::from_x962_uncompressed(public).unwrap();
    let private_key = PrivateKey::from_bytes(private).unwrap();
    let result = private_key.diffie_hellman(&public_key).unwrap();
    assert_eq!(&result.0[..], &shared[..]);
}
