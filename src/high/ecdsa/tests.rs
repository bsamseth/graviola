//! Tests generated from wycheproof input data

use crate::high::curve::P256;
use crate::high::ecdsa::VerifyingKey;
use crate::Error;

#[test]
fn test_verify_ecdsa_p256_sha256_1() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x2b\xa3\xa8\xbe\x6b\x94\xd5\xec\x80\xa6\xd9\xd1\x19\x0a\x43\x6e\xff\xe5\x0d\x85\xa1\xee\xe8\x59\xb8\xcc\x6a\xf9\xbd\x5c\x2e\x18\x4c\xd6\x0b\x85\x5d\x44\x2f\x5b\x3c\x7b\x11\xeb\x6c\x4e\x0a\xe7\x52\x5f\xe7\x10\xfa\xb9\xaa\x7c\x77\xa6\x7f\x79\xe6\xfa\xdd\x76";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_2() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x01\x2b\xa3\xa8\xbd\x6b\x94\xd5\xed\x80\xa6\xd9\xd1\x19\x0a\x43\x6e\xbc\xcc\x08\x33\x49\x06\x86\xde\xac\x86\x35\xbc\xb9\xbf\x53\x69\x00\xb3\x29\xf4\x79\xa2\xbb\xd0\xa5\xc3\x84\xee\x14\x93\xb1\xf5\x18\x6a\x87\x13\x9c\xac\x5d\xf4\x08\x7c\x13\x4b\x49\x15\x68\x47\xdb";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::WrongLength)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_3() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x01\x00\x2b\xa3\xa7\xbe\x6b\x94\xd6\xec\x80\xa6\xd9\xd1\x19\x0a\x43\x2b\xe6\xdf\xbb\x2c\xb9\x8d\x6d\x4d\x72\x97\x2d\xf6\x20\x81\x7f\x18\x00\x00\xb3\x29\xf4\x79\xa2\xbb\xd0\xa5\xc3\x84\xee\x14\x93\xb1\xf5\x18\x6a\x87\x13\x9c\xac\x5d\xf4\x08\x7c\x13\x4b\x49\x15\x68\x47\xdb";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::WrongLength)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_4() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xd4\x5c\x57\x40\x94\x6b\x2a\x14\x7f\x59\x26\x2e\xe6\xf5\xbc\x90\xbd\x01\xed\x28\x05\x28\xb6\x2b\x3a\xed\x5f\xc9\x3f\x06\xf7\x39\xb3\x29\xf4\x79\xa2\xbb\xd0\xa5\xc3\x84\xee\x14\x93\xb1\xf5\x18\x6a\x87\x13\x9c\xac\x5d\xf4\x08\x7c\x13\x4b\x49\x15\x68\x47\xdb";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_5() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x01\x2b\xa3\xa8\xbe\x6b\x94\xd5\xec\x80\xa6\xd9\xd1\x19\x0a\x43\x6e\xff\xe5\x0d\x85\xa1\xee\xe8\x59\xb8\xcc\x6a\xf9\xbd\x5c\x2e\x18\x00\xb3\x29\xf4\x79\xa2\xbb\xd0\xa5\xc3\x84\xee\x14\x93\xb1\xf5\x18\x6a\x87\x13\x9c\xac\x5d\xf4\x08\x7c\x13\x4b\x49\x15\x68\x47\xdb";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::WrongLength)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_6() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x01\x00\x00\x00\x00\x00\x00\x00\x00\x2b\xa3\xa8\xbe\x6b\x94\xd5\xec\x80\xa6\xd9\xd1\x19\x0a\x43\x6e\xff\xe5\x0d\x85\xa1\xee\xe8\x59\xb8\xcc\x6a\xf9\xbd\x5c\x2e\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb3\x29\xf4\x79\xa2\xbb\xd0\xa5\xc3\x84\xee\x14\x93\xb1\xf5\x18\x6a\x87\x13\x9c\xac\x5d\xf4\x08\x7c\x13\x4b\x49\x15\x68\x47\xdb";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::WrongLength)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_7() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x01\xb3\x29\xf4\x78\xa2\xbb\xd0\xa6\xc3\x84\xee\x14\x93\xb1\xf5\x18\x27\x6e\x0e\x4a\x53\x75\x92\x8d\x6f\xcd\x16\x0c\x11\xcb\x6d\x2c\x00\xb3\x29\xf4\x79\xa2\xbb\xd0\xa5\xc3\x84\xee\x14\x93\xb1\xf5\x18\x6a\x87\x13\x9c\xac\x5d\xf4\x08\x7c\x13\x4b\x49\x15\x68\x47\xdb";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::WrongLength)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_8() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x01\x00\xb3\x29\xf3\x79\xa2\xbb\xd1\xa5\xc3\x84\xee\x14\x93\xb1\xf4\xd5\x51\x81\xc1\x43\xc3\xfc\x78\xfc\x35\xde\x0e\x45\x78\x8d\x98\xdb\x00\x00\xb3\x29\xf4\x79\xa2\xbb\xd0\xa5\xc3\x84\xee\x14\x93\xb1\xf5\x18\x6a\x87\x13\x9c\xac\x5d\xf4\x08\x7c\x13\x4b\x49\x15\x68\x47\xdb";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::WrongLength)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_9() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x01\xb3\x29\xf4\x79\xa2\xbb\xd0\xa5\xc3\x84\xee\x14\x93\xb1\xf5\x18\x6a\x87\x13\x9c\xac\x5d\xf4\x08\x7c\x13\x4b\x49\x15\x68\x47\xdb\x00\xb3\x29\xf4\x79\xa2\xbb\xd0\xa5\xc3\x84\xee\x14\x93\xb1\xf5\x18\x6a\x87\x13\x9c\xac\x5d\xf4\x08\x7c\x13\x4b\x49\x15\x68\x47\xdb";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::WrongLength)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_10() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x01\x00\x00\x00\x00\x00\x00\x00\x00\xb3\x29\xf4\x79\xa2\xbb\xd0\xa5\xc3\x84\xee\x14\x93\xb1\xf5\x18\x6a\x87\x13\x9c\xac\x5d\xf4\x08\x7c\x13\x4b\x49\x15\x68\x47\xdb\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb3\x29\xf4\x79\xa2\xbb\xd0\xa5\xc3\x84\xee\x14\x93\xb1\xf5\x18\x6a\x87\x13\x9c\xac\x5d\xf4\x08\x7c\x13\x4b\x49\x15\x68\x47\xdb";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::WrongLength)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_11() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_12() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_13() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x51";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_14() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x50";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_15() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x52";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_16() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_17() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_18() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_19() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_20() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x51";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_21() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x50";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_22() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x52";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_23() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_24() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_25() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_26() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x51\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_27() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x51\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x51";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_28() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x51\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x50";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_29() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x51\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x52";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_30() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x51\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_31() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x51\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_32() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x50\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_33() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x50\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_34() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x50\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x51";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_35() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x50\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x50";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_36() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x50\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x52";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_37() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x50\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_38() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x50\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_39() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x52\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_40() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x52\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_41() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x52\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x51";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_42() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x52\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x50";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_43() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x52\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x52";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_44() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x52\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_45() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x52\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_46() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_47() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_48() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x51";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_49() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x50";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_50() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x52";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_51() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_52() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_53() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_54() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_55() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x51";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_56() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x50";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_57() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x52";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_58() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_59() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_60() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x36\x39\x38\x31\x39";
    let hash = b"\x70\x23\x9d\xd8\x77\xf7\xc9\x44\xc4\x22\xf4\x4d\xea\x4e\xd1\xa5\x2f\x26\x27\x41\x6f\xaf\x2f\x07\x2f\xa5\x0c\x77\x2e\xd6\xf8\x07";
    let signature = b"\x64\xa1\xaa\xb5\x00\x0d\x0e\x80\x4f\x3e\x2f\xc0\x2b\xde\xe9\xbe\x8f\xf3\x12\x33\x4e\x2b\xa1\x6d\x11\x54\x7c\x97\x71\x1c\x89\x8e\x6a\xf0\x15\x97\x1c\xc3\x0b\xe6\xd1\xa2\x06\xd4\xe0\x13\xe0\x99\x77\x72\xa2\xf9\x1d\x73\x28\x6f\xfd\x68\x3b\x9b\xb2\xcf\x4f\x1b";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_61() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x34\x32\x36\x34\x37\x39\x37\x32\x34";
    let hash = b"\x00\x00\x00\x00\x69\x0e\xd4\x26\xcc\xf1\x78\x03\xeb\xe2\xbd\x08\x84\xbc\xd5\x8a\x1b\xb5\xe7\x47\x7e\xad\x36\x45\xf3\x56\xe7\xa9";
    let signature = b"\x16\xae\xa9\x64\xa2\xf6\x50\x6d\x6f\x78\xc8\x1c\x91\xfc\x7e\x8b\xde\xd7\xd3\x97\x73\x84\x48\xde\x1e\x19\xa0\xec\x58\x0b\xf2\x66\x25\x2c\xd7\x62\x13\x0c\x66\x67\xcf\xe8\xb7\xbc\x47\xd2\x7d\x78\x39\x1e\x8e\x80\xc5\x78\xd1\xcd\x38\xc3\xff\x03\x3b\xe9\x28\xe9";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_62() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x37\x31\x33\x38\x36\x38\x34\x38\x39\x31";
    let hash = b"\x73\x00\x00\x00\x00\x21\x3f\x2a\x52\x5c\x60\x35\x72\x52\x35\xc2\xf6\x96\xad\x3e\xbb\x5e\xe4\x7f\x14\x06\x97\xad\x25\x77\x0d\x91";
    let signature = b"\x9c\xc9\x8b\xe2\x34\x7d\x46\x9b\xf4\x76\xdf\xc2\x6b\x9b\x73\x3d\xf2\xd2\x6d\x6e\xf5\x24\xaf\x91\x7c\x66\x5b\xac\xcb\x23\xc8\x82\x09\x34\x96\x45\x9e\xff\xe2\xd8\xd7\x07\x27\xb8\x24\x62\xf6\x1d\x0e\xc1\xb7\x84\x79\x29\xd1\x0e\xa6\x31\xda\xcb\x16\xb5\x6c\x32";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_63() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x30\x33\x35\x39\x33\x33\x31\x36\x36\x38";
    let hash = b"\xdd\xf2\x00\x00\x00\x00\x5e\x0b\xe0\x63\x5b\x24\x5f\x0b\x97\x97\x8a\xfd\x25\xda\xad\xeb\x3e\xdb\x4a\x01\x61\xc2\x7f\xe0\x60\x45";
    let signature = b"\x73\xb3\xc9\x0e\xcd\x39\x00\x28\x05\x81\x64\x52\x4d\xde\x89\x27\x03\xdc\xe3\xde\xa0\xd5\x3f\xa8\x09\x39\x99\xf0\x7a\xb8\xaa\x43\x2f\x67\xb0\xb8\xe2\x06\x36\x69\x5b\xb7\xd8\xbf\x0a\x65\x1c\x80\x2e\xd2\x5a\x39\x53\x87\xb5\xf4\x18\x8c\x0c\x40\x75\xc8\x86\x34";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_64() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x33\x39\x34\x39\x34\x30\x31\x32\x31\x35";
    let hash = b"\x67\xab\x19\x00\x00\x00\x00\x78\x47\x69\xc4\xec\xb9\xe1\x64\xd6\x64\x2b\x84\x99\x58\x8b\x89\x85\x5b\xe1\xec\x35\x5d\x08\x41\xa0";
    let signature = b"\xbf\xab\x30\x98\x25\x28\x47\xb3\x28\xfa\xdf\x2f\x89\xb9\x5c\x85\x1a\x7f\x0e\xb3\x90\x76\x33\x78\xf3\x7e\x90\x11\x9d\x5b\xa3\xdd\xbd\xd6\x4e\x23\x4e\x83\x2b\x10\x67\xc2\xd0\x58\xcc\xb4\x4d\x97\x81\x95\xcc\xeb\xb6\x5c\x2a\xaf\x1e\x2d\xa9\xb8\xb4\x98\x7e\x3b";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_65() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x33\x34\x34\x32\x39\x33\x30\x37\x39";
    let hash = b"\xa2\xbf\x09\x46\x00\x00\x00\x00\x76\xd7\xdb\xef\xfe\x12\x5e\xaf\x02\x09\x5d\xff\x25\x2e\xe9\x05\xe2\x96\xb6\x35\x0f\xc3\x11\xcf";
    let signature = b"\x20\x4a\x97\x84\x07\x4b\x24\x6d\x8b\xf8\xbf\x04\xa4\xce\xb1\xc1\xf1\xc9\xaa\xab\x16\x8b\x15\x96\xd1\x70\x93\xc5\xcd\x21\xd2\xcd\x51\xcc\xe4\x16\x70\x63\x67\x83\xdc\x06\xa7\x59\xc8\x84\x78\x68\xa4\x06\xc2\x50\x6f\xe1\x79\x75\x58\x2f\xe6\x48\xd1\xd8\x8b\x52";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_66() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x33\x37\x30\x36\x32\x31\x31\x37\x31\x32";
    let hash = b"\x35\x54\xe8\x27\xc7\x00\x00\x00\x00\xe1\xe7\x5e\x62\x4a\x06\xb3\xa0\xa3\x53\x17\x11\x60\x85\x81\x29\xe1\x5c\x54\x4e\x4f\x0e\x65";
    let signature = b"\xed\x66\xdc\x34\xf5\x51\xac\x82\xf6\x3d\x4a\xa4\xf8\x1f\xe2\xcb\x00\x31\xa9\x1d\x13\x14\xf8\x35\x02\x7b\xca\x0f\x1c\xee\xaa\x03\x99\xca\x12\x3a\xa0\x9b\x13\xcd\x19\x4a\x42\x2e\x18\xd5\xfd\xa1\x67\x62\x3c\x3f\x6e\x5d\x4d\x6a\xbb\x89\x53\xd6\x7c\x0c\x48\xc7";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_67() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x33\x34\x33\x36\x38\x38\x37\x31\x32";
    let hash = b"\x9b\x6c\xd3\xb8\x12\x61\x00\x00\x00\x00\x26\x94\x1a\x0f\x0b\xb5\x32\x55\xea\x4c\x9f\xd0\xcb\x34\x26\xe3\xa5\x4b\x9f\xc6\x96\x5c";
    let signature = b"\x06\x0b\x70\x0b\xef\x66\x5c\x68\x89\x9d\x44\xf2\x35\x6a\x57\x8d\x12\x6b\x06\x20\x23\xcc\xc3\xc0\x56\xbf\x0f\x60\xa2\x37\x01\x2b\x8d\x18\x6c\x02\x78\x32\x96\x5f\x4f\xcc\x78\xa3\x36\x6c\xa9\x5d\xed\xbb\x41\x0c\xbe\xf3\xf2\x6d\x6b\xe5\xd5\x81\xc1\x1d\x36\x10";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_68() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x33\x35\x31\x35\x33\x30\x33\x37\x30";
    let hash = b"\x88\x3a\xe3\x9f\x50\xbf\x01\x00\x00\x00\x00\xe7\x56\x1c\x26\xfc\x82\xa5\x2b\xaa\x51\xc7\x1c\xa8\x77\x16\x2f\x93\xc4\xae\x01\x86";
    let signature = b"\x9f\x6a\xdf\xe8\xd5\xeb\x5b\x2c\x24\xd7\xaa\x79\x34\xb6\xcf\x29\xc9\x3e\xa7\x6c\xd3\x13\xc9\x13\x2b\xb0\xc8\xe3\x8c\x96\x83\x1d\xb2\x6a\x9c\x9e\x40\xe5\x5e\xe0\x89\x0c\x94\x4c\xf2\x71\x75\x6c\x90\x6a\x33\xe6\x6b\x5b\xd1\x5e\x05\x15\x93\x88\x3b\x5e\x99\x02";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_69() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x36\x35\x35\x33\x32\x30\x33\x31\x32\x36";
    let hash = b"\xa1\xce\x5d\x6e\x5e\xca\xf2\x8b\x00\x00\x00\x00\x00\xfa\x7c\xd0\x10\x54\x0f\x42\x0f\xb4\xff\x74\x01\xfe\x9f\xce\x01\x1d\x0b\xa6";
    let signature = b"\xa1\xaf\x03\xca\x91\x67\x7b\x67\x3a\xd2\xf3\x36\x15\xe5\x61\x74\xa1\xab\xf6\xda\x16\x8c\xeb\xfa\x88\x68\xf4\xba\x27\x3f\x16\xb7\x20\xaa\x73\xff\xe4\x8a\xfa\x64\x35\xcd\x25\x8b\x17\x3d\x0c\x23\x77\xd6\x90\x22\xe7\xd0\x98\xd7\x5c\xaf\x24\xc8\xc5\xe0\x6b\x1c";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_70() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x35\x36\x34\x33\x34\x36\x36\x30\x33";
    let hash = b"\x8e\xa5\xf6\x45\xf3\x73\xf5\x80\x93\x00\x00\x00\x00\x38\x34\x53\x97\x33\x00\x12\xa8\xee\x83\x6c\x54\x94\xcd\xff\xd5\xee\x80\x54";
    let signature = b"\xfd\xc7\x06\x02\x76\x6f\x8e\xed\x11\xa6\xc9\x9a\x71\xc9\x73\xd5\x65\x93\x55\x50\x7b\x84\x3d\xa6\xe3\x27\xa2\x8c\x11\x89\x3d\xb9\x3d\xf5\x34\x96\x88\xa0\x85\xb1\x37\xb1\xea\xcf\x45\x6a\x9e\x9e\x0f\x6d\x15\xec\x00\x78\xca\x60\xa7\xf8\x3f\x2b\x10\xd2\x13\x50";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_71() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x34\x34\x32\x39\x35\x33\x39\x31\x31\x37";
    let hash = b"\x66\x05\x70\xd3\x23\xe9\xf7\x5f\xa7\x34\x00\x00\x00\x00\x87\x92\xd6\x5c\xe9\x3e\xab\xb7\xd6\x0d\x8d\x9c\x1b\xbd\xcb\x5e\xf3\x05";
    let signature = b"\xb5\x16\xa3\x14\xf2\xfc\xe5\x30\xd6\x53\x7f\x6a\x6c\x49\x96\x6c\x23\x45\x6f\x63\xc6\x43\xcf\x8e\x0d\xc7\x38\xf7\xb8\x76\xe6\x75\xd3\x9f\xfd\x03\x3c\x92\xb6\xd7\x17\xdd\x53\x6f\xbc\x5e\xfd\xf1\x96\x7c\x4b\xd8\x09\x54\x47\x9b\xa6\x6b\x01\x20\xcd\x16\xff\xf2";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_72() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x30\x39\x35\x33\x32\x36\x31\x33\x35\x31";
    let hash = b"\xd0\x46\x26\x73\x15\x4c\xce\x58\x7d\xde\x88\x00\x00\x00\x00\xe9\x8d\x35\xf1\xf4\x5c\xf9\xc3\xbf\x46\xad\xa2\xde\x4c\x56\x8c\x34";
    let signature = b"\x3b\x2c\xbf\x04\x6e\xac\x45\x84\x2e\xcb\x79\x84\xd4\x75\x83\x15\x82\x71\x7b\xeb\xb6\x49\x2f\xd0\xa4\x85\xc1\x01\xe2\x9f\xf0\xa8\x4c\x9b\x7b\x47\xa9\x8b\x0f\x82\xde\x51\x2b\xc9\x31\x3a\xaf\x51\x70\x10\x99\xca\xc5\xf7\x6e\x68\xc8\x59\x5f\xc1\xc1\xd9\x92\x58";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_73() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x35\x39\x38\x37\x33\x35\x30\x30\x34\x31";
    let hash = b"\xbd\x90\x64\x02\x69\xa7\x82\x26\x80\xce\xdf\xef\x00\x00\x00\x00\x0c\xae\xf1\x5a\x61\x71\x05\x9a\xb8\x3e\x7b\x44\x18\xd7\x27\x8f";
    let signature = b"\x30\xc8\x7d\x35\xe6\x36\xf5\x40\x84\x1f\x14\xaf\x54\xe2\xf9\xed\xd7\x9d\x03\x12\xcf\xa1\xab\x65\x6c\x3f\xb1\x5b\xfd\xe4\x8d\xcf\x47\xc1\x5a\x5a\x82\xd2\x4b\x75\xc8\x5a\x69\x2b\xd6\xec\xaf\xeb\x71\x40\x9e\xde\x23\xef\xd0\x8e\x0d\xb9\xab\xf6\x34\x06\x77\xed";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_74() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x33\x34\x36\x33\x30\x30\x36\x38\x37\x38";
    let hash = b"\x33\x23\x9a\x52\xd7\x2f\x13\x11\x51\x2e\x41\x22\x2a\x00\x00\x00\x00\xd2\xdc\xce\xb3\x01\xc5\x4b\x4b\xea\xe8\xe2\x84\x78\x8a\x73";
    let signature = b"\x38\x68\x6f\xf0\xfd\xa2\xce\xf6\xbc\x43\xb5\x8c\xfe\x66\x47\xb9\xe2\xe8\x17\x6d\x16\x8d\xec\x3c\x68\xff\x26\x21\x13\x76\x0f\x52\x06\x7e\xc3\xb6\x51\xf4\x22\x66\x96\x01\x66\x21\x67\xfa\x87\x17\xe9\x76\xe2\xdb\x5e\x6a\x4c\xf7\xc2\xdd\xab\xb3\xfd\xe9\xd6\x7d";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_75() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x39\x38\x31\x37\x33\x32\x30\x32\x38\x37";
    let hash = b"\xb8\xd6\x4f\xbc\xd4\xa1\xc1\x0f\x13\x65\xd4\xe6\xd9\x5c\x00\x00\x00\x00\x7e\xe4\xa2\x1a\x1c\xbe\x1d\xc8\x4c\x2d\x94\x1f\xfa\xf1";
    let signature = b"\x44\xa3\xe2\x3b\xf3\x14\xf2\xb3\x44\xfc\x25\xc7\xf2\xde\x8b\x6a\xf3\xe1\x7d\x27\xf5\xee\x84\x4b\x22\x59\x85\xab\x6e\x27\x75\xcf\x2d\x48\xe2\x23\x20\x5e\x98\x04\x1d\xdc\x87\xbe\x53\x2a\xbe\xd5\x84\xf0\x41\x1f\x57\x29\x50\x04\x93\xc9\xcc\x3f\x4d\xd1\x5e\x86";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_76() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x33\x32\x32\x32\x30\x34\x31\x30\x34\x36";
    let hash = b"\x01\x60\x3d\x39\x82\xbf\x77\xd7\xa3\xfe\xf3\x18\x3e\xd0\x92\x00\x00\x00\x00\x3a\x22\x74\x20\xdb\x40\x88\xb2\x0f\xe0\xe9\xd8\x4a";
    let signature = b"\x2d\xed\x5b\x7e\xc8\xe9\x0e\x7b\xf1\x1f\x96\x7a\x3d\x95\x11\x0c\x41\xb9\x9d\xb3\xb5\xaa\x8d\x33\x0e\xb9\xd6\x38\x78\x16\x88\xe9\x7d\x57\x92\xc5\x36\x28\x15\x5e\x1b\xfc\x46\xfb\x1a\x67\xe3\x08\x8d\xe0\x49\xc3\x28\xae\x1f\x44\xec\x69\x23\x8a\x00\x98\x08\xf9";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_77() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x36\x36\x36\x36\x33\x30\x37\x31\x30\x34";
    let hash = b"\x9e\xa6\x99\x4f\x1e\x03\x84\xc8\x59\x9a\xa0\x2e\x6c\xf6\x6d\x9c\x00\x00\x00\x00\x4d\x89\xef\x50\xb7\xe9\xeb\x0c\xfb\xff\x73\x63";
    let signature = b"\xbd\xae\x7b\xcb\x58\x0b\xf3\x35\xef\xd3\xbc\x3d\x31\x87\x0f\x92\x3e\xac\xca\xfc\xd4\x0e\xc2\xf6\x05\x97\x6f\x15\x13\x7d\x8b\x8f\xf6\xdf\xa1\x2f\x19\xe5\x25\x27\x0b\x01\x06\xee\xcf\xe2\x57\x49\x9f\x37\x3a\x4f\xb3\x18\x99\x4f\x24\x83\x81\x22\xce\x7e\xc3\xc7";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_78() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x30\x33\x35\x39\x35\x31\x38\x39\x38";
    let hash = b"\xd0\x32\x15\xa8\x40\x1b\xcf\x16\x69\x39\x79\x37\x1a\x01\x06\x8a\x47\x00\x00\x00\x00\xe2\xfa\x5b\xf6\x92\xbc\x67\x09\x05\xb1\x8c";
    let signature = b"\x50\xf9\xc4\xf0\xcd\x69\x40\xe1\x62\x72\x09\x57\xff\xff\x51\x37\x99\x20\x9b\x78\x59\x69\x56\xd2\x1e\xce\x25\x1c\x24\x01\xf1\xc6\xd7\x03\x3a\x0a\x78\x7d\x33\x8e\x88\x9d\xef\xaa\xab\xb1\x06\xb9\x5a\x43\x55\xe4\x11\xa5\x9c\x32\xaa\x51\x67\xdf\xab\x24\x47\x26";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_79() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x38\x34\x36\x35\x39\x37\x31\x39\x35";
    let hash = b"\x30\x7b\xfa\xaf\xfb\x65\x0c\x88\x9c\x84\xbf\x83\xf0\x30\x0e\x5d\xc8\x7e\x00\x00\x00\x00\x84\x08\xfd\x5f\x64\xb5\x82\xe3\xbb\x14";
    let signature = b"\xf6\x12\x82\x06\x87\x60\x4f\xa0\x19\x06\x06\x6a\x37\x8d\x67\x54\x09\x82\xe2\x95\x75\xd0\x19\xaa\xbe\x90\x92\x4e\xad\x5c\x86\x0d\x3f\x93\x67\x70\x2d\xd7\xdd\x4f\x75\xea\x98\xaf\xd2\x0e\x32\x8a\x1a\x99\xf4\x85\x7b\x31\x65\x25\x32\x82\x30\xce\x29\x4b\x0f\xef";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_80() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x33\x31\x33\x36\x30\x34\x36\x31\x38\x39";
    let hash = b"\xba\xb5\xc4\xf4\xdf\x54\x0d\x7b\x33\x32\x4d\x36\xbb\x0c\x15\x75\x51\x52\x7c\x00\x00\x00\x00\xe4\xaf\x57\x4b\xb4\xd5\x4e\xa6\xb8";
    let signature = b"\x95\x05\xe4\x07\x65\x7d\x6e\x8b\xc9\x3d\xb5\xda\x7a\xa6\xf5\x08\x1f\x61\x98\x0c\x19\x49\xf5\x6b\x0f\x2f\x50\x7d\xa5\x78\x2a\x7a\xc6\x0d\x31\x90\x4e\x36\x69\x73\x8f\xfb\xec\xca\xb6\xc3\x65\x6c\x08\xe0\xed\x5c\xb9\x2b\x3c\xfa\x5e\x7f\x71\x78\x4f\x9c\x50\x21";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_81() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x32\x36\x36\x33\x37\x38\x34\x32\x35\x34";
    let hash = b"\xd4\xba\x47\xf6\xae\x28\xf2\x74\xe4\xf5\x8d\x80\x36\xf9\xc3\x6e\xc2\x45\x6f\x5b\x00\x00\x00\x00\xc3\xb8\x69\x19\x7e\xf5\xe1\x5e";
    let signature = b"\xbb\xd1\x6f\xbb\xb6\x56\xb6\xd0\xd8\x3e\x6a\x77\x87\xcd\x69\x1b\x08\x73\x5a\xed\x37\x17\x32\x72\x3e\x1c\x68\xa4\x04\x04\x51\x7d\x9d\x8e\x35\xdb\xa9\x60\x28\xb7\x78\x7d\x91\x31\x5b\xe6\x75\x87\x7d\x2d\x09\x7b\xe5\xe8\xee\x34\x56\x0e\x3e\x7f\xd2\x5c\x0f\x00";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_82() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x36\x35\x32\x31\x30\x30\x35\x32\x34";
    let hash = b"\x79\xfd\x19\xc7\x23\x5e\xa2\x12\xf2\x9f\x1f\xa0\x09\x84\x34\x2a\xfe\x0f\x10\xaa\xfd\x00\x00\x00\x00\x80\x1e\x47\xf8\xc1\x84\xe1";
    let signature = b"\x2e\xc9\x76\x01\x22\xdb\x98\xfd\x06\xea\x76\x84\x8d\x35\xa6\xda\x44\x2d\x2c\xee\xf7\x55\x9a\x30\xcf\x57\xc6\x1e\x92\xdf\x32\x7e\x7a\xb2\x71\xda\x90\x85\x94\x79\x70\x1f\xcc\xf8\x6e\x46\x2e\xe3\x39\x3f\xb6\x81\x4c\x27\xb7\x60\xc4\x96\x36\x25\xc0\xa1\x98\x78";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_83() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x35\x37\x34\x38\x30\x38\x31\x36\x39\x36";
    let hash = b"\x8c\x29\x1e\x8e\xea\xa4\x5a\xdb\xaf\x9a\xba\x5c\x05\x83\x46\x2d\x79\xcb\xeb\x7a\xc9\x73\x00\x00\x00\x00\xa3\x7e\xa6\x70\x0c\xda";
    let signature = b"\x54\xe7\x6b\x76\x83\xb6\x65\x0b\xaa\x6a\x7f\xc4\x9b\x1c\x51\xee\xd9\xba\x9d\xd4\x63\x22\x1f\x7a\x4f\x10\x05\xa8\x9f\xe0\x0c\x59\x2e\xa0\x76\x88\x6c\x77\x3e\xb9\x37\xec\x1c\xc8\x37\x4b\x79\x15\xcf\xd1\x1b\x1c\x1a\xe1\x16\x61\x52\xf2\xf7\x80\x6a\x31\xc8\xfd";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_84() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x36\x33\x34\x33\x39\x31\x33\x34\x36\x38";
    let hash = b"\x0e\xaa\xe8\x64\x10\x84\xfa\x97\x98\x03\xef\xbf\xb8\x14\x07\x32\xf4\xcd\xcf\x66\xc3\xf7\x8a\x00\x00\x00\x00\x3c\x27\x8a\x6b\x21";
    let signature = b"\x52\x91\xde\xaf\x24\x65\x9f\xfb\xbc\xe6\xe3\xc2\x6f\x60\x21\x09\x7a\x74\xab\xdb\xb6\x9b\xe4\xfb\x10\x41\x9c\x0c\x49\x6c\x94\x66\x65\xd6\xfc\xf3\x36\xd2\x7c\xc7\xcd\xb9\x82\xbb\x4e\x4e\xce\xf5\x82\x7f\x84\x74\x2f\x29\xf1\x0a\xbf\x83\x46\x92\x70\xa0\x3d\xc3";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_85() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x35\x34\x31\x31\x30\x33\x35\x39\x38";
    let hash = b"\xe0\x27\x16\xd0\x1f\xb2\x3a\x5a\x00\x68\x39\x9b\xf0\x1b\xab\x42\xef\x17\xc6\xd9\x6e\x13\x84\x6c\x00\x00\x00\x00\xaf\xc0\xf8\x9d";
    let signature = b"\x20\x7a\x32\x41\x81\x2d\x75\xd9\x47\x41\x9d\xc5\x8e\xfb\x05\xe8\x00\x3b\x33\xfc\x17\xeb\x50\xf9\xd1\x51\x66\xa8\x84\x79\xf1\x07\xcd\xee\x74\x9f\x2e\x49\x2b\x21\x3c\xe8\x0b\x32\xd0\x57\x4f\x62\xf1\xc5\xd7\x07\x93\xcf\x55\xe3\x82\xd5\xca\xad\xf7\x59\x27\x67";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_86() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x30\x34\x37\x38\x35\x38\x30\x31\x32\x38";
    let hash = b"\x9e\xb0\xbf\x58\x3a\x1a\x6b\x9a\x19\x4e\x9a\x16\xbc\x7d\xab\x2a\x90\x61\x76\x8a\xf8\x9d\x00\x65\x9a\x00\x00\x00\x00\xfc\x7d\xe1";
    let signature = b"\x65\x54\xe4\x9f\x82\xa8\x55\x20\x43\x28\xac\x94\x91\x3b\xf0\x1b\xbe\x84\x43\x7a\x35\x5a\x0a\x37\xc0\xde\xe3\xcf\x81\xaa\x77\x28\xae\xa0\x0d\xe2\x50\x7d\xda\xf5\xc9\x4e\x1e\x12\x69\x80\xd3\xdf\x16\x25\x0a\x2e\xae\xbc\x8b\xe4\x86\xef\xfe\x7f\x22\xb4\xf9\x29";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_87() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x30\x35\x33\x36\x32\x38\x35\x35\x36\x38";
    let hash = b"\x62\xaa\xc9\x88\x18\xb3\xb8\x4a\x2c\x21\x4f\x0d\x5e\x72\xef\x28\x6e\x10\x30\xcb\x53\xd9\xa8\x2b\x69\x0e\x00\x00\x00\x00\xcd\x15";
    let signature = b"\xa5\x4c\x50\x62\x64\x83\x39\xd2\xbf\xf0\x6f\x71\xc8\x82\x16\xc2\x6c\x6e\x19\xb4\xd8\x0a\x8c\x60\x29\x90\xac\x82\x70\x7e\xfd\xfc\xe9\x9b\xbe\x7f\xcf\xaf\xae\x3e\x69\xfd\x01\x67\x77\x51\x7a\xa0\x10\x56\x31\x7f\x46\x7a\xd0\x9a\xff\x09\xbe\x73\xc9\x73\x1b\x0d";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_88() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x39\x35\x33\x39\x30\x34\x31\x30\x35";
    let hash = b"\x37\x60\xa7\xf3\x7c\xf9\x62\x18\xf2\x9a\xe4\x37\x32\xe5\x13\xef\xd2\xb6\xf5\x52\xea\x4b\x68\x95\x46\x4b\x93\x00\x00\x00\x00\xc8";
    let signature = b"\x97\x5b\xd7\x15\x7a\x8d\x36\x3b\x30\x9f\x1f\x44\x40\x12\xb1\xa1\xd2\x30\x96\x59\x31\x33\xe7\x1b\x4c\xa8\xb0\x59\xcf\xf3\x7e\xaf\x7f\xaa\x7a\x28\xb1\xc8\x22\xba\xa2\x41\x79\x3f\x2a\xbc\x93\x0b\xd4\xc6\x98\x40\xfe\x09\x0f\x2a\xac\xc4\x67\x86\xbf\x91\x96\x22";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_89() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x39\x37\x38\x38\x34\x38\x30\x33\x39";
    let hash = b"\x0d\xa0\xa1\xd2\x85\x1d\x33\x02\x38\x34\xf2\x09\x8c\x08\x80\x09\x6b\x43\x20\xbe\xa8\x36\xcd\x9c\xbb\x6f\xf6\xc8\x00\x00\x00\x00";
    let signature = b"\x56\x94\xa6\xf8\x4b\x8f\x87\x5c\x27\x6a\xfd\x2e\xbc\xfe\x4d\x61\xde\x9e\xc9\x03\x05\xaf\xb1\x35\x7b\x95\xb3\xe0\xda\x43\x88\x5e\x0d\xff\xad\x9f\xfd\x0b\x75\x7d\x80\x51\xde\xc0\x2e\xbd\xf7\x0d\x8e\xe2\xdc\x5c\x78\x70\xc0\x82\x3b\x6c\xcc\x7c\x67\x9c\xba\xa4";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_90() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x33\x36\x31\x30\x36\x37\x32\x34\x34\x32";
    let hash = b"\xff\xff\xff\xff\x29\x38\x86\xd3\x08\x6f\xd5\x67\xaa\xfd\x59\x8f\x0f\xe9\x75\xf7\x35\x88\x71\x94\xa7\x64\xa2\x31\xe8\x2d\x28\x9a";
    let signature = b"\xa0\xc3\x0e\x80\x26\xfd\xb2\xb4\xb4\x96\x8a\x27\xd1\x6a\x6d\x08\xf7\x09\x8f\x1a\x98\xd2\x16\x20\xd7\x45\x4b\xa9\x79\x0f\x1b\xa6\x5e\x47\x04\x53\xa8\xa3\x99\xf1\x5b\xaf\x46\x3f\x9d\xec\xeb\x53\xac\xc5\xca\x64\x45\x91\x49\x68\x8b\xd2\x76\x0c\x65\x42\x43\x39";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_91() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x30\x35\x34\x32\x34\x30\x37\x30\x35";
    let hash = b"\x7b\xff\xff\xff\xff\x23\x76\xd1\xe3\xc0\x34\x45\xa0\x72\xe2\x43\x26\xac\xdc\x4c\xe1\x27\xec\x2e\x0e\x8d\x9c\xa9\x95\x27\xe7\xb7";
    let signature = b"\x61\x4e\xa8\x4a\xcf\x73\x65\x27\xdd\x73\x60\x2c\xd4\xbb\x4e\xea\x1d\xfe\xbe\xbd\x5a\xd8\xac\xa5\x2a\xa0\x22\x8c\xf7\xb9\x9a\x88\x73\x7c\xc8\x5f\x5f\x2d\x2f\x60\xd1\xb8\x18\x3f\x3e\xd4\x90\xe4\xde\x14\x36\x8e\x96\xa9\x48\x2c\x2a\x4d\xd1\x93\x19\x5c\x90\x2f";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_92() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x35\x31\x37\x34\x34\x34\x38\x31\x39\x37";
    let hash = b"\xa2\xb5\xff\xff\xff\xff\xeb\xb2\x51\xb0\x85\x37\x76\x05\xa2\x24\xbc\x80\x87\x26\x02\xa6\xe4\x67\xfd\x01\x68\x07\xe9\x7f\xa3\x95";
    let signature = b"\xbe\xad\x67\x34\xeb\xe4\x4b\x81\x0d\x3f\xb2\xea\x00\xb1\x73\x29\x45\x37\x73\x38\xfe\xbf\xd4\x39\xa8\xd7\x4d\xfb\xd0\xf9\x42\xfa\x6b\xb1\x8e\xae\x36\x61\x6a\x7d\x3c\xad\x35\x91\x9f\xd2\x1a\x8a\xf4\xbb\xe7\xa1\x0f\x73\xb3\xe0\x36\xa4\x6b\x10\x3e\xf5\x6e\x2a";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_93() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x39\x36\x37\x35\x36\x31\x32\x35\x31";
    let hash = b"\x64\x12\x27\xff\xff\xff\xff\x6f\x1b\x96\xfa\x5f\x09\x7f\xcf\x3c\xc1\xa3\xc2\x56\x87\x0d\x45\xa6\x7b\x83\xd0\x96\x7d\x4b\x20\xc0";
    let signature = b"\x49\x96\x25\x47\x9e\x16\x1d\xac\xd4\xdb\x9d\x9c\xe6\x48\x54\xc9\x8d\x92\x2c\xbf\x21\x27\x03\xe9\x65\x4f\xae\x18\x2d\xf9\xba\xd2\x42\xc1\x77\xcf\x37\xb8\x19\x3a\x01\x31\x10\x8d\x97\x81\x9e\xdd\x94\x39\x93\x60\x28\x86\x4a\xc1\x95\xb6\x4f\xca\x76\xd9\xd6\x93";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_94() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x33\x34\x34\x37\x32\x35\x33\x33\x34\x33";
    let hash = b"\x95\x84\x15\xd8\xff\xff\xff\xff\xab\xad\x03\xe2\xfc\x66\x2d\xc3\xba\x20\x35\x21\x17\x75\x02\x29\x8d\xf5\x6f\x36\x60\x0e\x0f\x8b";
    let signature = b"\x08\xf1\x6b\x80\x93\xa8\xfb\x4d\x66\xa2\xc8\x06\x5b\x54\x1b\x3d\x31\xe3\xbf\xe6\x94\xf6\xb8\x9c\x50\xfb\x1a\xaa\x6f\xf6\xc9\xb2\x9d\x64\x55\xe2\xd5\xd1\x77\x97\x48\x57\x3b\x61\x1c\xb9\x5d\x4a\x21\xf9\x67\x41\x03\x99\xb3\x9b\x53\x5b\xa3\xe5\xaf\x81\xca\x2e";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_95() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x33\x36\x38\x32\x36\x34\x33\x31\x38";
    let hash = b"\xf1\xd8\xde\x48\x58\xff\xff\xff\xff\x12\x81\x09\x35\x36\xf4\x7f\xe1\x3d\xeb\x04\xe1\xfb\xe8\xfb\x95\x45\x21\xb6\x97\x54\x20\xf8";
    let signature = b"\xbe\x26\x23\x1b\x61\x91\x65\x8a\x19\xdd\x72\xdd\xb9\x9e\xd8\xf8\xc5\x79\xb6\x93\x8d\x19\xbc\xe8\xee\xd8\xdc\x2b\x33\x8c\xb5\xf8\xe1\xd9\xa3\x2e\xe5\x6c\xff\xed\x37\xf0\xf2\x2b\x2d\xcb\x57\xd5\xc9\x43\xc1\x4f\x79\x69\x4a\x03\xb9\xc5\xe9\x69\x52\x57\x5c\x89";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_96() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x33\x32\x36\x31\x31\x39\x38\x36\x30\x38";
    let hash = b"\x09\x27\x89\x5f\x28\x02\xff\xff\xff\xff\x10\x78\x2d\xd1\x4a\x3b\x32\xdc\x5d\x47\xc0\x5e\xf6\xf1\x87\x6b\x95\xc8\x1f\xc3\x1d\xef";
    let signature = b"\x15\xe7\x68\x80\x89\x83\x16\xb1\x62\x04\xac\x92\x0a\x02\xd5\x80\x45\xf3\x6a\x22\x9d\x4a\xa4\xf8\x12\x63\x8c\x45\x5a\xbe\x04\x43\xe7\x4d\x35\x7d\x3f\xcb\x5c\x8c\x53\x37\xbd\x6a\xba\x41\x78\xb4\x55\xca\x10\xe2\x26\xe1\x3f\x96\x38\x19\x65\x06\xa1\x93\x91\x23";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_97() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x39\x36\x37\x38\x37\x38\x31\x30\x39\x34";
    let hash = b"\x60\x90\x79\x84\xaa\x7e\x8e\xff\xff\xff\xff\x4f\x33\x28\x62\xa1\x0a\x57\xc3\x06\x3f\xb5\xa3\x06\x24\xcf\x6a\x0c\x3a\xc8\x05\x89";
    let signature = b"\x35\x2e\xcb\x53\xf8\xdf\x2c\x50\x3a\x45\xf9\x84\x6f\xc2\x8d\x1d\x31\xe6\x30\x7d\x3d\xdb\xff\xc1\x13\x23\x15\xcc\x07\xf1\x6d\xad\x13\x48\xdf\xa9\xc4\x82\xc5\x58\xe1\xd0\x5c\x52\x42\xca\x1c\x39\x43\x67\x26\xec\xd2\x82\x58\xb1\x89\x97\x92\x88\x7d\xd0\xa3\xc6";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_98() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x34\x39\x35\x38\x38\x32\x33\x38\x32\x33";
    let hash = b"\xc6\xff\x19\x84\x84\x93\x91\x70\xff\xff\xff\xff\x0a\xf4\x2c\xda\x50\xf9\xa5\xf5\x06\x36\xea\x69\x42\xd6\xb9\xb8\xcd\x6a\xe1\xe2";
    let signature = b"\x4a\x40\x80\x1a\x7e\x60\x6b\xa7\x8a\x0d\xa9\x88\x2a\xb2\x3c\x76\x77\xb8\x64\x23\x49\xed\x3d\x65\x2c\x5b\xfa\x5f\x2a\x95\x58\xfb\x3a\x49\xb6\x48\x48\xd6\x82\xef\x7f\x60\x5f\x28\x32\xf7\x38\x4b\xdc\x24\xed\x29\x25\x82\x5b\xf8\xea\x77\xdc\x59\x81\x72\x57\x82";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_99() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x38\x32\x34\x36\x33\x37\x38\x33\x37";
    let hash = b"\xde\x03\x04\x19\x34\x5c\xa1\x5c\x75\xff\xff\xff\xff\x80\x74\x79\x9b\x9e\x09\x56\xcc\x43\x13\x5d\x16\xdf\xbe\x4d\x27\xd7\xe6\x8d";
    let signature = b"\xea\xcc\x5e\x1a\x83\x04\xa7\x4d\x2b\xe4\x12\xb0\x78\x92\x4b\x3b\xb3\x51\x1b\xac\x85\x5c\x05\xc9\xe5\xe9\xe4\x4d\xf3\xd6\x1e\x96\x74\x51\xcd\x8e\x18\xd6\xed\x18\x85\xdd\x82\x77\x14\x84\x7f\x96\xec\x4b\xb0\xed\x4c\x36\xce\x98\x08\xdb\x8f\x71\x42\x04\xf6\xd1";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_100() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x31\x30\x32\x30\x38\x33\x33\x37\x37\x36";
    let hash = b"\x6f\x0e\x3e\xea\xf4\x2b\x28\x13\x2b\x88\xff\xff\xff\xff\xf6\xc8\x66\x56\x04\xd3\x4a\xcb\x19\x03\x7e\x1a\xb7\x8c\xaa\xaa\xc6\xff";
    let signature = b"\x2f\x7a\x5e\x9e\x57\x71\xd4\x24\xf3\x0f\x67\xfd\xab\x61\xe8\xce\x4f\x8c\xd1\x21\x48\x82\xad\xb6\x5f\x7d\xe9\x4c\x31\x57\x70\x52\xac\x4e\x69\x80\x83\x45\x80\x9b\x44\xac\xb0\xb2\xbd\x88\x91\x75\xfb\x75\xdd\x05\x0c\x5a\x44\x9a\xb9\x52\x8f\x8f\x78\xda\xa1\x0c";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_101() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x33\x33\x38\x37\x31\x36\x34\x38";
    let hash = b"\xcd\xb5\x49\xf7\x73\xb3\xe6\x2b\x37\x08\xd1\xff\xff\xff\xff\xbe\x48\xf7\xc0\x59\x1d\xdc\xae\x7d\x2c\xb2\x22\xd1\xf8\x01\x7a\xb9";
    let signature = b"\xff\xcd\xa4\x0f\x79\x2c\xe4\xd9\x3e\x7e\x0f\x0e\x95\xe1\xa2\x14\x7d\xdd\xd7\xf6\x48\x76\x21\xc3\x0a\x03\xd7\x10\xb3\x30\x02\x19\x79\x93\x8b\x55\xf8\xa1\x7f\x7e\xd7\xba\x9a\xde\x8f\x20\x65\xa1\xfa\x77\x61\x8f\x0b\x67\xad\xd8\xd5\x8c\x42\x2c\x24\x53\xa4\x9a";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_102() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x33\x32\x32\x31\x34\x34\x31\x36\x32";
    let hash = b"\x2c\x3f\x26\xf9\x6a\x3a\xc0\x05\x1d\xf4\x98\x9b\xff\xff\xff\xff\x9f\xd6\x48\x86\xc1\xdc\x4f\x99\x24\xd8\xfd\x6f\x0e\xdb\x04\x84";
    let signature = b"\x81\xf2\x35\x9c\x4f\xab\xa6\xb5\x3d\x3e\x8c\x8c\x3f\xcc\x16\xa9\x48\x35\x0f\x7a\xb3\xa5\x88\xb2\x8c\x17\x60\x3a\x43\x1e\x39\xa8\xcd\x6f\x6a\x5c\xc3\xb5\x5e\xad\x0f\xf6\x95\xd0\x6c\x68\x60\xb5\x09\xe4\x6d\x99\xfc\xce\xfb\x9f\x7f\x9e\x10\x18\x57\xf7\x43\x00";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_103() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x30\x36\x38\x36\x36\x35\x35\x35\x34\x36";
    let hash = b"\xac\x18\xf8\x41\x8c\x55\xa2\x50\x2c\xb7\xd5\x3f\x9a\xff\xff\xff\xff\x5c\x31\xd8\x9f\xda\x6a\x6b\x84\x76\x39\x7c\x04\xed\xf4\x11";
    let signature = b"\xdf\xc8\xbf\x52\x04\x45\xcb\xb8\xee\x15\x96\xfb\x07\x3e\xa2\x83\xea\x13\x02\x51\xa6\xfd\xff\xa5\xc3\xf5\xf2\xaa\xf7\x5c\xa8\x08\x04\x8e\x33\xef\xce\x14\x7c\x9d\xd9\x28\x23\x64\x0e\x33\x8e\x68\xbf\xd7\xd0\xdc\x7a\x49\x05\xb3\xa7\xac\x71\x1e\x57\x7e\x90\xe7";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_104() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x36\x32\x31\x35\x35\x32\x34\x36";
    let hash = b"\x4f\x96\x18\xf9\x8e\x2d\x3a\x15\xb2\x40\x94\xf7\x2b\xb5\xff\xff\xff\xff\xa2\xfd\x3e\x28\x93\x68\x3e\x5a\x6a\xb8\xcf\x0e\xe6\x10";
    let signature = b"\xad\x01\x9f\x74\xc6\x94\x1d\x20\xef\xda\x70\xb4\x6c\x53\xdb\x16\x65\x03\xa0\xe3\x93\xe9\x32\xf6\x88\x22\x76\x88\xba\x6a\x57\x62\x93\x32\x0e\xb7\xca\x07\x10\x25\x53\x46\xbd\xbb\x31\x02\xcd\xcf\x79\x64\xef\x2e\x09\x88\xe7\x12\xbc\x05\xef\xe1\x6c\x19\x93\x45";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_105() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x37\x30\x33\x30\x38\x31\x38\x37\x37\x34";
    let hash = b"\x42\x2e\x82\xa3\xd5\x6e\xd1\x0a\x9c\xc2\x1d\x31\xd3\x7a\x25\xff\xff\xff\xff\x67\xed\xf7\xc4\x02\x04\xca\xae\x73\xab\x0b\xc7\x5a";
    let signature = b"\xac\x80\x96\x84\x2e\x8a\xdd\x68\xc3\x4e\x78\xce\x11\xdd\x71\xe4\xb5\x43\x16\xbd\x3e\xbf\x7f\xff\xde\xb7\xbd\x5a\x3e\xbc\x18\x83\xf5\xca\x2f\x4f\x23\xd6\x74\x50\x2d\x4c\xaf\x85\xd1\x87\x21\x5d\x36\xe3\xce\x9f\x0c\xe2\x19\x70\x9f\x21\xa3\xaa\xc0\x03\xb7\xa8";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_106() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x35\x39\x32\x34\x35\x32\x33\x37\x34\x34";
    let hash = b"\x70\x75\xd2\x45\xcc\xc3\x28\x1b\x6e\x7b\x32\x9f\xf7\x38\xfb\xb4\x17\xa5\xff\xff\xff\xff\xa0\x84\x2d\x98\x90\xb5\xcf\x95\xd0\x18";
    let signature = b"\x67\x7b\x2d\x3a\x59\xb1\x8a\x5f\xf9\x39\xb7\x0e\xa0\x02\x25\x08\x89\xdd\xcd\x7b\x7b\x9d\x77\x68\x54\xb4\x94\x36\x93\xfb\x92\xf7\x6b\x4b\xa8\x56\xad\xe7\x67\x7b\xf3\x03\x07\xb2\x1f\x3c\xcd\xa3\x5d\x2f\x63\xae\xe8\x1e\xfd\x0b\xab\x69\x72\xcc\x07\x95\xdb\x55";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_107() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x34\x39\x35\x35\x38\x36\x36\x32\x31";
    let hash = b"\x3c\x80\xde\x54\xcd\x92\x26\x98\x94\x43\xd5\x93\xfa\x4f\xd6\x59\x7e\x28\x0e\xbe\xff\xff\xff\xff\xc1\x84\x7e\xb7\x6c\x21\x7a\x95";
    let signature = b"\x47\x9e\x1d\xed\x14\xbc\xae\xd0\x37\x9b\xa8\xe1\xb7\x3d\x31\x15\xd8\x4d\x31\xd4\xb7\xc3\x0e\x1f\x05\xe1\xfc\x0d\x59\x57\xcf\xb0\x91\x8f\x79\xe3\x5b\x3d\x89\x48\x7c\xf6\x34\xa4\xf0\x5b\x2e\x0c\x30\x85\x7c\xa8\x79\xf9\x7c\x77\x1e\x87\x70\x27\x35\x5b\x24\x43";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_108() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x34\x30\x30\x35\x33\x31\x34\x34\x30\x36";
    let hash = b"\xde\x21\x75\x4e\x29\xb8\x56\x01\x98\x0b\xef\x3d\x69\x7e\xa2\x77\x0c\xe8\x91\xa8\xcd\xff\xff\xff\xff\xc7\x90\x6a\xa7\x94\xb3\x9b";
    let signature = b"\x43\xdf\xcc\xd0\xed\xb9\xe2\x80\xd9\xa5\x8f\x01\x16\x4d\x55\xc3\xd7\x11\xe1\x4b\x12\xac\x5c\xf3\xb6\x48\x40\xea\xd5\x12\xa0\xa3\x1d\xbe\x33\xfa\x8b\xa8\x45\x33\xcd\x5c\x49\x34\x36\x5b\x34\x42\xca\x11\x74\x89\x9b\x78\xef\x9a\x31\x99\xf4\x95\x84\x38\x97\x72";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_109() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x33\x30\x39\x36\x34\x35\x37\x35\x31\x32";
    let hash = b"\x8f\x65\xd9\x29\x27\xcf\xb8\x6a\x84\xdd\x59\x62\x3f\xb5\x31\xbb\x59\x9e\x4d\x5f\x72\x89\xff\xff\xff\xff\x2f\x1f\x2f\x57\x88\x1c";
    let signature = b"\x5b\x09\xab\x63\x7b\xd4\xca\xf0\xf4\xc7\xc7\xe4\xbc\xa5\x92\xfe\xa2\x0e\x90\x87\xc2\x59\xd2\x6a\x38\xbb\x40\x85\xf0\xbb\xff\x11\x45\xb7\xeb\x46\x7b\x67\x48\xaf\x61\x8e\x9d\x80\xd6\xfd\xcd\x6a\xa2\x49\x64\xe5\xa1\x3f\x88\x5b\xca\x81\x01\xde\x08\xeb\x0d\x75";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_110() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x32\x37\x38\x34\x30\x32\x35\x36\x32\x30";
    let hash = b"\x6b\x63\xe9\xa7\x4e\x09\x21\x20\x16\x0b\xea\x38\x77\xda\xce\x8a\x2c\xc7\xcd\x0e\x84\x26\xcb\xff\xff\xff\xff\xfa\xfc\x8c\x3c\xa8";
    let signature = b"\x5e\x9b\x1c\x5a\x02\x80\x70\xdf\x57\x28\xc5\xc8\xaf\x9b\x74\xe0\x66\x7a\xfa\x57\x0a\x6c\xfa\x01\x14\xa5\x03\x9e\xd1\x5e\xe0\x6f\xb1\x36\x09\x07\xe2\xd9\x78\x5e\xad\x36\x2b\xb8\xd7\xbd\x66\x1b\x6c\x29\xee\xff\xd3\xc5\x03\x77\x44\xed\xae\xb9\xad\x99\x0c\x20";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_111() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x32\x36\x31\x38\x37\x38\x37\x34\x31\x38";
    let hash = b"\xfc\x28\x25\x97\x02\xa0\x38\x45\xb6\xd7\x52\x19\x44\x4e\x8b\x43\xd0\x94\x58\x6e\x24\x9c\x86\x99\xff\xff\xff\xff\xe8\x52\x51\x2e";
    let signature = b"\x06\x71\xa0\xa8\x5c\x2b\x72\xd5\x4a\x2f\xb0\x99\x0e\x34\x53\x8b\x48\x90\x05\x0f\x5a\x57\x12\xf6\xd1\xa7\xa5\xfb\x85\x78\xf3\x2e\xdb\x18\x46\xba\xb6\xb7\x36\x14\x79\xab\x9c\x32\x85\xca\x41\x29\x18\x08\xf2\x7f\xd5\xbd\x4f\xda\xc7\x20\xe5\x85\x47\x13\x69\x4c";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_112() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x36\x34\x32\x36\x32\x35\x32\x36\x32";
    let hash = b"\x12\x73\xb4\x50\x2e\xa4\xe3\xbc\xce\xe0\x44\xee\x8e\x8d\xb7\xf7\x74\xec\xbc\xd5\x2e\x8c\xeb\x57\x17\x57\xff\xff\xff\xff\xe2\x0a";
    let signature = b"\x76\x73\xf8\x52\x67\x48\x44\x64\x77\xdb\xbb\x05\x90\xa4\x54\x92\xc5\xd7\xd6\x98\x59\xd3\x01\xab\xba\xed\xb3\x5b\x20\x95\x10\x3a\x3d\xc7\x0d\xdf\x9c\x6b\x52\x4d\x88\x6b\xed\x9e\x6a\xf0\x2e\x0e\x4d\xec\x0d\x41\x7a\x41\x4f\xed\x38\x07\xef\x44\x22\x91\x3d\x7c";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_113() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x36\x38\x32\x34\x31\x38\x39\x34\x33\x36";
    let hash = b"\x08\xfb\x56\x56\x10\xa7\x9b\xaa\x0c\x56\x6c\x66\x22\x8d\x81\x81\x4f\x8c\x53\xa1\x5b\x96\xe6\x02\xfb\x49\xff\xff\xff\xff\xff\x6e";
    let signature = b"\x7f\x08\x54\x41\x07\x0e\xcd\x2b\xb2\x12\x85\x08\x9e\xbb\x1a\xa6\x45\x0d\x1a\x06\xc3\x6d\x3f\xf3\x9d\xfd\x65\x7a\x79\x6d\x12\xb5\x24\x97\x12\x01\x20\x29\x87\x0a\x24\x59\xd1\x8d\x47\xda\x9a\xa4\x92\xa5\xe6\xcb\x4b\x2d\x8d\xaf\xa9\xe4\xc5\xc5\x4a\x2b\x9a\x8b";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_114() {
    let public = b"\x04\
\x29\x27\xb1\x05\x12\xba\xe3\xed\xdc\xfe\x46\x78\x28\x12\x8b\xad\x29\x03\x26\x99\x19\xf7\x08\x60\x69\xc8\xc4\xdf\x6c\x73\x28\x38\
\xc7\x78\x79\x64\xea\xac\x00\xe5\x92\x1f\xb1\x49\x8a\x60\xf4\x60\x67\x66\xb3\xd9\x68\x50\x01\x55\x8d\x1a\x97\x4e\x73\x41\x51\x3e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x34\x38\x34\x32\x34\x35\x34\x32\x35";
    let hash = b"\xd5\x92\x91\xcc\x2c\xf8\x9f\x30\x87\x71\x5f\xcb\x1a\xa4\xe7\x9a\xa2\x40\x3f\x74\x8e\x97\xd7\xcd\x28\xec\xae\xfe\xff\xff\xff\xff";
    let signature = b"\x91\x4c\x67\xfb\x61\xdd\x1e\x27\xc8\x67\x39\x8e\xa7\x32\x2d\x5a\xb7\x6d\xf0\x4b\xc5\xaa\x66\x83\xa8\xe0\xf3\x0a\x5d\x28\x73\x48\xfa\x07\x47\x40\x31\x48\x1d\xda\x49\x53\xe3\xac\x19\x59\xee\x8c\xea\x7e\x66\xec\x41\x2b\x38\xd6\xc9\x6d\x28\xf6\xd3\x73\x04\xea";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_115() {
    let public = b"\x04\
\x0a\xd9\x95\x00\x28\x8d\x46\x69\x40\x03\x1d\x72\xa9\xf5\x44\x5a\x4d\x43\x78\x46\x40\x85\x5b\xf0\xa6\x98\x74\xd2\xde\x5f\xe1\x03\
\xc5\x01\x1e\x6e\xf2\xc4\x2d\xcd\x50\xd5\xd3\xd2\x9f\x99\xae\x6e\xba\x2c\x80\xc9\x24\x4f\x4c\x54\x22\xf0\x97\x9f\xf0\xc3\xba\x5e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x43\x19\x05\x53\x58\xe8\x61\x7b\x0c\x46\x35\x3d\x03\x9c\xda\xab\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x4e";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_116() {
    let public = b"\x04\
\x0a\xd9\x95\x00\x28\x8d\x46\x69\x40\x03\x1d\x72\xa9\xf5\x44\x5a\x4d\x43\x78\x46\x40\x85\x5b\xf0\xa6\x98\x74\xd2\xde\x5f\xe1\x03\
\xc5\x01\x1e\x6e\xf2\xc4\x2d\xcd\x50\xd5\xd3\xd2\x9f\x99\xae\x6e\xba\x2c\x80\xc9\x24\x4f\x4c\x54\x22\xf0\x97\x9f\xf0\xc3\xba\x5e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfc\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x4e";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_117() {
    let public = b"\x04\
\xab\x05\xfd\x9d\x0d\xe2\x6b\x9c\xe6\xf4\x81\x96\x52\xd9\xfc\x69\x19\x3d\x0a\xa3\x98\xf0\xfb\xa8\x01\x3e\x09\xc5\x82\x20\x45\x54\
\x19\x23\x52\x71\x22\x8c\x78\x67\x59\x09\x5d\x12\xb7\x5a\xf0\x69\x2d\xd4\x10\x3f\x19\xf6\xa8\xc3\x2f\x49\x43\x5a\x1e\x9b\x8d\x45";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x4f\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x4e";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_118() {
    let public = b"\x04\
\x80\x98\x4f\x39\xa1\xff\x38\xa8\x6a\x68\xaa\x42\x01\xb6\xbe\x5d\xfb\xfe\xcf\x87\x62\x19\x71\x0b\x07\xba\xdf\x6f\xdd\x4c\x6c\x56\
\x11\xfe\xb9\x73\x90\xd9\x82\x6e\x7a\x06\xdf\xb4\x18\x71\xc9\x40\xd7\x44\x15\xed\x3c\xac\x20\x89\xf1\x44\x50\x19\xbb\x55\xed\x95";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x90\x91\x35\xbd\xb6\x79\x92\x86\x17\x0f\x5e\xad\x2d\xe4\xf6\x51\x14\x53\xfe\x50\x91\x4f\x3d\xf2\xde\x54\xa3\x63\x83\xdf\x8d\xd4";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_119() {
    let public = b"\x04\
\x42\x01\xb4\x27\x29\x44\x20\x1c\x32\x94\xf5\xba\xa9\xa3\x23\x2b\x6d\xd6\x87\x49\x5f\xcc\x19\xa7\x0a\x95\xbc\x60\x2b\x4f\x7c\x05\
\x95\xc3\x7e\xba\x9e\xe8\x17\x1c\x1b\xb5\xac\x6f\xea\xf7\x53\xbc\x36\xf4\x63\xe3\xae\xf1\x66\x29\x57\x2c\x0c\x0a\x8f\xb0\x80\x0e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x27\xb4\x57\x7c\xa0\x09\x37\x6f\x71\x30\x3f\xd5\xdd\x22\x7d\xce\xf5\xde\xb7\x73\xad\x5f\x5a\x84\x36\x06\x44\x66\x9c\xa2\x49\xa5";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_120() {
    let public = b"\x04\
\xa7\x1a\xf6\x4d\xe5\x12\x6a\x4a\x4e\x02\xb7\x92\x2d\x66\xce\x94\x15\xce\x88\xa4\xc9\xd2\x55\x14\xd9\x10\x82\xc8\x72\x5a\xc9\x57\
\x5d\x47\x72\x3c\x8f\xbe\x58\x0b\xb3\x69\xfe\xc9\xc2\x66\x5d\x8e\x30\xa4\x35\xb9\x93\x26\x45\x48\x2e\x7c\x9f\x11\xe8\x72\x29\x6b";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_121() {
    let public = b"\x04\
\xa7\x1a\xf6\x4d\xe5\x12\x6a\x4a\x4e\x02\xb7\x92\x2d\x66\xce\x94\x15\xce\x88\xa4\xc9\xd2\x55\x14\xd9\x10\x82\xc8\x72\x5a\xc9\x57\
\x5d\x47\x72\x3c\x8f\xbe\x58\x0b\xb3\x69\xfe\xc9\xc2\x66\x5d\x8e\x30\xa4\x35\xb9\x93\x26\x45\x48\x2e\x7c\x9f\x11\xe8\x72\x29\x6b";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x05\x01";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::WrongLength)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_122() {
    let public = b"\x04\
\x66\x27\xce\xc4\xf0\x73\x1e\xa2\x3f\xc2\x93\x1f\x90\xeb\xe5\xb7\x57\x2f\x59\x7d\x20\xdf\x08\xfc\x2b\x31\xee\x8e\xf1\x6b\x15\x72\
\x61\x70\xed\x77\xd8\xd0\xa1\x4f\xc5\xc9\xc3\xc4\xc9\xbe\x7f\x0d\x3e\xe1\x8f\x70\x9b\xb2\x75\xea\xf2\x07\x3e\x25\x8f\xe6\x94\xa5";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_123() {
    let public = b"\x04\
\x66\x27\xce\xc4\xf0\x73\x1e\xa2\x3f\xc2\x93\x1f\x90\xeb\xe5\xb7\x57\x2f\x59\x7d\x20\xdf\x08\xfc\x2b\x31\xee\x8e\xf1\x6b\x15\x72\
\x61\x70\xed\x77\xd8\xd0\xa1\x4f\xc5\xc9\xc3\xc4\xc9\xbe\x7f\x0d\x3e\xe1\x8f\x70\x9b\xb2\x75\xea\xf2\x07\x3e\x25\x8f\xe6\x94\xa5";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x05\x03";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::WrongLength)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_124() {
    let public = b"\x04\
\x5a\x7c\x88\x25\xe8\x56\x91\xcc\xe1\xf5\xe7\x54\x4c\x54\xe7\x3f\x14\xaf\xc0\x10\xcb\x73\x13\x43\x26\x2c\xa7\xec\x5a\x77\xf5\xbf\
\xef\x6e\xdf\x62\xa4\x49\x7c\x1b\xd7\xb1\x47\xfb\x6c\x3d\x22\xaf\x3c\x39\xbf\xce\x95\xf3\x0e\x13\xa1\x6d\x3d\x7b\x28\x12\xf8\x13";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_125() {
    let public = b"\x04\
\x5a\x7c\x88\x25\xe8\x56\x91\xcc\xe1\xf5\xe7\x54\x4c\x54\xe7\x3f\x14\xaf\xc0\x10\xcb\x73\x13\x43\x26\x2c\xa7\xec\x5a\x77\xf5\xbf\
\xef\x6e\xdf\x62\xa4\x49\x7c\x1b\xd7\xb1\x47\xfb\x6c\x3d\x22\xaf\x3c\x39\xbf\xce\x95\xf3\x0e\x13\xa1\x6d\x3d\x7b\x28\x12\xf8\x13";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x05\x05";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::WrongLength)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_126() {
    let public = b"\x04\
\xcb\xe0\xc2\x91\x32\xcd\x73\x83\x64\xfe\xdd\x60\x31\x52\x99\x0c\x04\x8e\x5e\x2f\xff\x99\x6d\x88\x3f\xa6\xca\xca\x79\x78\xc7\x37\
\x70\xaf\x6a\x8c\xe4\x4c\xb4\x12\x24\xb2\x60\x36\x06\xf4\xc0\x4d\x18\x8e\x80\xbf\xf7\xcc\x31\xad\x51\x89\xd4\xab\x0d\x70\xe8\xc1";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_127() {
    let public = b"\x04\
\xcb\xe0\xc2\x91\x32\xcd\x73\x83\x64\xfe\xdd\x60\x31\x52\x99\x0c\x04\x8e\x5e\x2f\xff\x99\x6d\x88\x3f\xa6\xca\xca\x79\x78\xc7\x37\
\x70\xaf\x6a\x8c\xe4\x4c\xb4\x12\x24\xb2\x60\x36\x06\xf4\xc0\x4d\x18\x8e\x80\xbf\xf7\xcc\x31\xad\x51\x89\xd4\xab\x0d\x70\xe8\xc1";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x05\x06";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::WrongLength)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_128() {
    let public = b"\x04\
\x2e\xf7\x47\x67\x1c\x97\xd9\xc7\xf9\xcb\x2f\x6a\x30\xd6\x78\xc3\xd8\x47\x57\xba\x24\x1e\xf7\x18\x3d\x51\xa2\x9f\x52\xd8\x7c\x2e\
\xa8\xfb\x2e\xa6\x35\xb7\x61\xba\xef\xc1\xc4\xde\xd2\x09\x92\x81\xb8\x44\xe1\x3e\x04\x4c\x32\x85\x53\xbb\xba\xfa\x33\x7d\x8a\x76";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_129() {
    let public = b"\x04\
\x2e\xf7\x47\x67\x1c\x97\xd9\xc7\xf9\xcb\x2f\x6a\x30\xd6\x78\xc3\xd8\x47\x57\xba\x24\x1e\xf7\x18\x3d\x51\xa2\x9f\x52\xd8\x7c\x2e\
\xa8\xfb\x2e\xa6\x35\xb7\x61\xba\xef\xc1\xc4\xde\xd2\x09\x92\x81\xb8\x44\xe1\x3e\x04\x4c\x32\x85\x53\xbb\xba\xfa\x33\x7d\x8a\x76";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x06\x01";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::WrongLength)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_130() {
    let public = b"\x04\
\x93\x1c\xc4\x9c\xda\x4d\x87\xd2\x5b\x16\x01\xc5\x6c\x3b\x83\xb4\xf4\x5e\x44\x97\x19\x98\xf2\xd3\xe7\xd3\xc5\x51\x52\x21\x4e\xdf\
\x05\x8d\xc1\x40\xab\xbb\xa4\x2f\xc1\xdd\xbf\x30\xda\xb8\xeb\x9b\x46\xee\x73\x38\xb3\xf7\xee\x96\x24\x2b\xf4\x5e\x1d\xf5\xe9\x95";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_131() {
    let public = b"\x04\
\x93\x1c\xc4\x9c\xda\x4d\x87\xd2\x5b\x16\x01\xc5\x6c\x3b\x83\xb4\xf4\x5e\x44\x97\x19\x98\xf2\xd3\xe7\xd3\xc5\x51\x52\x21\x4e\xdf\
\x05\x8d\xc1\x40\xab\xbb\xa4\x2f\xc1\xdd\xbf\x30\xda\xb8\xeb\x9b\x46\xee\x73\x38\xb3\xf7\xee\x96\x24\x2b\xf4\x5e\x1d\xf5\xe9\x95";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x06\x03";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::WrongLength)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_132() {
    let public = b"\x04\
\x89\x9a\x4a\xf6\x18\x67\xe3\xf3\xc1\x90\xdb\xb4\x8f\x8b\xc9\xfc\x74\xb7\x0a\x46\x7a\x4a\x1f\x06\x47\x7b\x3a\xf2\xf3\x9a\xb8\xed\
\x47\xac\x00\x0f\x9e\xa8\xa3\x03\x49\x39\xbf\x48\xad\x5d\x06\x1a\x69\xfc\x84\x95\xae\x4d\xf2\xdb\xec\x7e\xff\xa0\x3a\x00\x62\xb3";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_133() {
    let public = b"\x04\
\x89\x9a\x4a\xf6\x18\x67\xe3\xf3\xc1\x90\xdb\xb4\x8f\x8b\xc9\xfc\x74\xb7\x0a\x46\x7a\x4a\x1f\x06\x47\x7b\x3a\xf2\xf3\x9a\xb8\xed\
\x47\xac\x00\x0f\x9e\xa8\xa3\x03\x49\x39\xbf\x48\xad\x5d\x06\x1a\x69\xfc\x84\x95\xae\x4d\xf2\xdb\xec\x7e\xff\xa0\x3a\x00\x62\xb3";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x06\x06";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::WrongLength)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_134() {
    let public = b"\x04\
\xd0\x3e\xb0\x99\x13\xcc\x20\xc6\xa8\xd0\x07\x0f\x0d\x8d\x2a\x7f\x63\x52\x7f\xaf\xa4\x41\x17\xfc\xe6\xbd\x1e\xf2\xaa\x4a\xe3\xc4\
\x6d\x5d\xf3\xf4\x5a\xc5\x8f\xa3\x34\xc6\xd1\x02\x38\x1b\x31\x20\xb7\xa2\x45\x56\x00\xdc\xaf\xf3\xd1\xa8\x45\x51\x4f\x12\xbf\x46";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_135() {
    let public = b"\x04\
\xd0\x3e\xb0\x99\x13\xcc\x20\xc6\xa8\xd0\x07\x0f\x0d\x8d\x2a\x7f\x63\x52\x7f\xaf\xa4\x41\x17\xfc\xe6\xbd\x1e\xf2\xaa\x4a\xe3\xc4\
\x6d\x5d\xf3\xf4\x5a\xc5\x8f\xa3\x34\xc6\xd1\x02\x38\x1b\x31\x20\xb7\xa2\x45\x56\x00\xdc\xaf\xf3\xd1\xa8\x45\x51\x4f\x12\xbf\x46";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x06\x07";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::WrongLength)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_136() {
    let public = b"\x04\
\xd0\x3e\xb0\x99\x13\xcc\x20\xc6\xa8\xd0\x07\x0f\x0d\x8d\x2a\x7f\x63\x52\x7f\xaf\xa4\x41\x17\xfc\xe6\xbd\x1e\xf2\xaa\x4a\xe3\xc4\
\x6d\x5d\xf3\xf4\x5a\xc5\x8f\xa3\x34\xc6\xd1\x02\x38\x1b\x31\x20\xb7\xa2\x45\x56\x00\xdc\xaf\xf3\xd1\xa8\x45\x51\x4f\x12\xbf\x46";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x25\x57\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_137() {
    let public = b"\x04\
\x3a\x72\x47\x62\x91\x57\x11\x93\xb4\xd1\x09\xb2\xc3\x7b\x59\xf2\x80\x7e\x8f\xe9\xcf\xfd\x80\x4e\xac\xde\xd9\x03\xe7\x7c\xa0\xda\
\x59\x2d\xbc\x74\xfe\xe0\xca\x75\x08\xcc\x7b\xc2\x82\xb0\xc5\x1a\x14\x32\x86\xff\x53\xc6\x01\x31\x66\x8e\x7a\x09\x29\xe4\xed\x04";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x75\xfb\xd8";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_138() {
    let public = b"\x04\
\xd0\xf7\x37\x92\x20\x37\x16\xaf\xd4\xbe\x43\x29\xfa\xa4\x8d\x26\x9f\x15\x31\x3e\xbb\xba\x37\x9d\x77\x83\xc9\x7b\xf3\xe8\x90\xd9\
\x97\x1f\x4a\x32\x06\x60\x5b\xec\x21\x78\x2b\xf5\xe2\x75\xc7\x14\x41\x7e\x8f\x56\x65\x49\xe6\xbc\x68\x69\x0d\x23\x63\xc8\x9c\xc1";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x8f\x1e\x3c\x78\x62\xc5\x8b\x16\xbb\x76\xed\xdb\xb7\x6e\xdd\xbb\x51\x6a\xf4\xf6\x3f\x2d\x74\xd7\x6e\x0d\x28\xc9\xbb\x75\xea\x88";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_139() {
    let public = b"\x04\
\x48\x38\xb2\xbe\x35\xa6\x27\x6a\x80\xef\x9e\x22\x81\x40\xf9\xd9\xb9\x6c\xe8\x3b\x7a\x25\x4f\x71\xcc\xde\xbb\xb8\x05\x4c\xe0\x5f\
\xfa\x9c\xbc\x12\x3c\x91\x9b\x19\xe0\x02\x38\x19\x8d\x04\x06\x90\x43\xbd\x66\x0a\x82\x88\x14\x05\x1f\xcb\x8a\xac\x73\x8a\x6c\x6b";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2d\x9b\x4d\x34\x79\x52\xd6\xef\x30\x43\xe7\x32\x95\x81\xdb\xb3\x97\x44\x97\x71\x0a\xb1\x15\x05\xee\x1c\x87\xff\x90\x7b\xee\xba\xdd\x19\x5a\x0f\xfe\x6d\x7a";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_140() {
    let public = b"\x04\
\x73\x93\x98\x3c\xa3\x0a\x52\x0b\xbc\x47\x83\xdc\x99\x60\x74\x6a\xab\x44\x4e\xf5\x20\xc0\xa8\xe7\x71\x11\x9a\xa4\xe7\x4b\x0f\x64\
\xe9\xd7\xbe\x1a\xb0\x1a\x0b\xf6\x26\xe7\x09\x86\x3e\x6a\x48\x6d\xba\xf3\x27\x93\xaf\xcc\xf7\x74\xe2\xc6\xcd\x27\xb1\x85\x75\x26";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x33\xe6\x7e\x37\xb3\x2b\x44\x55\x80\xbf\x4e\xff\x8b\x74\x8b\x74\x00\x00\x00\x00\x8b\x74\x8b\x74\x8b\x74\x8b\x74\x66\xe7\x69\xad\x4a\x16\xd3\xdc\xd8\x71\x29\xb8\xe9\x1d\x1b\x4d";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_141() {
    let public = b"\x04\
\x5a\xc3\x31\xa1\x10\x3f\xe9\x66\x69\x73\x79\xf3\x56\xa9\x37\xf3\x50\x58\x8a\x05\x47\x7e\x30\x88\x51\xb8\xa5\x02\xd5\xdf\xcd\xc5\
\xfe\x99\x93\xdf\x4b\x57\x93\x9b\x2b\x8d\xa0\x95\xbf\x6d\x79\x42\x65\x20\x4c\xfe\x03\xbe\x99\x5a\x02\xe6\x5d\x40\x8c\x87\x1c\x0b";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xef\x9f\x6b\xa4\xd9\x7c\x09\xd0\x31\x78\xfa\x20\xb4\xaa\xad\x83\xbe\x3c\xf9\xcb\x82\x4a\x87\x9f\xec\x32\x70\xfc\x4b\x81\xef\x5b";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_142() {
    let public = b"\x04\
\x1d\x20\x9b\xe8\xde\x2d\xe8\x77\x09\x5a\x39\x9d\x39\x04\xc7\x4c\xc4\x58\xd9\x26\xe2\x7b\xb8\xe5\x8e\x5e\xae\x57\x67\xc4\x15\x09\
\xdd\x59\xe0\x4c\x21\x4f\x7b\x18\xdc\xe3\x51\xfc\x2a\x54\x98\x93\xa6\x86\x0e\x80\x16\x3f\x38\xcc\x60\xa4\xf2\xc9\xd0\x40\xd8\xc9";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x25\x22\xbb\xd3\xec\xbe\x7c\x39\xe9\x3e\x7c\x25\xef\x9f\x6b\xa4\xd9\x7c\x09\xd0\x31\x78\xfa\x20\xb4\xaa\xad\x83\xbe\x3c\xf9\xcb\x82\x4a\x87\x9f\xec\x32\x70\xfc\x4b\x81\xef\x5b";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_143() {
    let public = b"\x04\
\x08\x35\x39\xfb\xee\x44\x62\x5e\x3a\xca\xaf\xa2\xfc\xb4\x13\x49\x39\x2c\xef\x06\x33\xa1\xb8\xfa\xbe\xce\xe0\xc1\x33\xb1\x0e\x99\
\x91\x5c\x1e\xbe\x7b\xf0\x0d\xf8\x53\x51\x96\x77\x0a\x58\x04\x7a\xe2\xa4\x02\xf2\x63\x26\xbb\x7d\x41\xd4\xd7\x61\x63\x37\x91\x1e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xbc\xe6\xfa\xad\xa7\x17\x9e\x84\xf3\xb9\xca\xc2\xfc\x63\x24\xd5\x55\x55\x55\x55\x00\x00\x00\x00\x55\x55\x55\x55\x55\x55\x55\x55\x3e\xf7\xa8\xe4\x8d\x07\xdf\x81\xa6\x93\x43\x96\x54\x21\x0c\x70";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_144() {
    let public = b"\x04\
\xe0\x75\xef\xfd\x96\x07\xd0\x8d\x5f\x34\xe3\x65\x2f\x64\xcf\xa3\xbd\x6d\x20\xc5\x8d\x0a\x23\x2f\x05\x84\x91\x26\x0a\xb2\x12\xa4\
\xcc\x61\x76\x0a\xc8\xb0\x68\x0c\x1b\x64\x4c\x03\xcc\x62\x8b\xa9\xdc\x4a\x3c\x05\x61\x36\x84\x89\xc6\x92\xbd\x40\xf4\x3a\xa3\xca";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x9c\x44\xfe\xbf\x31\xc3\x59\x4f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x83\x9e\xd2\x82\x47\xc2\xb0\x6b";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_145() {
    let public = b"\x04\
\xe0\x75\xef\xfd\x96\x07\xd0\x8d\x5f\x34\xe3\x65\x2f\x64\xcf\xa3\xbd\x6d\x20\xc5\x8d\x0a\x23\x2f\x05\x84\x91\x26\x0a\xb2\x12\xa4\
\xcc\x61\x76\x0a\xc8\xb0\x68\x0c\x1b\x64\x4c\x03\xcc\x62\x8b\xa9\xdc\x4a\x3c\x05\x61\x36\x84\x89\xc6\x92\xbd\x40\xf4\x3a\xa3\xca";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x9c\x44\xfe\xbf\x31\xc3\x59\x4f\x83\x9e\xd2\x82\x47\xc2\xb0\x6b";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::WrongLength)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_146() {
    let public = b"\x04\
\xcf\xfb\x75\x8c\x30\x73\xea\x3c\x08\xef\xd9\xf7\xf1\x7a\x85\xb6\xae\x38\x5c\x5a\x14\x0c\x14\x6a\xd5\xf1\xf5\xa8\x26\x71\x8b\xc8\
\xdf\xdc\x6b\xeb\xc8\x94\x14\x4c\x6d\x41\x8a\xc5\xd9\x73\x39\x72\x6a\xd2\xae\x92\x5d\xf8\x68\x42\x6e\x56\x28\xe9\xf4\xe6\x23\x42";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x09\xdf\x8b\x68\x24\x30\xbe\xef\x6f\x5f\xd7\xc7\xcd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\xd0\xa6\x2e\x13\x77\x8f\x42\x22\xa0\xd6\x1c\x8a";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_147() {
    let public = b"\x04\
\xcf\xfb\x75\x8c\x30\x73\xea\x3c\x08\xef\xd9\xf7\xf1\x7a\x85\xb6\xae\x38\x5c\x5a\x14\x0c\x14\x6a\xd5\xf1\xf5\xa8\x26\x71\x8b\xc8\
\xdf\xdc\x6b\xeb\xc8\x94\x14\x4c\x6d\x41\x8a\xc5\xd9\x73\x39\x72\x6a\xd2\xae\x92\x5d\xf8\x68\x42\x6e\x56\x28\xe9\xf4\xe6\x23\x42";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x09\xdf\x8b\x68\x24\x30\xbe\xef\x6f\x5f\xd7\xc7\xcd\x0f\xd0\xa6\x2e\x13\x77\x8f\x42\x22\xa0\xd6\x1c\x8a";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::WrongLength)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_148() {
    let public = b"\x04\
\xb9\x87\x40\xe6\x9e\x61\xa3\x25\xd5\xf7\x72\xe3\xb5\xc4\xf6\x7f\xb7\x15\x0b\x16\xa9\xaf\xec\xa9\xdd\xc4\xaf\xcb\xb6\xfa\x05\x49\
\xc4\x46\xe8\x14\x13\x8e\x4e\xbc\x82\xdb\xf8\x6a\x39\x00\x56\xd4\x59\x5d\xcf\x45\xe3\x81\xfe\xf2\x17\xa4\x59\x7d\x7b\xd5\x14\x98";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x8a\x59\x8e\x56\x3a\x89\xf5\x26\xc3\x2e\xbe\xc8\xde\x26\x36\x7c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x84\xf6\x33\xe2\x04\x26\x30\xe9\x9d\xd0\xf1\xe1\x6f\x7a\x04\xbf";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_149() {
    let public = b"\x04\
\xb9\x87\x40\xe6\x9e\x61\xa3\x25\xd5\xf7\x72\xe3\xb5\xc4\xf6\x7f\xb7\x15\x0b\x16\xa9\xaf\xec\xa9\xdd\xc4\xaf\xcb\xb6\xfa\x05\x49\
\xc4\x46\xe8\x14\x13\x8e\x4e\xbc\x82\xdb\xf8\x6a\x39\x00\x56\xd4\x59\x5d\xcf\x45\xe3\x81\xfe\xf2\x17\xa4\x59\x7d\x7b\xd5\x14\x98";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x8a\x59\x8e\x56\x3a\x89\xf5\x26\xc3\x2e\xbe\xc8\xde\x26\x36\x7c\x84\xf6\x33\xe2\x04\x26\x30\xe9\x9d\xd0\xf1\xe1\x6f\x7a\x04\xbf";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::WrongLength)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_150() {
    let public = b"\x04\
\x84\x53\x6a\x27\x0c\x39\x32\xbb\x20\x84\x73\x2a\xdf\x2c\x76\x8e\xfc\x6d\x39\x77\xe5\x22\x02\x29\xea\x9a\x44\x88\x8b\x8f\x9d\x7b\
\x17\x66\x39\x8c\xda\xc2\xfc\x80\x00\x01\x7b\x29\xa7\xba\x15\xa5\x8f\x19\x60\x37\xf3\x5f\x70\x08\xed\x42\x86\xdd\xff\x00\xfd\x46";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xaa\x6e\xeb\x58\x23\xf7\xfa\x31\xb4\x66\xbb\x47\x37\x97\xf0\xd0\x31\x4c\x0b\xdf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe2\x97\x7c\x47\x9e\x6d\x25\x70\x3c\xeb\xbc\x6b\xd5\x61\x93\x8c\xc9\xd1\xbf\xb9";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_151() {
    let public = b"\x04\
\x84\x53\x6a\x27\x0c\x39\x32\xbb\x20\x84\x73\x2a\xdf\x2c\x76\x8e\xfc\x6d\x39\x77\xe5\x22\x02\x29\xea\x9a\x44\x88\x8b\x8f\x9d\x7b\
\x17\x66\x39\x8c\xda\xc2\xfc\x80\x00\x01\x7b\x29\xa7\xba\x15\xa5\x8f\x19\x60\x37\xf3\x5f\x70\x08\xed\x42\x86\xdd\xff\x00\xfd\x46";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xaa\x6e\xeb\x58\x23\xf7\xfa\x31\xb4\x66\xbb\x47\x37\x97\xf0\xd0\x31\x4c\x0b\xdf\xe2\x97\x7c\x47\x9e\x6d\x25\x70\x3c\xeb\xbc\x6b\xd5\x61\x93\x8c\xc9\xd1\xbf\xb9";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::WrongLength)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_152() {
    let public = b"\x04\
\x8a\xeb\x36\x8a\x70\x27\xa4\xd6\x4a\xbd\xea\x37\x39\x0c\x0c\x1d\x6a\x26\xf3\x99\xe2\xd9\x73\x4d\xe1\xeb\x3d\x0e\x19\x37\x38\x74\
\x05\xbd\x13\x83\x47\x15\xe1\xdb\xae\x9b\x87\x5c\xf0\x7b\xd5\x5e\x1b\x66\x91\xc7\xf7\x53\x6a\xef\x3b\x19\xbf\x7a\x4a\xdf\x57\x6d";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x55\x55\x55\x55\x00\x00\x00\x00\x55\x55\x55\x55\x55\x55\x55\x55\x3e\xf7\xa8\xe4\x8d\x07\xdf\x81\xa6\x93\x43\x96\x54\x21\x0c\x70\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_153() {
    let public = b"\x04\
\x8a\xeb\x36\x8a\x70\x27\xa4\xd6\x4a\xbd\xea\x37\x39\x0c\x0c\x1d\x6a\x26\xf3\x99\xe2\xd9\x73\x4d\xe1\xeb\x3d\x0e\x19\x37\x38\x74\
\x05\xbd\x13\x83\x47\x15\xe1\xdb\xae\x9b\x87\x5c\xf0\x7b\xd5\x5e\x1b\x66\x91\xc7\xf7\x53\x6a\xef\x3b\x19\xbf\x7a\x4a\xdf\x57\x6d";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x55\x55\x55\x55\x00\x00\x00\x00\x55\x55\x55\x55\x55\x55\x55\x55\x3e\xf7\xa8\xe4\x8d\x07\xdf\x81\xa6\x93\x43\x96\x54\x21\x0c\x70\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_154() {
    let public = b"\x04\
\x61\x72\x2e\xab\xa7\x31\xc6\x97\xc7\xa9\xba\x4d\x0a\xfd\xbb\x57\x13\xd8\xaa\x12\xb0\xea\xb6\x01\xbb\x33\xdb\xaf\x79\x2c\x5a\xdc\
\x27\x2c\xd9\x93\xb2\xb6\x63\xab\xa5\xb3\xa2\x6c\x10\x11\x82\xff\x17\x86\x84\x94\x5e\x83\x87\x9e\x71\x59\x8b\x95\xfe\x64\x7d\xfc";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x55\x55\x55\x55\x00\x00\x00\x00\x55\x55\x55\x55\x55\x55\x55\x55\x3e\xf7\xa8\xe4\x8d\x07\xdf\x81\xa6\x93\x43\x96\x54\x21\x0c\x70\x02\xf6\x76\x96\x9f\x45\x1a\x8c\xca\xfa\x4c\x4f\x09\x79\x18\x10\xe6\xd6\x32\xdb\xd6\x0b\x1d\x55\x40\xf3\x28\x4f\xbe\x18\x89\xb0";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_155() {
    let public = b"\x04\
\xc4\xc9\x19\x81\xe7\x20\xe2\x0d\x7e\x47\x8f\xf1\x9d\x09\xb9\x5a\x98\xf5\x8c\x0f\x46\x9b\x72\x80\x1a\x8c\xe8\x44\xa3\x47\x31\x65\
\x94\xaf\xcd\x41\x88\x18\x2e\x77\x79\x88\x9b\x32\x58\xd0\x36\x8e\xce\x1e\x66\x79\x7f\xe7\xc6\x48\xc6\xf0\xb9\xe2\x6b\xd7\x18\x71";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x55\x55\x55\x55\x00\x00\x00\x00\x55\x55\x55\x55\x55\x55\x55\x55\x3e\xf7\xa8\xe4\x8d\x07\xdf\x81\xa6\x93\x43\x96\x54\x21\x0c\x70\x4e\x26\x09\x62\xe3\x33\x62\xef\x00\x46\x12\x6d\x2d\x5a\x4e\xdc\x69\x47\xab\x20\xe1\x9b\x8e\xc1\x9c\xf7\x9e\x59\x08\xb6\xe6\x28";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_156() {
    let public = b"\x04\
\xd5\x8d\x47\xbf\x49\xbc\x8f\x41\x66\x41\xf6\xf7\x60\xfc\xbc\xa8\x0a\xa5\x2a\x81\x4e\x56\xa5\xfa\x40\xba\xb4\x4f\xd6\xf6\x31\x72\
\x16\xde\xaa\x84\xd4\x5d\x8e\x0e\x29\xcc\x9e\xcf\x56\x53\xf8\xee\x64\x44\x75\x08\x13\xbe\xca\xe8\xde\xb4\x2b\x04\xba\x07\xa6\x34";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x55\x55\x55\x55\x00\x00\x00\x00\x55\x55\x55\x55\x55\x55\x55\x55\x3e\xf7\xa8\xe4\x8d\x07\xdf\x81\xa6\x93\x43\x96\x54\x21\x0c\x70\x07\x7e\xd0\xd8\xf2\x0f\x69\x7d\x8f\xc5\x91\xac\x64\xdd\x52\x19\xc7\x93\x21\x22\xb4\xf9\xb9\xec\x64\x41\xe4\x4a\x00\x92\xcf\x21";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_157() {
    let public = b"\x04\
\x91\xe3\x05\x82\x2e\x5e\x44\xf3\xfd\xb6\x16\xe2\xef\x42\xcd\x98\xf2\x41\xb8\x6e\x9f\x68\x81\x5b\xc4\xdb\xa6\xa9\x45\xe4\xee\xfb\
\x3c\x59\x37\xe2\xac\x1d\x94\x66\xf6\xd6\x5e\x49\xb3\x5f\xc8\xd7\x5f\xfc\x22\xe1\xfe\x2f\x32\xaf\x42\xf5\xfa\x3c\x26\xf9\xb4\xb0";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x55\x55\x55\x55\x00\x00\x00\x00\x55\x55\x55\x55\x55\x55\x55\x55\x3e\xf7\xa8\xe4\x8d\x07\xdf\x81\xa6\x93\x43\x96\x54\x21\x0c\x70\x3e\x02\x92\xa6\x7e\x18\x1c\x6c\x01\x05\xee\x35\xe9\x56\xe7\x8e\x9b\xdd\x03\x3c\x6e\x71\xae\x57\x88\x40\x39\xa2\x45\xe4\x17\x5f";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_158() {
    let public = b"\x04\
\x24\xa0\xbc\x4d\x16\xdb\xbd\x40\xd2\xfd\x81\xa7\xc3\xf8\xd8\xec\x74\x16\x07\xd5\xbb\x40\x6a\x06\x11\xcc\x60\xd0\xe6\x83\xbd\x46\
\xb5\x75\xca\xd0\x39\xc1\x5f\x7f\x3d\xff\xcf\xc0\x07\xb4\xb0\xf7\x43\xc8\x71\xec\xc7\x6a\x50\x4a\x32\x67\x2f\xd8\x45\x26\xd8\x61";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x55\x55\x55\x55\x00\x00\x00\x00\x55\x55\x55\x55\x55\x55\x55\x55\x3e\xf7\xa8\xe4\x8d\x07\xdf\x81\xa6\x93\x43\x96\x54\x21\x0c\x70\x13\xd2\x2b\x06\xd6\xb8\xf5\xd9\x7e\x0c\x64\x96\x2b\x4a\x3b\xae\x30\xf6\x68\xca\x62\x17\xef\x5b\x35\xd7\x99\xf1\x59\xe2\x3e\xbe";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_159() {
    let public = b"\x04\
\xd2\x4d\xd0\x67\x45\xca\xfb\x39\x18\x6d\x22\xa9\x2a\xa0\xe5\x81\x69\xa7\x9a\xb6\x94\x88\x62\x8a\x9d\xa5\xed\x3e\xf7\x47\x26\x9b\
\x7e\x92\x09\xd9\x8f\xae\xb9\x53\x55\x94\x8a\xda\xe6\x1d\x52\x91\xc6\x01\x5d\x3e\xe9\x51\x34\x86\xd8\x86\xfb\x05\xcb\xd2\x5c\x6a";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x55\x55\x55\x55\x00\x00\x00\x00\x55\x55\x55\x55\x55\x55\x55\x55\x3e\xf7\xa8\xe4\x8d\x07\xdf\x81\xa6\x93\x43\x96\x54\x21\x0c\x70\x45\x23\xce\x34\x2e\x49\x94\xbb\x89\x68\xbf\x66\x13\xf6\x0c\x06\xc8\x61\x11\xf1\x5a\x3a\x38\x93\x09\xe7\x2c\xd4\x47\xd5\xdd\x99";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_160() {
    let public = b"\x04\
\x82\x00\xf1\x48\xe7\xea\xb1\x58\x1b\xcd\x1e\x23\x94\x6f\x8a\x9b\x81\x91\xd9\x64\x1f\x95\x60\x34\x17\x21\xf9\xd3\xfe\xc3\xd6\x3e\
\xce\x79\x56\x69\xe0\x48\x1e\x03\x5d\xe8\x62\x3d\x71\x6a\x69\x84\xd0\xa4\x80\x9d\x6c\x65\x51\x94\x43\xee\x55\x26\x0f\x7f\x3d\xcb";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x55\x55\x55\x55\x00\x00\x00\x00\x55\x55\x55\x55\x55\x55\x55\x55\x3e\xf7\xa8\xe4\x8d\x07\xdf\x81\xa6\x93\x43\x96\x54\x21\x0c\x70\x37\xd7\x65\xbe\x3c\x9c\x78\x18\x9a\xd3\x0e\xdb\x50\x97\xa4\xdb\x67\x0d\xe1\x16\x86\xd0\x14\x20\xe3\x70\x39\xd4\x67\x7f\x48\x09";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_161() {
    let public = b"\x04\
\xa8\xa6\x9c\x5e\xd3\x3b\x15\x0c\xe8\xd3\x7a\xc1\x97\x07\x0e\xd8\x94\xc0\x5d\x47\x25\x8a\x80\xc9\x04\x1d\x92\x48\x66\x22\x02\x4d\
\xe8\x59\x97\xc9\x66\x6b\x60\xa3\x93\x56\x8e\xfe\xde\x8f\x4c\xa0\x16\x7c\x1e\x10\xf6\x26\xe6\x2f\xc1\xb8\xc8\xe9\xc6\xba\x6e\xd7";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x55\x55\x55\x55\x00\x00\x00\x00\x55\x55\x55\x55\x55\x55\x55\x55\x3e\xf7\xa8\xe4\x8d\x07\xdf\x81\xa6\x93\x43\x96\x54\x21\x0c\x70\x44\x23\x78\x23\xb5\x4e\x0c\x74\xc2\xbf\x5f\x75\x9d\x9a\xc5\xf8\xcb\x89\x7d\x53\x7f\xfa\x92\xef\xfd\x4f\x0b\xb6\xc9\xac\xd8\x60";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_162() {
    let public = b"\x04\
\xed\x05\x87\xe7\x5b\x3b\x9a\x1d\xd0\x79\x4f\x41\xd1\x72\x9f\xcd\x43\x2b\x24\x36\xcb\xf5\x1c\x23\x0d\x8b\xc7\x27\x32\x73\x18\x17\
\x35\xa5\x7f\x09\xc7\x87\x3d\x39\x64\xaa\x81\x02\xc9\xe2\x5f\xa5\x30\x70\xcd\x92\x4c\xb7\xe3\xa4\x59\x17\x47\x40\xb8\xb7\x1c\x34";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x55\x55\x55\x55\x00\x00\x00\x00\x55\x55\x55\x55\x55\x55\x55\x55\x3e\xf7\xa8\xe4\x8d\x07\xdf\x81\xa6\x93\x43\x96\x54\x21\x0c\x70\x26\x6d\x30\xa4\x85\x38\x59\x06\x05\x4c\xa8\x6d\x46\xf5\xf2\xb1\x7e\x7f\x46\x46\xa3\x09\x20\x92\xad\x92\x87\x71\x26\x53\x81\x11";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_163() {
    let public = b"\x04\
\x07\x70\x91\xd9\x90\x04\xa9\x9e\xe0\x82\x24\xe5\x9a\x46\xa7\x04\x95\xe6\xfb\xa4\xef\xf6\x81\xc3\xce\x42\x12\x7e\x58\x86\x81\xef\
\x4f\x1c\x16\xc7\x7d\xfa\x44\x0d\xde\x18\x24\x5c\x9d\xe7\x62\x43\xd8\xf2\xfd\x9d\xea\x3f\x27\x82\xd6\xc0\x49\x74\xd0\x2f\x25\xdc";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x55\x55\x55\x55\x00\x00\x00\x00\x55\x55\x55\x55\x55\x55\x55\x55\x3e\xf7\xa8\xe4\x8d\x07\xdf\x81\xa6\x93\x43\x96\x54\x21\x0c\x70\x53\x8c\x7b\x37\x98\xe8\x4d\x0c\xe9\x03\x40\x16\x58\x06\x34\x89\x71\xed\x44\xdb\x8f\x0c\x67\x4f\x5f\x21\x59\x68\x39\x0f\x92\xee";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_164() {
    let public = b"\x04\
\x61\x6a\x8b\x8e\x57\xd8\x2c\x11\x67\x8f\x58\x27\x91\x10\x24\xcd\x23\xa1\x6c\xb5\x2a\x65\xf2\x30\xfb\x55\x4a\x7b\x11\x0c\x35\xa5\
\xbb\x46\x66\x60\xbe\x5c\xab\x3e\x4b\x58\x7c\x12\xb4\x5b\xd9\x98\xbd\x56\xc7\xd6\x6c\x2f\x94\xd0\x3a\x1a\x6d\x20\x28\xd8\xa1\x54";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x55\x55\x55\x55\x00\x00\x00\x00\x55\x55\x55\x55\x55\x55\x55\x55\x3e\xf7\xa8\xe4\x8d\x07\xdf\x81\xa6\x93\x43\x96\x54\x21\x0c\x70\x6f\xef\x0e\xf1\x5d\x16\x88\xe1\x5e\x70\x4c\x4e\x6b\xb8\xbb\x7f\x40\xd5\x2d\x3a\xf5\xc6\x61\xbb\x78\xc4\xed\x9b\x40\x86\x99\xb3";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_165() {
    let public = b"\x04\
\x71\xdc\x92\xb2\xb1\xba\xa7\x61\x2c\x4a\x53\x42\x7a\x0d\x2d\xfe\x54\x8f\xa9\xcf\x82\x9b\xb6\xb2\x48\xf7\x36\xa5\xeb\x30\xb5\x13\
\xf9\x1c\x7d\xff\x11\x44\xcb\x36\x05\x7c\x2b\x85\x9f\x35\xbd\x66\x6a\x79\x61\x83\x3b\x06\xde\x0f\x45\x15\x9f\xba\xe2\x08\xe3\x26";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x55\x55\x55\x55\x00\x00\x00\x00\x55\x55\x55\x55\x55\x55\x55\x55\x3e\xf7\xa8\xe4\x8d\x07\xdf\x81\xa6\x93\x43\x96\x54\x21\x0c\x70\x6f\x44\x27\x5e\x9a\xeb\x13\x31\xef\xcb\x8d\x58\xf3\x5c\x02\x52\x79\x14\x27\xe4\x03\xad\x84\xda\xad\x51\xd2\x47\xcc\x2a\x64\xc6";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_166() {
    let public = b"\x04\
\x66\x2f\x43\xae\x61\x4b\xd9\xc9\x0f\xf3\xfc\xde\xd2\x5c\xf0\xef\x18\x6b\x69\x67\xa4\x7a\xa6\xaa\x7a\xe7\xf3\x96\x59\x4d\xf9\x31\
\xf5\xf9\x4a\x52\x5e\xdd\x50\xd3\x73\x8f\x7a\x28\xd0\x3d\x7a\x2a\x70\x09\x5c\x8f\x89\xde\x9b\xb2\xc6\x45\xfe\xa8\xd8\xba\xc9\xe0";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x55\x55\x55\x55\x00\x00\x00\x00\x55\x55\x55\x55\x55\x55\x55\x55\x3e\xf7\xa8\xe4\x8d\x07\xdf\x81\xa6\x93\x43\x96\x54\x21\x0c\x70\x21\x32\x37\x55\xb1\x03\xd2\xf9\xda\x6a\xb8\x3e\xcc\xab\x9a\xd8\x59\x8b\xcf\x62\x56\x52\xf1\x0e\x7a\x3e\xee\xe3\xc3\x94\x5f\xb3";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_167() {
    let public = b"\x04\
\xdf\xf1\x07\x95\x9b\xd2\xf7\x38\x64\x97\xa5\x62\x44\x30\xa0\xab\x35\xe5\x52\xc1\xa4\xe4\xdc\x9c\x29\x8c\xae\xb9\x63\x53\x17\x0d\
\xcb\x50\x65\xd7\x94\x7a\x67\x6c\x76\x28\x7c\xa8\xe4\x30\x32\x4f\x8a\x53\x4b\x0b\xa6\xf2\x12\x00\xe0\x33\xc4\xb8\x88\x52\xa3\xcc";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x55\x55\x55\x55\x00\x00\x00\x00\x55\x55\x55\x55\x55\x55\x55\x55\x3e\xf7\xa8\xe4\x8d\x07\xdf\x81\xa6\x93\x43\x96\x54\x21\x0c\x70\x6c\x50\xac\xfe\x76\xde\x12\x89\xe7\xa5\xed\xb2\x40\xf1\xc2\xa7\x87\x9d\xb6\x87\x3d\x5d\x93\x1f\x3c\x6a\xc4\x67\xa6\xea\xc1\x71";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_168() {
    let public = b"\x04\
\xbd\x08\x62\xb0\xbf\xba\x85\x03\x69\x22\xe0\x6f\x54\x58\x75\x4a\xaf\xc3\x07\x5b\x60\x3a\x81\x4b\x3a\xc7\x56\x59\xbf\x24\xd7\x52\
\x82\x58\xa6\x07\xff\xca\x2c\xfe\x05\xa3\x00\xcb\x4c\x3c\x4e\x19\x63\xbb\xb1\xbc\x54\xd3\x20\xe1\x69\x69\xf8\x5a\xad\x24\x33\x85";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x55\x55\x55\x55\x00\x00\x00\x00\x55\x55\x55\x55\x55\x55\x55\x55\x3e\xf7\xa8\xe4\x8d\x07\xdf\x81\xa6\x93\x43\x96\x54\x21\x0c\x70\x75\x5b\x7f\xff\xb0\xb1\x7a\xd5\x7d\xca\x50\xfc\xef\xb7\xfe\x29\x7b\x02\x9d\xf2\x5e\x5c\xcb\x50\x69\xe8\xe7\x0c\x27\x42\xc2\xa6";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_169() {
    let public = b"\x04\
\xb5\x33\xd4\x69\x5d\xd5\xb8\xc5\xe0\x77\x57\xe5\x5e\x6e\x51\x6f\x7e\x2c\x88\xfa\x02\x39\xe2\x3f\x60\xe8\xec\x07\xdd\x70\xf2\x87\
\x1b\x13\x4e\xe5\x8c\xc5\x83\x27\x84\x56\x86\x3f\x33\xc3\xa8\x5d\x88\x1f\x7d\x4a\x39\x85\x01\x43\xe2\x9d\x4e\xaf\x00\x9a\xfe\x47";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\x80\x00\x00\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xde\x73\x7d\x56\xd3\x8b\xcf\x42\x79\xdc\xe5\x61\x7e\x31\x92\xa8\x55\x55\x55\x55\x00\x00\x00\x00\x55\x55\x55\x55\x55\x55\x55\x55\x3e\xf7\xa8\xe4\x8d\x07\xdf\x81\xa6\x93\x43\x96\x54\x21\x0c\x70";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_170() {
    let public = b"\x04\
\xf5\x0d\x37\x1b\x91\xbf\xb1\xd7\xd1\x4e\x13\x23\x52\x3b\xc3\xaa\x8c\xbf\x2c\x57\xf9\xe2\x84\xde\x62\x8c\x8b\x45\x36\x78\x7b\x86\
\xf9\x4a\xd8\x87\xac\x94\xd5\x27\x24\x7c\xd2\xe7\xd0\xc8\xb1\x29\x1c\x55\x3c\x97\x30\x40\x53\x80\xb1\x4c\xbb\x20\x9f\x5f\xa2\xdd";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\x80\x00\x00\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xde\x73\x7d\x56\xd3\x8b\xcf\x42\x79\xdc\xe5\x61\x7e\x31\x92\xa9\x7f\xff\xff\xff\x80\x00\x00\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xde\x73\x7d\x56\xd3\x8b\xcf\x42\x79\xdc\xe5\x61\x7e\x31\x92\xa8";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_171() {
    let public = b"\x04\
\x68\xec\x6e\x29\x8e\xaf\xe1\x65\x39\x15\x6c\xe5\x7a\x14\xb0\x4a\x70\x47\xc2\x21\xba\xfc\x3a\x58\x2e\xae\xb0\xd8\x57\xc4\xd9\x46\
\x97\xbe\xd1\xaf\x17\x85\x01\x17\xfd\xb3\x9b\x23\x24\xf2\x20\xa5\x69\x8e\xd1\x6c\x42\x6a\x27\x33\x5b\xb3\x85\xac\x8c\xa6\xfb\x30";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\x80\x00\x00\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xde\x73\x7d\x56\xd3\x8b\xcf\x42\x79\xdc\xe5\x61\x7e\x31\x92\xa9\x7f\xff\xff\xff\x80\x00\x00\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xde\x73\x7d\x56\xd3\x8b\xcf\x42\x79\xdc\xe5\x61\x7e\x31\x92\xa9";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_172() {
    let public = b"\x04\
\x69\xda\x03\x64\x73\x4d\x2e\x53\x0f\xec\xe9\x40\x19\x26\x5f\xef\xb7\x81\xa0\xf1\xb0\x8f\x6c\x88\x97\xbd\xf6\x55\x79\x27\xc8\xb8\
\x66\xd2\xd3\xc7\xdc\xd5\x18\xb2\x3d\x72\x69\x60\xf0\x69\xad\x71\xa9\x33\xd8\x6e\xf8\xab\xbc\xce\x8b\x20\xf7\x1e\x2a\x84\x70\x02";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x55\x55\x55\x55\x00\x00\x00\x00\x55\x55\x55\x55\x55\x55\x55\x55\x3e\xf7\xa8\xe4\x8d\x07\xdf\x81\xa6\x93\x43\x96\x54\x21\x0c\x70\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_173() {
    let public = b"\x04\
\xd8\xad\xc0\x00\x23\xa8\xed\xc0\x25\x76\xe2\xb6\x3e\x3e\x30\x62\x1a\x47\x1e\x2b\x23\x20\x62\x01\x87\xbf\x06\x7a\x1a\xc1\xff\x32\
\x33\xe2\xb5\x0e\xc0\x98\x07\xac\xcb\x36\x13\x1f\xff\x95\xed\x12\xa0\x9a\x86\xb4\xea\x96\x90\xaa\x32\x86\x15\x76\xba\x23\x62\xe1";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x55\x55\x55\x55\x00\x00\x00\x00\x55\x55\x55\x55\x55\x55\x55\x55\x3e\xf7\xa8\xe4\x8d\x07\xdf\x81\xa6\x93\x43\x96\x54\x21\x0c\x70\x44\xa5\xad\x0a\xd0\x63\x6d\x9f\x12\xbc\x9e\x0a\x6b\xdd\x5e\x1c\xbc\xb0\x12\xea\x7b\xf0\x91\xfc\xec\x15\xb0\xc4\x32\x02\xd5\x2e";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_174() {
    let public = b"\x04\
\x36\x23\xac\x97\x3c\xed\x0a\x56\xfa\x6d\x88\x2f\x03\xa7\xd5\xc7\xed\xca\x02\xcf\xc7\xb2\x40\x1f\xab\x36\x90\xdb\xe7\x5a\xb7\x85\
\x8d\xb0\x69\x08\xe6\x4b\x28\x61\x3d\xa7\x25\x7e\x73\x7f\x39\x79\x3d\xa8\xe7\x13\xba\x06\x43\xb9\x2e\x9b\xb3\x25\x2b\xe7\xf8\xfe";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x55\x55\x55\x55\x00\x00\x00\x00\x55\x55\x55\x55\x55\x55\x55\x55\x3e\xf7\xa8\xe4\x8d\x07\xdf\x81\xa6\x93\x43\x96\x54\x21\x0c\x70\x55\x55\x55\x55\x00\x00\x00\x00\x55\x55\x55\x55\x55\x55\x55\x55\x3e\xf7\xa8\xe4\x8d\x07\xdf\x81\xa6\x93\x43\x96\x54\x21\x0c\x70";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_175() {
    let public = b"\x04\
\xcf\x04\xea\x77\xe9\x62\x25\x23\xd8\x94\xb9\x3f\xf5\x2d\xc3\x02\x7b\x31\x95\x95\x03\xb6\xfa\x38\x90\xe5\xe0\x42\x63\xf9\x22\xf1\
\xe8\x52\x8f\xb7\xc0\x06\xb3\x98\x3c\x8b\x84\x00\xe5\x7b\x4e\xd7\x17\x40\xc2\xf3\x97\x54\x38\x82\x11\x99\xbe\xde\xae\xca\xb2\xe9";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x55\x55\x55\x55\x00\x00\x00\x00\x55\x55\x55\x55\x55\x55\x55\x55\x3e\xf7\xa8\xe4\x8d\x07\xdf\x81\xa6\x93\x43\x96\x54\x21\x0c\x70\xaa\xaa\xaa\xaa\x00\x00\x00\x00\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\x7d\xef\x51\xc9\x1a\x0f\xbf\x03\x4d\x26\x87\x2c\xa8\x42\x18\xe1";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_176() {
    let public = b"\x04\
\xdb\x7a\x2c\x8a\x1a\xb5\x73\xe5\x92\x9d\xc2\x40\x77\xb5\x08\xd7\xe6\x83\xd4\x92\x27\x99\x6b\xda\x3e\x9f\x78\xdb\xef\xf7\x73\x50\
\x4f\x41\x7f\x3b\xc9\xa8\x80\x75\xc2\xe0\xaa\xdd\x5a\x13\x31\x17\x30\xcf\x7c\xc7\x6a\x82\xf1\x1a\x36\xea\xf0\x8a\x6c\x99\xa2\x06";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\xe9\x1e\x1b\xa6\x0f\xde\xdb\x76\xa4\x6b\xcb\x51\xdc\x0b\x8b\x4b\x7e\x01\x9f\x0a\x28\x72\x18\x85\xfa\x5d\x3a\x81\x96\x62\x33\x97";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_177() {
    let public = b"\x04\
\xde\xad\x11\xc7\xa5\xb3\x96\x86\x2f\x21\x97\x4d\xc4\x75\x2f\xad\xef\xf9\x94\xef\xe9\xbb\xd0\x5a\xb4\x13\x76\x5e\xa8\x0b\x6e\x1f\
\x1d\xe3\xf0\x64\x0e\x8a\xc6\xed\xcf\x89\xcf\xf5\x3c\x40\xe2\x65\xbb\x94\x07\x8a\x34\x37\x36\xdf\x07\xaa\x03\x18\xfc\x7f\xe1\xff";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\xfd\xea\x58\x43\xff\xeb\x73\xaf\x94\x31\x3b\xa4\x83\x1b\x53\xfe\x24\xf7\x99\xe5\x25\xb1\xe8\xe8\xc8\x7b\x59\xb9\x5b\x43\x0a\xd9";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_178() {
    let public = b"\x04\
\xd0\xbc\x47\x2e\x0d\x7c\x81\xeb\xae\xd3\xa6\xef\x96\xc1\x86\x13\xbb\x1f\xea\x6f\x99\x43\x26\xfb\xe8\x0e\x00\xdf\xde\x67\xc7\xe9\
\x98\x6c\x72\x3e\xa4\x84\x3d\x48\x38\x9b\x94\x6f\x64\xad\x56\xc8\x3a\xd7\x0f\xf1\x7b\xa8\x53\x35\x66\x7d\x1b\xb9\xfa\x61\x9e\xfd";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x03\xff\xca\xbf\x2f\x1b\x4d\x2a\x65\x19\x0d\xb1\x68\x0d\x62\xbb\x99\x4e\x41\xc5\x25\x1c\xd7\x3b\x3c\x3d\xfc\x5e\x5b\xaf\xc0\x35";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_179() {
    let public = b"\x04\
\xa0\xa4\x4c\xa9\x47\xd6\x6a\x2a\xcb\x73\x60\x08\xb9\xc0\x8d\x1a\xb2\xad\x03\x77\x6e\x02\x64\x0f\x78\x49\x5d\x45\x8d\xd5\x1c\x32\
\x63\x37\xfe\x5c\xf8\xc4\x60\x4b\x1f\x1c\x40\x9d\xc2\xd8\x72\xd4\x29\x4a\x47\x62\x42\x0d\xf4\x3a\x30\xa2\x39\x2e\x40\x42\x6a\xdd";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x4d\xfb\xc4\x01\xf9\x71\xcd\x30\x4b\x33\xdf\xdb\x17\xd0\xfe\xd0\xfe\x4c\x1a\x88\xae\x64\x8e\x0d\x28\x47\xf7\x49\x77\x53\x49\x89";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_180() {
    let public = b"\x04\
\xc9\xc2\x11\x52\x90\xd0\x08\xb4\x5f\xb6\x5f\xad\x0f\x60\x23\x89\x29\x8c\x25\x42\x0b\x77\x50\x19\xd4\x2b\x62\xc3\xce\x8a\x96\xb7\
\x38\x77\xd2\x5a\x80\x80\xdc\x02\xd9\x87\xca\x73\x0f\x04\x05\xc2\xc9\xdb\xef\xac\x46\xf9\xe6\x01\xcc\x3f\x06\xe9\x71\x39\x73\xfd";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\xbc\x40\x24\x76\x1c\xd2\xff\xd4\x3d\xfd\xb1\x7d\x0f\xed\x11\x2b\x98\x89\x77\x05\x5c\xd3\xa8\xe5\x49\x71\xeb\xa9\xcd\xa5\xca\x71";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_181() {
    let public = b"\x04\
\x5e\xca\x1e\xf4\xc2\x87\xdd\xdc\x66\xb8\xbc\xcf\x1b\x88\xe8\xa2\x4c\x00\x18\x96\x2f\x3c\x5e\x7e\xfa\x83\xbc\x1a\x5f\xf6\x03\x3e\
\x5e\x79\xc4\xcb\x2c\x24\x5b\x8c\x45\xab\xdc\xe8\xa8\xe4\xda\x75\x8d\x92\xa6\x07\xc3\x2c\xd4\x07\xec\xae\xf2\x2f\x1c\x93\x4a\x71";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x78\x80\x48\xed\x39\xa5\xff\xa7\x7b\xfb\x62\xfa\x1f\xda\x22\x57\x74\x2b\xf3\x5d\x12\x8f\xb3\x45\x9f\x2a\x0c\x90\x9e\xe8\x6f\x91";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_182() {
    let public = b"\x04\
\x5c\xaa\xa0\x30\xe7\xfd\xf0\xe4\x93\x6b\xc7\xab\x5a\x96\x35\x3e\x0a\x01\xe4\x13\x0c\x3f\x8b\xf2\x2d\x47\x3e\x31\x70\x29\xa4\x7a\
\xde\xb6\xad\xc4\x62\xf7\x05\x8f\x2a\x20\xd3\x71\xe9\x70\x22\x54\xe9\xb2\x01\x64\x20\x05\xb3\xce\xda\x92\x6b\x42\xb1\x78\xbe\xf9";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x47\x6d\x91\x31\xfd\x38\x1b\xd9\x17\xd0\xfe\xd1\x12\xbc\x9e\x0a\x59\x24\xb5\xed\x5b\x11\x16\x7e\xdd\x8b\x23\x58\x2b\x3c\xb1\x5e";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_183() {
    let public = b"\x04\
\xc2\xfd\x20\xba\xc0\x6e\x55\x5b\xb8\xac\x0c\xe6\x9e\xb1\xea\x20\xf8\x3a\x1f\xc3\x50\x1c\x8a\x66\x46\x9b\x1a\x31\xf6\x19\xb0\x98\
\x62\x37\x05\x07\x79\xf5\x2b\x61\x5b\xd7\xb8\xd7\x6a\x25\xfc\x95\xca\x2e\xd3\x25\x25\xc7\x5f\x27\xff\xc8\x7a\xc3\x97\xe6\xcb\xaf";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x83\x74\x25\x3e\x3e\x21\xbd\x15\x44\x48\xd0\xa8\xf6\x40\xfe\x46\xfa\xfa\x8b\x19\xce\x78\xd5\x38\xf6\xcc\x0a\x19\x66\x2d\x36\x01";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_184() {
    let public = b"\x04\
\x3f\xd6\xa1\xca\x7f\x77\xfb\x3b\x0b\xbe\x72\x6c\x37\x20\x10\x06\x84\x26\xe1\x1e\xa6\xae\x78\xce\x17\xbe\xda\xe4\xbb\xa8\x6c\xed\
\x03\xce\x55\x16\x40\x6b\xf8\xcf\xaa\xb8\x74\x5e\xac\x1c\xd6\x90\x18\xad\x6f\x50\xb5\x46\x18\x72\xdd\xfc\x56\xe0\xdb\x3c\x8f\xf4";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x35\x7c\xfd\x3b\xe4\xd0\x1d\x41\x3c\x5b\x9e\xde\x36\xcb\xa5\x45\x2c\x11\xee\x7f\xe1\x48\x79\xe7\x49\xae\x6a\x2d\x89\x7a\x52\xd6";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_185() {
    let public = b"\x04\
\x9c\xb8\xe5\x1e\x27\xa5\xae\x3b\x62\x4a\x60\xd6\xdc\x32\x73\x4e\x49\x89\xdb\x20\xe9\xbc\xa3\xed\xe1\xed\xf7\xb0\x86\x91\x11\x14\
\xb4\xc1\x04\xab\x3c\x67\x7e\x4b\x36\xd6\x55\x6e\x8a\xd5\xf5\x23\x41\x0a\x19\xf2\xe2\x77\xaa\x89\x5f\xc5\x73\x22\xb4\x42\x75\x44";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x29\x79\x8c\x5c\x0e\xe2\x87\xd4\xa5\xe8\xe6\xb7\x99\xfd\x86\xb8\xdf\x52\x25\x29\x8e\x6f\xfc\x80\x7c\xd2\xf2\xbc\x27\xa0\xa6\xd8";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_186() {
    let public = b"\x04\
\xa3\xe5\x2c\x15\x6d\xca\xf1\x05\x02\x62\x0b\x79\x55\xbc\x2b\x40\xbc\x78\xef\x3d\x56\x9e\x12\x23\xc2\x62\x51\x2d\x8f\x49\x60\x2a\
\x4a\x20\x39\xf3\x1c\x10\x97\x02\x4a\xd3\xcc\x86\xe5\x73\x21\xde\x03\x23\x55\x46\x34\x86\x16\x4c\xf1\x92\x94\x49\x77\xdf\x14\x7f";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x0b\x70\xf2\x2c\x78\x10\x92\x45\x2d\xca\x1a\x57\x11\xfa\x3a\x5a\x1f\x72\xad\xd1\xbf\x52\xc2\xff\x7c\xae\x48\x20\xb3\x00\x78\xdd";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_187() {
    let public = b"\x04\
\xf1\x9b\x78\x92\x87\x20\xd5\xbe\xe8\xe6\x70\xfb\x90\x01\x0f\xb1\x5c\x37\xbf\x91\xb5\x8a\x51\x57\xc3\xf3\xc0\x59\xb2\x65\x5e\x88\
\xcf\x70\x1e\xc9\x62\xfb\x4a\x11\xdc\xf2\x73\xf5\xdc\x35\x7e\x58\x46\x85\x60\xc7\xcf\xeb\x94\x2d\x07\x4a\xbd\x43\x29\x26\x05\x09";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x16\xe1\xe4\x58\xf0\x21\x24\x8a\x5b\x94\x34\xae\x23\xf4\x74\xb4\x3e\xe5\x5b\xa3\x7e\xa5\x85\xfe\xf9\x5c\x90\x41\x66\x00\xf1\xba";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_188() {
    let public = b"\x04\
\x83\xa7\x44\x45\x9e\xcd\xfb\x01\xa5\xcf\x52\xb2\x7a\x05\xbb\x73\x37\x48\x2d\x24\x2f\x23\x5d\x7b\x4c\xb8\x93\x45\x54\x5c\x90\xa8\
\xc0\x5d\x49\x33\x7b\x96\x49\x81\x32\x87\xde\x9f\xfe\x90\x35\x5f\xd9\x05\xdf\x5f\x3c\x32\x94\x58\x28\x12\x1f\x37\xcc\x50\xde\x6e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x22\x52\xd6\x85\x68\x31\xb6\xcf\x89\x5e\x4f\x05\x35\xee\xaf\x0e\x5e\x58\x09\x75\x3d\xf8\x48\xfe\x76\x0a\xd8\x62\x19\x01\x6a\x97";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_189() {
    let public = b"\x04\
\xdd\x13\xc6\xb3\x4c\x56\x98\x2d\xda\xe1\x24\xf0\x39\xdf\xd2\x3f\x4b\x19\xbb\xe8\x8c\xee\x8e\x52\x8a\xe5\x1e\x5d\x6f\x3a\x21\xd7\
\xbf\xad\x4c\x2e\x6f\x26\x3f\xe5\xeb\x59\xca\x97\x4d\x03\x9f\xc0\xe4\xc3\x34\x56\x92\xfb\x53\x20\xbd\xae\x4b\xd3\xb4\x2a\x45\xff";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x81\xff\xe5\x5f\x17\x8d\xa6\x95\xb2\x8c\x86\xd8\xb4\x06\xb1\x5d\xab\x1a\x9e\x39\x66\x1a\x3a\xe0\x17\xfb\xe3\x90\xac\x09\x72\xc3";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_190() {
    let public = b"\x04\
\x67\xe6\xf6\x59\xcd\xde\x86\x9a\x2f\x65\xf0\x94\xe9\x4e\x5b\x4d\xfa\xd6\x36\xbb\xf9\x51\x92\xfe\xee\xd0\x1b\x0f\x3d\xeb\x74\x60\
\xa3\x7e\x0a\x51\xf2\x58\xb7\xae\xb5\x1d\xfe\x59\x2f\x5c\xfd\x56\x85\xbb\xe5\x87\x12\xc8\xd9\x23\x3c\x62\x88\x64\x37\xc3\x8b\xa0";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x7f\xff\xff\xff\xaa\xaa\xaa\xaa\xff\xff\xff\xff\xff\xff\xff\xff\xe9\xa2\x53\x8f\x37\xb2\x8a\x2c\x51\x3d\xee\x40\xfe\xcb\xb7\x1a";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_191() {
    let public = b"\x04\
\x2e\xb6\x41\x25\x05\xae\xc0\x5c\x65\x45\xf0\x29\x93\x20\x87\xe4\x90\xd0\x55\x11\xe8\xec\x1f\x59\x96\x17\xbb\x36\x7f\x9e\xca\xaf\
\x80\x5f\x51\xef\xcc\x48\x03\x40\x3f\x9b\x1a\xe0\x12\x48\x90\xf0\x6a\x43\xfe\xdc\xdd\xb3\x18\x30\xf6\x66\x9a\xf2\x92\x89\x5c\xb0";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\xb6\x2f\x26\xb5\xf2\xa2\xb2\x6f\x6d\xe8\x6d\x42\xad\x8a\x13\xda\x3a\xb3\xcc\xcd\x04\x59\xb2\x01\xde\x00\x9e\x52\x6a\xdf\x21\xf2";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_192() {
    let public = b"\x04\
\x84\xdb\x64\x58\x68\xea\xb3\x5e\x3a\x9f\xd8\x0e\x05\x6e\x2e\x85\x54\x35\xe3\xa6\xb6\x8d\x75\xa5\x0a\x85\x46\x25\xfe\x0d\x7f\x35\
\x6d\x25\x89\xac\x65\x5e\xdc\x9a\x11\xef\x3e\x07\x5e\xdd\xda\x9a\xbf\x92\xe7\x21\x71\x57\x0e\xf7\xbf\x43\xa2\xee\x39\x33\x8c\xfe";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\xbb\x1d\x9a\xc9\x49\xdd\x74\x8c\xd0\x2b\xbb\xe7\x49\xbd\x35\x1c\xd5\x7b\x38\xbb\x61\x40\x3d\x70\x06\x86\xaa\x7b\x4c\x90\x85\x1e";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_193() {
    let public = b"\x04\
\x91\xb9\xe4\x7c\x56\x27\x86\x62\xd7\x5c\x09\x83\xb2\x2c\xa8\xea\x6a\xa5\x05\x9b\x7a\x2f\xf7\x63\x7e\xb2\x97\x5e\x38\x6a\xd6\x63\
\x49\xaa\x8f\xf2\x83\xd0\xf7\x7c\x18\xd6\xd1\x1d\xc0\x62\x16\x5f\xd1\x3c\x3c\x03\x10\x67\x9c\x14\x08\x30\x2a\x16\x85\x4e\xcf\xbd";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x66\x75\x5a\x00\x63\x8c\xda\xec\x1c\x73\x25\x13\xca\x02\x34\xec\xe5\x25\x45\xda\xc1\x1f\x81\x6e\x81\x8f\x72\x5b\x4f\x60\xaa\xf2";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_194() {
    let public = b"\x04\
\xf3\xec\x2f\x13\xca\xf0\x4d\x01\x92\xb4\x7f\xb4\xc5\x31\x1f\xb6\xd4\xdc\x6b\x0a\x9e\x80\x2e\x53\x27\xf7\xec\x5e\xe8\xe4\x83\x4d\
\xf9\x7e\x3e\x46\x8b\x7d\x0d\xb8\x67\xd6\xec\xfe\x81\xe2\xb0\xf9\x53\x1d\xf8\x7e\xfd\xb4\x7c\x13\x38\xac\x32\x1f\xef\xe5\xa4\x32";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x55\xa0\x0c\x9f\xcd\xae\xbb\x60\x32\x51\x3c\xa0\x23\x4e\xcf\xff\xe9\x8e\xbe\x49\x2f\xdf\x02\xe4\x8c\xa4\x8e\x98\x2b\xeb\x36\x69";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_195() {
    let public = b"\x04\
\xd9\x2b\x20\x0a\xef\xca\xb6\xac\x7d\xaf\xd9\xac\xaf\x2f\xa1\x0b\x31\x80\x23\x5b\x8f\x46\xb4\x50\x3e\x46\x93\xc6\x70\xfc\xcc\x88\
\x5e\xf2\xf3\xae\xbf\x5b\x31\x74\x75\x33\x62\x56\x76\x8f\x7c\x19\xef\xb7\x35\x2d\x27\xe4\xcc\xca\xdc\x85\xb6\xb8\xab\x92\x2c\x72";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\xab\x40\x19\x3f\x9b\x5d\x76\xc0\x64\xa2\x79\x40\x46\x9d\x9f\xff\xd3\x1d\x7c\x92\x5f\xbe\x05\xc9\x19\x49\x1d\x30\x57\xd6\x6c\xd2";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_196() {
    let public = b"\x04\
\x0a\x88\x36\x1e\xb9\x2e\xcc\xa2\x62\x5b\x38\xe5\xf9\x8b\xba\xbb\x96\xbf\x17\x9b\x3d\x76\xfc\x48\x14\x0a\x3b\xcd\x88\x15\x23\xcd\
\xe6\xbd\xf5\x60\x33\xf8\x4a\x50\x54\x03\x55\x97\x37\x5d\x90\x86\x6a\xa2\xc9\x6b\x86\xa4\x1c\xcf\x6e\xde\xbf\x47\x29\x8a\xd4\x89";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\xca\x02\x34\xeb\xb5\xfd\xcb\x13\xca\x02\x34\xec\xff\xff\xff\xff\xcb\x0d\xad\xbb\xc7\xf5\x49\xf8\xa2\x6b\x44\x08\xd0\xdc\x86\x00";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_197() {
    let public = b"\x04\
\xd0\xfb\x17\xcc\xd8\xfa\xfe\x82\x7e\x0c\x1a\xfc\x5d\x8d\x80\x36\x6e\x2b\x20\xe7\xf1\x4a\x56\x3a\x2b\xa5\x04\x69\xd8\x43\x75\xe8\
\x68\x61\x25\x69\xd3\x9e\x2b\xb9\xf5\x54\x35\x55\x64\x64\x6d\xe9\x9a\xc6\x02\xcc\x63\x49\xcf\x8c\x1e\x23\x6a\x7d\xe7\x63\x7d\x93";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\xbf\xff\xff\xff\x3e\xa3\x67\x7e\x08\x2b\x93\x10\x57\x26\x20\xae\x19\x93\x3a\x9e\x65\xb2\x85\x59\x87\x11\xc7\x72\x98\x81\x5a\xd3";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_198() {
    let public = b"\x04\
\x83\x6f\x33\xbb\xc1\xdc\x0d\x3d\x3a\xbb\xce\xf0\xd9\x1f\x11\xe2\xac\x41\x81\x07\x6c\x9a\xf0\xa2\x2b\x1e\x43\x09\xd3\xed\xb2\x76\
\x9a\xb4\x43\xff\x6f\x90\x1e\x30\xc7\x73\x86\x75\x82\x99\x7c\x2b\xec\x2b\x0c\xb8\x12\x0d\x76\x02\x36\xf3\xa9\x5b\xbe\x88\x1f\x75";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x26\x66\x66\x66\x3b\xbb\xbb\xbb\xe6\x66\x66\x66\x66\x66\x66\x66\x5b\x37\x90\x2e\x02\x3f\xab\x7c\x8f\x05\x5d\x86\xe5\xcc\x41\xf4";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_199() {
    let public = b"\x04\
\x92\xf9\x9f\xbe\x97\x3e\xd4\xa2\x99\x71\x9b\xae\xe4\xb4\x32\x74\x12\x37\x03\x4d\xec\x8d\x72\xba\x51\x03\xcb\x33\xe5\x5f\xee\xb8\
\x03\x3d\xd0\xe9\x11\x34\xc7\x34\x17\x48\x89\xf3\xeb\xcf\x1b\x7a\x1a\xc0\x57\x67\x28\x92\x80\xee\x7a\x79\x4c\xeb\xd6\xe6\x96\x97";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\xbf\xff\xff\xff\x36\xdb\x6d\xb7\xa4\x92\x49\x24\x92\x49\x24\x92\x14\x6c\x57\x3f\x4c\x6d\xfc\x8d\x08\xa4\x43\xe2\x58\x97\x0b\x09";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_200() {
    let public = b"\x04\
\xd3\x5b\xa5\x8d\xa3\x01\x97\xd3\x78\xe6\x18\xec\x0f\xa7\xe2\xe2\xd1\x2c\xff\xd7\x3e\xbb\xb2\x04\x9d\x13\x0b\xba\x43\x4a\xf0\x9e\
\xff\x83\x98\x6e\x68\x75\xe4\x1e\xa4\x32\xb7\x58\x5a\x49\xb3\xa6\xc7\x7c\xbb\x3c\x47\x91\x9f\x8e\x82\x87\x4c\x79\x46\x35\xc1\xd2";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\xbf\xff\xff\xff\x2a\xaa\xaa\xab\x7f\xff\xff\xff\xff\xff\xff\xff\xc8\x15\xd0\xe6\x0b\x3e\x59\x6e\xcb\x1a\xd3\xa2\x7c\xfd\x49\xc4";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_201() {
    let public = b"\x04\
\x86\x51\xce\x49\x0f\x1b\x46\xd7\x3f\x3f\xf4\x75\x14\x9b\xe2\x91\x36\x69\x73\x34\xa5\x19\xd7\xdd\xab\x07\x25\xc8\xd0\x79\x32\x24\
\xe1\x1c\x65\xbd\x8c\xa9\x2d\xc8\xbc\x9a\xe8\x29\x11\xf0\xb5\x27\x51\xce\x21\xdd\x90\x03\xae\x60\x90\x0b\xd8\x25\xf5\x90\xcc\x28";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x7f\xff\xff\xff\x55\x55\x55\x55\xff\xff\xff\xff\xff\xff\xff\xff\xd3\x44\xa7\x1e\x6f\x65\x14\x58\xa2\x7b\xdc\x81\xfd\x97\x6e\x37";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_202() {
    let public = b"\x04\
\x6d\x8e\x1b\x12\xc8\x31\xa0\xda\x87\x95\x65\x0f\xf9\x5f\x10\x1e\xd9\x21\xd9\xe2\xf7\x2b\x15\xb1\xcd\xac\xa9\x82\x6b\x9c\xfc\x6d\
\xef\x6d\x63\xe2\xbc\x5c\x08\x95\x70\x39\x4a\x4b\xc9\xf8\x92\xd5\xe6\xc7\xa6\xa6\x37\xb2\x04\x69\xa5\x8c\x10\x6a\xd4\x86\xbf\x37";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x3f\xff\xff\xff\x80\x00\x00\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xde\x73\x7d\x56\xd3\x8b\xcf\x42\x79\xdc\xe5\x61\x7e\x31\x92\xaa";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_203() {
    let public = b"\x04\
\x0a\xe5\x80\xba\xe9\x33\xb4\xef\x29\x97\xcb\xdb\xb0\x92\x23\x28\xca\x9a\x41\x0f\x62\x7a\x0f\x7d\xff\x24\xcb\x4d\x92\x0e\x15\x42\
\x89\x11\xe7\xf8\xcc\x36\x5a\x8a\x88\xeb\x81\x42\x1a\x36\x1c\xcc\x2b\x99\xe3\x09\xd8\xdc\xd9\xa9\x8b\xa8\x3c\x39\x49\xd8\x93\xe3";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfd\x5d\x8e\xcd\x64\xa4\xee\xba\x46\x68\x15\xdd\xf3\xa4\xde\x9a\x8e\x6a\xbd\x9c\x5d\xb0\xa0\x1e\xb8\x03\x43\x55\x3d\xa6\x48\x42\x8f";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_204() {
    let public = b"\x04\
\x5b\x81\x2f\xd5\x21\xaa\xfa\x69\x83\x5a\x84\x9c\xce\x6f\xbd\xeb\x69\x83\xb4\x42\xd2\x44\x4f\xe7\x0e\x13\x4c\x02\x7f\xc4\x69\x63\
\x83\x8a\x40\xf2\xa3\x60\x92\xe9\x00\x4e\x92\xd8\xd9\x40\xcf\x56\x38\x55\x0c\xe6\x72\xce\x8b\x8d\x4e\x15\xeb\xa5\x49\x92\x49\xe9";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x6f\x23\x47\xca\xb7\xdd\x76\x85\x8f\xe0\x55\x5a\xc3\xbc\x99\x04\x8c\x4a\xac\xaf\xdf\xb6\xbc\xbe\x05\xea\x6c\x42\xc4\x93\x45\x69\xbb\x72\x66\x60\x23\x57\x93\xaa\x99\x57\xa6\x1e\x76\xe0\x0c\x2c\x43\x51\x09\xcf\x9a\x15\xdd\x62\x4d\x53\xf4\x30\x10\x47\x85\x6b";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_205() {
    let public = b"\x04\
\x5b\x81\x2f\xd5\x21\xaa\xfa\x69\x83\x5a\x84\x9c\xce\x6f\xbd\xeb\x69\x83\xb4\x42\xd2\x44\x4f\xe7\x0e\x13\x4c\x02\x7f\xc4\x69\x63\
\x7c\x75\xbf\x0c\x5c\x9f\x6d\x17\xff\xb1\x6d\x27\x26\xbf\x30\xa9\xc7\xaa\xf3\x1a\x8d\x31\x74\x72\xb1\xea\x14\x5a\xb6\x6d\xb6\x16";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x6f\x23\x47\xca\xb7\xdd\x76\x85\x8f\xe0\x55\x5a\xc3\xbc\x99\x04\x8c\x4a\xac\xaf\xdf\xb6\xbc\xbe\x05\xea\x6c\x42\xc4\x93\x45\x69\xbb\x72\x66\x60\x23\x57\x93\xaa\x99\x57\xa6\x1e\x76\xe0\x0c\x2c\x43\x51\x09\xcf\x9a\x15\xdd\x62\x4d\x53\xf4\x30\x10\x47\x85\x6b";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_206() {
    let public = b"\x04\
\x6a\xdd\xa8\x2b\x90\x26\x1b\x0f\x31\x9f\xaa\x0d\x87\x86\x65\xa6\xb6\xda\x49\x7f\x09\xc9\x03\x17\x62\x22\xc3\x4a\xcf\xef\x72\xa6\
\x47\xe6\xf5\x0d\xcc\x40\xad\x5d\x9b\x59\xf7\x60\x2b\xb2\x22\xfa\xd7\x1a\x41\xbf\x5e\x1f\x9d\xf4\x95\x9a\x36\x4c\x62\xe4\x88\xd9";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x55\x55\x55\x55\x00\x00\x00\x00\x55\x55\x55\x55\x55\x55\x55\x55\x3e\xf7\xa8\xe4\x8d\x07\xdf\x81\xa6\x93\x43\x96\x54\x21\x0c\x70";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_207() {
    let public = b"\x04\
\x2f\xca\x0d\x0a\x47\x91\x4d\xe7\x7e\xd5\x6e\x7e\xcc\xc3\x27\x6a\x60\x11\x20\xc6\xdf\x00\x69\xc8\x25\xc8\xf6\xa0\x1c\x9f\x38\x20\
\x65\xf3\x45\x0a\x1d\x17\xc6\xb2\x49\x89\xa3\x9b\xeb\x1c\x7d\xec\xfc\xa8\x38\x4f\xbd\xc2\x94\x41\x8e\x5d\x80\x7b\x3c\x6e\xd7\xde";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x33\x33\x33\x33\x00\x00\x00\x00\x33\x33\x33\x33\x33\x33\x33\x33\x25\xc7\xcb\xbc\x54\x9e\x52\xe7\x63\xf1\xf5\x5a\x32\x7a\x3a\xa9";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::WrongLength)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_208() {
    let public = b"\x04\
\xdd\x86\xd3\xb5\xf4\xa1\x3e\x85\x11\x08\x3b\x78\x00\x20\x81\xc5\x3f\xf4\x67\xf1\x1e\xbd\x98\xa5\x1a\x63\x3d\xb7\x66\x65\xd2\x50\
\x45\xd5\xc8\x20\x0c\x89\xf2\xfa\x10\xd8\x49\x34\x92\x26\xd2\x1d\x8d\xfa\xed\x6f\xf8\xd5\xcb\x3e\x1b\x7e\x17\x47\x4e\xbc\x18\xf7";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x55\x55\x55\x55\x00\x00\x00\x00\x55\x55\x55\x55\x55\x55\x55\x55\x3e\xf7\xa8\xe4\x8d\x07\xdf\x81\xa6\x93\x43\x96\x54\x21\x0c\x70\x33\x33\x33\x33\x00\x00\x00\x00\x33\x33\x33\x33\x33\x33\x33\x33\x25\xc7\xcb\xbc\x54\x9e\x52\xe7\x63\xf1\xf5\x5a\x32\x7a\x3a\xa9";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_209() {
    let public = b"\x04\
\x4f\xea\x55\xb3\x2c\xb3\x2a\xca\x0c\x12\xc4\xcd\x0a\xbf\xb4\xe6\x4b\x0f\x5a\x51\x6e\x57\x8c\x01\x65\x91\xa9\x3f\x5a\x0f\xbc\xc5\
\xd7\xd3\xfd\x10\xb2\xbe\x66\x8c\x54\x7b\x21\x2f\x6b\xb1\x4c\x88\xf0\xfe\xcd\x38\xa8\xa4\xb2\xc7\x85\xed\x3b\xe6\x2c\xe4\xb2\x80";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7c\xf2\x7b\x18\x8d\x03\x4f\x7e\x8a\x52\x38\x03\x04\xb5\x1a\xc3\xc0\x89\x69\xe2\x77\xf2\x1b\x35\xa6\x0b\x48\xfc\x47\x66\x99\x78\x55\x55\x55\x55\x00\x00\x00\x00\x55\x55\x55\x55\x55\x55\x55\x55\x3e\xf7\xa8\xe4\x8d\x07\xdf\x81\xa6\x93\x43\x96\x54\x21\x0c\x70";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_210() {
    let public = b"\x04\
\xc6\xa7\x71\x52\x70\x24\x22\x77\x92\x17\x0a\x6f\x8e\xee\x73\x5b\xf3\x2b\x7f\x98\xaf\x66\x9e\xad\x29\x98\x02\xe3\x2d\x7c\x31\x07\
\xbc\x3b\x4b\x5e\x65\xab\x88\x7b\xbd\x34\x35\x72\xb3\xe5\x61\x92\x61\xfe\x3a\x07\x3e\x2f\xfd\x78\x41\x2f\x72\x68\x67\xdb\x58\x9e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7c\xf2\x7b\x18\x8d\x03\x4f\x7e\x8a\x52\x38\x03\x04\xb5\x1a\xc3\xc0\x89\x69\xe2\x77\xf2\x1b\x35\xa6\x0b\x48\xfc\x47\x66\x99\x78\xb6\xdb\x6d\xb6\x24\x92\x49\x25\x49\x24\x92\x49\x24\x92\x49\x24\x62\x5b\xd7\xa0\x9b\xec\x4c\xa8\x1b\xcd\xd9\xf8\xfd\x6b\x63\xcc";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_211() {
    let public = b"\x04\
\x85\x1c\x2b\xba\xd0\x8e\x54\xec\x7a\x9a\xf9\x9f\x49\xf0\x36\x44\xd6\xec\x6d\x59\xb2\x07\xfe\xc9\x8d\xe8\x5a\x7d\x15\xb9\x56\xef\
\xce\xe9\x96\x02\x83\x04\x50\x75\x68\x4b\x41\x0b\xe8\xd0\xf7\x49\x4b\x91\xaa\x23\x79\xf6\x07\x27\x31\x9f\x10\xdd\xeb\x0f\xe9\xd6";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7c\xf2\x7b\x18\x8d\x03\x4f\x7e\x8a\x52\x38\x03\x04\xb5\x1a\xc3\xc0\x89\x69\xe2\x77\xf2\x1b\x35\xa6\x0b\x48\xfc\x47\x66\x99\x78\xcc\xcc\xcc\xcc\x00\x00\x00\x00\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\x97\x1f\x2e\xf1\x52\x79\x4b\x9d\x8f\xc7\xd5\x68\xc9\xe8\xea\xa7";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_212() {
    let public = b"\x04\
\xf6\x41\x7c\x8a\x67\x05\x84\xe3\x88\x67\x69\x49\xe5\x3d\xa7\xfc\x55\x91\x1f\xf6\x83\x18\xd1\xbf\x30\x61\x20\x5a\xcb\x19\xc4\x8f\
\x8f\x2b\x74\x3d\xf3\x4a\xd0\xf7\x26\x74\xac\xb7\x50\x59\x29\x78\x47\x79\xcd\x9a\xc9\x16\xc3\x66\x9e\xad\x43\x02\x6a\xb6\xd4\x3f";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7c\xf2\x7b\x18\x8d\x03\x4f\x7e\x8a\x52\x38\x03\x04\xb5\x1a\xc3\xc0\x89\x69\xe2\x77\xf2\x1b\x35\xa6\x0b\x48\xfc\x47\x66\x99\x78\x33\x33\x33\x33\x00\x00\x00\x00\x33\x33\x33\x33\x33\x33\x33\x33\x25\xc7\xcb\xbc\x54\x9e\x52\xe7\x63\xf1\xf5\x5a\x32\x7a\x3a\xaa";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_213() {
    let public = b"\x04\
\x50\x14\x21\x27\x7b\xe4\x5a\x5e\xef\xec\x6c\x63\x99\x30\xd6\x36\x03\x25\x65\xaf\x42\x0c\xf3\x37\x3f\x55\x7f\xaa\x7f\x8a\x06\x43\
\x86\x73\xd6\xcb\x60\x76\xe1\xcf\xcd\xc7\xdf\xe7\x38\x4c\x8e\x5c\xac\x08\xd7\x45\x01\xf2\xae\x6e\x89\xca\xd1\x95\xd0\xaa\x13\x71";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7c\xf2\x7b\x18\x8d\x03\x4f\x7e\x8a\x52\x38\x03\x04\xb5\x1a\xc3\xc0\x89\x69\xe2\x77\xf2\x1b\x35\xa6\x0b\x48\xfc\x47\x66\x99\x78\x49\x24\x92\x48\xdb\x6d\xb6\xdb\xb6\xdb\x6d\xb6\xdb\x6d\xb6\xdb\x5a\x8b\x23\x0d\x0b\x2b\x51\xdc\xd7\xeb\xf0\xc9\xfe\xf7\xc1\x85";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_214() {
    let public = b"\x04\
\x0d\x93\x5b\xf9\xff\xc1\x15\xa5\x27\x73\x5f\x72\x9c\xa8\xa4\xca\x23\xee\x01\xa4\x89\x4a\xdf\x0e\x34\x15\xac\x84\xe8\x08\xbb\x34\
\x31\x95\xa3\x76\x2f\xea\x29\xed\x38\x91\x2b\xd9\xea\x6c\x4f\xde\x70\xc3\x05\x08\x93\xa4\x37\x58\x50\xce\x61\xd8\x2e\xba\x33\xc5";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x7c\xf2\x7b\x18\x8d\x03\x4f\x7e\x8a\x52\x38\x03\x04\xb5\x1a\xc3\xc0\x89\x69\xe2\x77\xf2\x1b\x35\xa6\x0b\x48\xfc\x47\x66\x99\x78\x16\xa4\x50\x2e\x27\x81\xe1\x1a\xc8\x2c\xbc\x9d\x1e\xdd\x8c\x98\x15\x84\xd1\x3e\x18\x41\x1e\x2f\x6e\x04\x78\xc3\x44\x16\xe3\xbb";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_215() {
    let public = b"\x04\
\x5e\x59\xf5\x07\x08\x64\x6b\xe8\xa5\x89\x35\x50\x14\x30\x8e\x60\xb6\x68\xfb\x67\x01\x96\x20\x6c\x41\xe7\x48\xe6\x4e\x4d\xca\x21\
\x5d\xe3\x7f\xee\x5c\x97\xbc\xaf\x71\x44\xd5\xb4\x59\x98\x2f\x52\xee\xea\xfb\xdf\x03\xaa\xcb\xaf\xef\x38\xe2\x13\x62\x4a\x01\xde";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x6b\x17\xd1\xf2\xe1\x2c\x42\x47\xf8\xbc\xe6\xe5\x63\xa4\x40\xf2\x77\x03\x7d\x81\x2d\xeb\x33\xa0\xf4\xa1\x39\x45\xd8\x98\xc2\x96\x55\x55\x55\x55\x00\x00\x00\x00\x55\x55\x55\x55\x55\x55\x55\x55\x3e\xf7\xa8\xe4\x8d\x07\xdf\x81\xa6\x93\x43\x96\x54\x21\x0c\x70";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_216() {
    let public = b"\x04\
\x16\x9f\xb7\x97\x32\x58\x43\xfa\xff\x2f\x7a\x5b\x54\x45\xda\x9e\x2f\xd6\x22\x6f\x7e\xf9\x0e\xf0\xbf\xe9\x24\x10\x4b\x02\xdb\x8e\
\x7b\xbb\x8d\xe6\x62\xc7\xb9\xb1\xcf\x9b\x22\xf7\xa2\xe5\x82\xbd\x46\xd5\x81\xd6\x88\x78\xef\xb2\xb8\x61\xb1\x31\xd8\xa1\xd6\x67";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x6b\x17\xd1\xf2\xe1\x2c\x42\x47\xf8\xbc\xe6\xe5\x63\xa4\x40\xf2\x77\x03\x7d\x81\x2d\xeb\x33\xa0\xf4\xa1\x39\x45\xd8\x98\xc2\x96\xb6\xdb\x6d\xb6\x24\x92\x49\x25\x49\x24\x92\x49\x24\x92\x49\x24\x62\x5b\xd7\xa0\x9b\xec\x4c\xa8\x1b\xcd\xd9\xf8\xfd\x6b\x63\xcc";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_217() {
    let public = b"\x04\
\x27\x1c\xd8\x9c\x00\x01\x43\x09\x6b\x62\xd4\xe9\xe4\xca\x88\x5a\xef\x2f\x70\x23\xd1\x8a\xff\xda\xf8\xb7\xb5\x48\x98\x14\x87\x54\
\x0a\x1c\x6e\x95\x4e\x32\x10\x84\x35\xb5\x5f\xa3\x85\xb0\xf7\x64\x81\xa6\x09\xb9\x14\x9c\xcb\x4b\x02\xb2\xca\x47\xfe\x8e\x4d\xa5";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x6b\x17\xd1\xf2\xe1\x2c\x42\x47\xf8\xbc\xe6\xe5\x63\xa4\x40\xf2\x77\x03\x7d\x81\x2d\xeb\x33\xa0\xf4\xa1\x39\x45\xd8\x98\xc2\x96\xcc\xcc\xcc\xcc\x00\x00\x00\x00\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\x97\x1f\x2e\xf1\x52\x79\x4b\x9d\x8f\xc7\xd5\x68\xc9\xe8\xea\xa7";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_218() {
    let public = b"\x04\
\x3d\x0b\xc7\xed\x8f\x09\xd2\xcb\x7d\xdb\x46\xeb\xc1\xed\x79\x9a\xb1\x56\x3a\x9a\xb8\x4b\xf5\x24\x58\x7a\x22\x0a\xfe\x49\x9c\x12\
\xe2\x2d\xc3\xb3\xc1\x03\x82\x4a\x4f\x37\x8d\x96\xad\xb0\xa4\x08\xab\xf1\x9c\xe7\xd6\x8a\xa6\x24\x4f\x78\xcb\x21\x6f\xa3\xf8\xdf";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x6b\x17\xd1\xf2\xe1\x2c\x42\x47\xf8\xbc\xe6\xe5\x63\xa4\x40\xf2\x77\x03\x7d\x81\x2d\xeb\x33\xa0\xf4\xa1\x39\x45\xd8\x98\xc2\x96\x33\x33\x33\x33\x00\x00\x00\x00\x33\x33\x33\x33\x33\x33\x33\x33\x25\xc7\xcb\xbc\x54\x9e\x52\xe7\x63\xf1\xf5\x5a\x32\x7a\x3a\xaa";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_219() {
    let public = b"\x04\
\xa6\xc8\x85\xad\xe1\xa4\xc5\x66\xf9\xbb\x01\x0d\x06\x69\x74\xab\xb2\x81\x79\x7f\xa7\x01\x28\x8c\x72\x1b\xcb\xd2\x36\x63\xa9\xb7\
\x2e\x42\x4b\x69\x09\x57\x16\x8d\x19\x3a\x60\x96\xfc\x77\xa2\xb0\x04\xa9\xc7\xd4\x67\xe0\x07\xe1\xf2\x05\x84\x58\xf9\x8a\xf3\x16";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x6b\x17\xd1\xf2\xe1\x2c\x42\x47\xf8\xbc\xe6\xe5\x63\xa4\x40\xf2\x77\x03\x7d\x81\x2d\xeb\x33\xa0\xf4\xa1\x39\x45\xd8\x98\xc2\x96\x49\x24\x92\x48\xdb\x6d\xb6\xdb\xb6\xdb\x6d\xb6\xdb\x6d\xb6\xdb\x5a\x8b\x23\x0d\x0b\x2b\x51\xdc\xd7\xeb\xf0\xc9\xfe\xf7\xc1\x85";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_220() {
    let public = b"\x04\
\x8d\x3c\x2c\x2c\x3b\x76\x5b\xa8\x28\x9e\x6a\xc3\x81\x25\x72\xa2\x5b\xf7\x5d\xf6\x2d\x87\xab\x73\x30\xc3\xbd\xba\xd9\xeb\xfa\x5c\
\x4c\x68\x45\x44\x2d\x66\x93\x5b\x23\x85\x78\xd4\x3a\xec\x54\xf7\xca\xa1\x62\x1d\x1a\xf2\x41\xd4\x63\x2e\x0b\x78\x0c\x42\x3f\x5d";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x6b\x17\xd1\xf2\xe1\x2c\x42\x47\xf8\xbc\xe6\xe5\x63\xa4\x40\xf2\x77\x03\x7d\x81\x2d\xeb\x33\xa0\xf4\xa1\x39\x45\xd8\x98\xc2\x96\x16\xa4\x50\x2e\x27\x81\xe1\x1a\xc8\x2c\xbc\x9d\x1e\xdd\x8c\x98\x15\x84\xd1\x3e\x18\x41\x1e\x2f\x6e\x04\x78\xc3\x44\x16\xe3\xbb";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_221() {
    let public = b"\x04\
\x6b\x17\xd1\xf2\xe1\x2c\x42\x47\xf8\xbc\xe6\xe5\x63\xa4\x40\xf2\x77\x03\x7d\x81\x2d\xeb\x33\xa0\xf4\xa1\x39\x45\xd8\x98\xc2\x96\
\x4f\xe3\x42\xe2\xfe\x1a\x7f\x9b\x8e\xe7\xeb\x4a\x7c\x0f\x9e\x16\x2b\xce\x33\x57\x6b\x31\x5e\xce\xcb\xb6\x40\x68\x37\xbf\x51\xf5";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23\x24\x92\x49\x24\x6d\xb6\xdb\x6d\xdb\x6d\xb6\xdb\x6d\xb6\xdb\x6d\xad\x45\x91\x86\x85\x95\xa8\xee\x6b\xf5\xf8\x64\xff\x7b\xe0\xc2";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_222() {
    let public = b"\x04\
\x6b\x17\xd1\xf2\xe1\x2c\x42\x47\xf8\xbc\xe6\xe5\x63\xa4\x40\xf2\x77\x03\x7d\x81\x2d\xeb\x33\xa0\xf4\xa1\x39\x45\xd8\x98\xc2\x96\
\x4f\xe3\x42\xe2\xfe\x1a\x7f\x9b\x8e\xe7\xeb\x4a\x7c\x0f\x9e\x16\x2b\xce\x33\x57\x6b\x31\x5e\xce\xcb\xb6\x40\x68\x37\xbf\x51\xf5";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x44\xa5\xad\x0a\xd0\x63\x6d\x9f\x12\xbc\x9e\x0a\x6b\xdd\x5e\x1c\xbc\xb0\x12\xea\x7b\xf0\x91\xfc\xec\x15\xb0\xc4\x32\x02\xd5\x2e\x24\x92\x49\x24\x6d\xb6\xdb\x6d\xdb\x6d\xb6\xdb\x6d\xb6\xdb\x6d\xad\x45\x91\x86\x85\x95\xa8\xee\x6b\xf5\xf8\x64\xff\x7b\xe0\xc2";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_223() {
    let public = b"\x04\
\x6b\x17\xd1\xf2\xe1\x2c\x42\x47\xf8\xbc\xe6\xe5\x63\xa4\x40\xf2\x77\x03\x7d\x81\x2d\xeb\x33\xa0\xf4\xa1\x39\x45\xd8\x98\xc2\x96\
\xb0\x1c\xbd\x1c\x01\xe5\x80\x65\x71\x18\x14\xb5\x83\xf0\x61\xe9\xd4\x31\xcc\xa9\x94\xce\xa1\x31\x34\x49\xbf\x97\xc8\x40\xae\x0a";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23\x24\x92\x49\x24\x6d\xb6\xdb\x6d\xdb\x6d\xb6\xdb\x6d\xb6\xdb\x6d\xad\x45\x91\x86\x85\x95\xa8\xee\x6b\xf5\xf8\x64\xff\x7b\xe0\xc2";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_224() {
    let public = b"\x04\
\x6b\x17\xd1\xf2\xe1\x2c\x42\x47\xf8\xbc\xe6\xe5\x63\xa4\x40\xf2\x77\x03\x7d\x81\x2d\xeb\x33\xa0\xf4\xa1\x39\x45\xd8\x98\xc2\x96\
\xb0\x1c\xbd\x1c\x01\xe5\x80\x65\x71\x18\x14\xb5\x83\xf0\x61\xe9\xd4\x31\xcc\xa9\x94\xce\xa1\x31\x34\x49\xbf\x97\xc8\x40\xae\x0a";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\x44\xa5\xad\x0a\xd0\x63\x6d\x9f\x12\xbc\x9e\x0a\x6b\xdd\x5e\x1c\xbc\xb0\x12\xea\x7b\xf0\x91\xfc\xec\x15\xb0\xc4\x32\x02\xd5\x2e\x24\x92\x49\x24\x6d\xb6\xdb\x6d\xdb\x6d\xb6\xdb\x6d\xb6\xdb\x6d\xad\x45\x91\x86\x85\x95\xa8\xee\x6b\xf5\xf8\x64\xff\x7b\xe0\xc2";
    assert_eq!(
        public_key.verify(&hash[..], &signature[..]),
        Err(Error::BadSignature)
    );
}
#[test]
fn test_verify_ecdsa_p256_sha256_225() {
    let public = b"\x04\
\x04\xaa\xec\x73\x63\x57\x26\xf2\x13\xfb\x8a\x9e\x64\xda\x3b\x86\x32\xe4\x14\x95\xa9\x44\xd0\x04\x5b\x52\x2e\xba\x72\x40\xfa\xd5\
\x87\xd9\x31\x57\x98\xaa\xa3\xa5\xba\x01\x77\x57\x87\xce\xd0\x5e\xaa\xf7\xb4\xe0\x9f\xc8\x1d\x6d\x1a\xa5\x46\xe8\x36\x5d\x52\x5d";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"";
    let hash = b"\xe3\xb0\xc4\x42\x98\xfc\x1c\x14\x9a\xfb\xf4\xc8\x99\x6f\xb9\x24\x27\xae\x41\xe4\x64\x9b\x93\x4c\xa4\x95\x99\x1b\x78\x52\xb8\x55";
    let signature = b"\xb2\x92\xa6\x19\x33\x9f\x6e\x56\x7a\x30\x5c\x95\x1c\x0d\xcb\xcc\x42\xd1\x6e\x47\xf2\x19\xf9\xe9\x8e\x76\xe0\x9d\x87\x70\xb3\x4a\x01\x77\xe6\x04\x92\xc5\xa8\x24\x2f\x76\xf0\x7b\xfe\x36\x61\xbd\xe5\x9e\xc2\xa1\x7c\xe5\xbd\x2d\xab\x2a\xbe\xbd\xf8\x9a\x62\xe2";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_226() {
    let public = b"\x04\
\x04\xaa\xec\x73\x63\x57\x26\xf2\x13\xfb\x8a\x9e\x64\xda\x3b\x86\x32\xe4\x14\x95\xa9\x44\xd0\x04\x5b\x52\x2e\xba\x72\x40\xfa\xd5\
\x87\xd9\x31\x57\x98\xaa\xa3\xa5\xba\x01\x77\x57\x87\xce\xd0\x5e\xaa\xf7\xb4\xe0\x9f\xc8\x1d\x6d\x1a\xa5\x46\xe8\x36\x5d\x52\x5d";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x4d\x73\x67";
    let hash = b"\xdc\x19\x21\x94\x6f\x4a\xf9\x6a\x28\x56\xe7\xbe\x39\x90\x07\xc9\xe8\x07\xbd\xf4\xc5\x33\x2f\x19\xf5\x9e\xc9\xdd\x1b\xb8\xc7\xb3";
    let signature = b"\x53\x0b\xd6\xb0\xc9\xaf\x2d\x69\xba\x89\x7f\x6b\x5f\xb5\x96\x95\xcf\xbf\x33\xaf\xe6\x6d\xba\xdc\xf5\xb8\xd2\xa2\xa6\x53\x8e\x23\xd8\x5e\x48\x9c\xb7\xa1\x61\xfd\x55\xed\xed\xce\xdb\xf4\xcc\x0c\x09\x87\xe3\xe3\xf0\xf2\x42\xca\xe9\x34\xc7\x2c\xaa\x3f\x43\xe9";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_227() {
    let public = b"\x04\
\x04\xaa\xec\x73\x63\x57\x26\xf2\x13\xfb\x8a\x9e\x64\xda\x3b\x86\x32\xe4\x14\x95\xa9\x44\xd0\x04\x5b\x52\x2e\xba\x72\x40\xfa\xd5\
\x87\xd9\x31\x57\x98\xaa\xa3\xa5\xba\x01\x77\x57\x87\xce\xd0\x5e\xaa\xf7\xb4\xe0\x9f\xc8\x1d\x6d\x1a\xa5\x46\xe8\x36\x5d\x52\x5d";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x31\x32\x33\x34\x30\x30";
    let hash = b"\xbb\x5a\x52\xf4\x2f\x9c\x92\x61\xed\x43\x61\xf5\x94\x22\xa1\xe3\x00\x36\xe7\xc3\x2b\x27\x0c\x88\x07\xa4\x19\xfe\xca\x60\x50\x23";
    let signature = b"\xa8\xea\x15\x0c\xb8\x01\x25\xd7\x38\x1c\x4c\x1f\x1d\xa8\xe9\xde\x27\x11\xf9\x91\x70\x60\x40\x6a\x73\xd7\x90\x45\x19\xe5\x13\x88\xf3\xab\x9f\xa6\x8b\xd4\x79\x73\xa7\x3b\x2d\x40\x48\x0c\x2b\xa5\x0c\x22\xc9\xd7\x6e\xc2\x17\x25\x72\x88\x29\x32\x85\x44\x9b\x86";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_228() {
    let public = b"\x04\
\x04\xaa\xec\x73\x63\x57\x26\xf2\x13\xfb\x8a\x9e\x64\xda\x3b\x86\x32\xe4\x14\x95\xa9\x44\xd0\x04\x5b\x52\x2e\xba\x72\x40\xfa\xd5\
\x87\xd9\x31\x57\x98\xaa\xa3\xa5\xba\x01\x77\x57\x87\xce\xd0\x5e\xaa\xf7\xb4\xe0\x9f\xc8\x1d\x6d\x1a\xa5\x46\xe8\x36\x5d\x52\x5d";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message =
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    let hash = b"\xde\x47\xc9\xb2\x7e\xb8\xd3\x00\xdb\xb5\xf2\xc3\x53\xe6\x32\xc3\x93\x26\x2c\xf0\x63\x40\xc4\xfa\x7f\x1b\x40\xc4\xcb\xd3\x6f\x90";
    let signature = b"\x98\x6e\x65\x93\x3e\xf2\xed\x4e\xe5\xaa\xda\x13\x9f\x52\xb7\x05\x39\xaa\xf6\x3f\x00\xa9\x1f\x29\xc6\x91\x78\x49\x0d\x57\xfb\x71\x3d\xaf\xed\xfb\x8d\xa6\x18\x9d\x37\x23\x08\xcb\xf1\x48\x9b\xbb\xda\xbf\x0c\x02\x17\xd1\xc0\xff\x0f\x70\x1a\xaa\x7a\x69\x4b\x9c";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_229() {
    let public = b"\x04\
\x4f\x33\x7c\xcf\xd6\x77\x26\xa8\x05\xe4\xf1\x60\x0a\xe2\x84\x9d\xf3\x80\x7e\xca\x11\x73\x80\x23\x9f\xbd\x81\x69\x00\x00\x00\x00\
\xed\x9d\xea\x12\x4c\xc8\xc3\x96\x41\x64\x11\xe9\x88\xc3\x0f\x42\x7e\xb5\x04\xaf\x43\xa3\x14\x6c\xd5\xdf\x7e\xa6\x06\x66\xd6\x85";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x4d\x65\x73\x73\x61\x67\x65";
    let hash = b"\x2f\x77\x66\x8a\x9d\xfb\xf8\xd5\x84\x8b\x9e\xeb\x4a\x71\x45\xca\x94\xc6\xed\x92\x36\xe4\xa7\x73\xf6\xdc\xaf\xa5\x13\x2b\x2f\x91";
    let signature = b"\xd4\x34\xe2\x62\xa4\x9e\xab\x77\x81\xe3\x53\xa3\x56\x5e\x48\x25\x50\xdd\x0f\xd5\xde\xfa\x01\x3c\x7f\x29\x74\x5e\xff\x35\x69\xf1\x9b\x0c\x0a\x93\xf2\x67\xfb\x60\x52\xfd\x80\x77\xbe\x76\x9c\x2b\x98\x95\x31\x95\xd7\xbc\x10\xde\x84\x42\x18\x30\x5c\x6b\xa1\x7a";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_230() {
    let public = b"\x04\
\x4f\x33\x7c\xcf\xd6\x77\x26\xa8\x05\xe4\xf1\x60\x0a\xe2\x84\x9d\xf3\x80\x7e\xca\x11\x73\x80\x23\x9f\xbd\x81\x69\x00\x00\x00\x00\
\xed\x9d\xea\x12\x4c\xc8\xc3\x96\x41\x64\x11\xe9\x88\xc3\x0f\x42\x7e\xb5\x04\xaf\x43\xa3\x14\x6c\xd5\xdf\x7e\xa6\x06\x66\xd6\x85";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x4d\x65\x73\x73\x61\x67\x65";
    let hash = b"\x2f\x77\x66\x8a\x9d\xfb\xf8\xd5\x84\x8b\x9e\xeb\x4a\x71\x45\xca\x94\xc6\xed\x92\x36\xe4\xa7\x73\xf6\xdc\xaf\xa5\x13\x2b\x2f\x91";
    let signature = b"\x0f\xe7\x74\x35\x5c\x04\xd0\x60\xf7\x6d\x79\xfd\x7a\x77\x2e\x42\x14\x63\x48\x92\x21\xbf\x0a\x33\xad\xd0\xbe\x9b\x19\x79\x11\x0b\x50\x0d\xcb\xa1\xc6\x9a\x8f\xbd\x43\xfa\x4f\x57\xf7\x43\xce\x12\x4c\xa8\xb9\x1a\x1f\x32\x5f\x3f\xac\x61\x81\x17\x5d\xf5\x57\x37";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_231() {
    let public = b"\x04\
\x4f\x33\x7c\xcf\xd6\x77\x26\xa8\x05\xe4\xf1\x60\x0a\xe2\x84\x9d\xf3\x80\x7e\xca\x11\x73\x80\x23\x9f\xbd\x81\x69\x00\x00\x00\x00\
\xed\x9d\xea\x12\x4c\xc8\xc3\x96\x41\x64\x11\xe9\x88\xc3\x0f\x42\x7e\xb5\x04\xaf\x43\xa3\x14\x6c\xd5\xdf\x7e\xa6\x06\x66\xd6\x85";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x4d\x65\x73\x73\x61\x67\x65";
    let hash = b"\x2f\x77\x66\x8a\x9d\xfb\xf8\xd5\x84\x8b\x9e\xeb\x4a\x71\x45\xca\x94\xc6\xed\x92\x36\xe4\xa7\x73\xf6\xdc\xaf\xa5\x13\x2b\x2f\x91";
    let signature = b"\xbb\x40\xbf\x21\x7b\xed\x3f\xb3\x95\x0c\x7d\x39\xf0\x3d\x36\xdc\x8e\x3b\x2c\xd7\x96\x93\xf1\x25\xbf\xd0\x65\x95\xee\x11\x35\xe3\x54\x1b\xf3\x53\x23\x51\xeb\xb0\x32\x71\x0b\xdb\x6a\x1b\xf1\xbf\xc8\x9a\x1e\x29\x1a\xc6\x92\xb3\xfa\x47\x80\x74\x5b\xb5\x56\x77";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_232() {
    let public = b"\x04\
\x3c\xf0\x3d\x61\x4d\x89\x39\xcf\xd4\x99\xa0\x78\x73\xfa\xc2\x81\x61\x8f\x06\xb8\xff\x87\xe8\x01\x5c\x3f\x49\x72\x65\x00\x49\x35\
\x84\xfa\x17\x4d\x79\x1c\x72\xbf\x2c\xe3\x88\x0a\x89\x60\xdd\x2a\x7c\x7a\x13\x38\xa8\x2f\x85\xa9\xe5\x9c\xdb\xde\x80\x00\x00\x00";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x4d\x65\x73\x73\x61\x67\x65";
    let hash = b"\x2f\x77\x66\x8a\x9d\xfb\xf8\xd5\x84\x8b\x9e\xeb\x4a\x71\x45\xca\x94\xc6\xed\x92\x36\xe4\xa7\x73\xf6\xdc\xaf\xa5\x13\x2b\x2f\x91";
    let signature = b"\x66\x4e\xb7\xee\x6d\xb8\x4a\x34\xdf\x3c\x86\xea\x31\x38\x9a\x54\x05\xba\xdd\x5c\xa9\x92\x31\xff\x55\x6d\x3e\x75\xa2\x33\xe7\x3a\x59\xf3\xc7\x52\xe5\x2e\xca\x46\x13\x76\x42\x49\x0a\x51\x56\x0c\xe0\xba\xdc\x67\x87\x54\xb8\xf7\x2e\x51\xa2\x90\x14\x26\xa1\xbd";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_233() {
    let public = b"\x04\
\x3c\xf0\x3d\x61\x4d\x89\x39\xcf\xd4\x99\xa0\x78\x73\xfa\xc2\x81\x61\x8f\x06\xb8\xff\x87\xe8\x01\x5c\x3f\x49\x72\x65\x00\x49\x35\
\x84\xfa\x17\x4d\x79\x1c\x72\xbf\x2c\xe3\x88\x0a\x89\x60\xdd\x2a\x7c\x7a\x13\x38\xa8\x2f\x85\xa9\xe5\x9c\xdb\xde\x80\x00\x00\x00";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x4d\x65\x73\x73\x61\x67\x65";
    let hash = b"\x2f\x77\x66\x8a\x9d\xfb\xf8\xd5\x84\x8b\x9e\xeb\x4a\x71\x45\xca\x94\xc6\xed\x92\x36\xe4\xa7\x73\xf6\xdc\xaf\xa5\x13\x2b\x2f\x91";
    let signature = b"\x4c\xd0\x42\x9b\xba\xbd\x28\x27\x00\x9d\x6f\xcd\x84\x3d\x4c\xe3\x9c\x3e\x42\xe2\xd1\x63\x1f\xd0\x01\x98\x5a\x79\xd1\xfd\x8b\x43\x96\x38\xbf\x12\xdd\x68\x2f\x60\xbe\x7e\xf1\xd0\xe0\xd9\x8f\x08\xb7\xbc\xa7\x7a\x1a\x2b\x86\x9a\xe4\x66\x18\x9d\x2a\xcd\xab\xe3";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_234() {
    let public = b"\x04\
\x3c\xf0\x3d\x61\x4d\x89\x39\xcf\xd4\x99\xa0\x78\x73\xfa\xc2\x81\x61\x8f\x06\xb8\xff\x87\xe8\x01\x5c\x3f\x49\x72\x65\x00\x49\x35\
\x84\xfa\x17\x4d\x79\x1c\x72\xbf\x2c\xe3\x88\x0a\x89\x60\xdd\x2a\x7c\x7a\x13\x38\xa8\x2f\x85\xa9\xe5\x9c\xdb\xde\x80\x00\x00\x00";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x4d\x65\x73\x73\x61\x67\x65";
    let hash = b"\x2f\x77\x66\x8a\x9d\xfb\xf8\xd5\x84\x8b\x9e\xeb\x4a\x71\x45\xca\x94\xc6\xed\x92\x36\xe4\xa7\x73\xf6\xdc\xaf\xa5\x13\x2b\x2f\x91";
    let signature = b"\xe5\x6c\x6e\xa2\xd1\xb0\x17\x09\x1c\x44\xd8\xb6\xcb\x62\xb9\xf4\x60\xe3\xce\x9a\xed\x5e\x5f\xd4\x1e\x8a\xdd\xed\x97\xc5\x6c\x04\xa3\x08\xec\x31\xf2\x81\xe9\x55\xbe\x20\xb4\x57\xe4\x63\x44\x0b\x4f\xcf\x2b\x80\x25\x80\x78\x20\x7f\xc1\x37\x81\x80\xf8\x9b\x55";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_235() {
    let public = b"\x04\
\x3c\xf0\x3d\x61\x4d\x89\x39\xcf\xd4\x99\xa0\x78\x73\xfa\xc2\x81\x61\x8f\x06\xb8\xff\x87\xe8\x01\x5c\x3f\x49\x72\x65\x00\x49\x35\
\x7b\x05\xe8\xb1\x86\xe3\x8d\x41\xd3\x1c\x77\xf5\x76\x9f\x22\xd5\x83\x85\xec\xc8\x57\xd0\x7a\x56\x1a\x63\x24\x21\x7f\xff\xff\xff";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x4d\x65\x73\x73\x61\x67\x65";
    let hash = b"\x2f\x77\x66\x8a\x9d\xfb\xf8\xd5\x84\x8b\x9e\xeb\x4a\x71\x45\xca\x94\xc6\xed\x92\x36\xe4\xa7\x73\xf6\xdc\xaf\xa5\x13\x2b\x2f\x91";
    let signature = b"\x11\x58\xa0\x8d\x29\x15\x00\xb4\xca\xbe\xd3\x34\x6d\x89\x1e\xee\x57\xc1\x76\x35\x6a\x26\x24\xfb\x01\x1f\x8f\xbb\xf3\x46\x68\x30\x22\x8a\x8c\x48\x6a\x73\x60\x06\xe0\x82\x32\x5b\x85\x29\x0c\x5b\xc9\x1f\x37\x8b\x75\xd4\x87\xdd\xa4\x67\x98\xc1\x8f\x28\x55\x19";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_236() {
    let public = b"\x04\
\x3c\xf0\x3d\x61\x4d\x89\x39\xcf\xd4\x99\xa0\x78\x73\xfa\xc2\x81\x61\x8f\x06\xb8\xff\x87\xe8\x01\x5c\x3f\x49\x72\x65\x00\x49\x35\
\x7b\x05\xe8\xb1\x86\xe3\x8d\x41\xd3\x1c\x77\xf5\x76\x9f\x22\xd5\x83\x85\xec\xc8\x57\xd0\x7a\x56\x1a\x63\x24\x21\x7f\xff\xff\xff";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x4d\x65\x73\x73\x61\x67\x65";
    let hash = b"\x2f\x77\x66\x8a\x9d\xfb\xf8\xd5\x84\x8b\x9e\xeb\x4a\x71\x45\xca\x94\xc6\xed\x92\x36\xe4\xa7\x73\xf6\xdc\xaf\xa5\x13\x2b\x2f\x91";
    let signature = b"\xb1\xdb\x92\x89\x64\x9f\x59\x41\x0e\xa3\x6b\x0c\x0f\xc8\xd6\xaa\x26\x87\xb2\x91\x76\x93\x9d\xd2\x3e\x0d\xde\x56\xd3\x09\xfa\x9d\x3e\x15\x35\xe4\x28\x05\x59\x01\x5b\x0d\xbd\x98\x73\x66\xdc\xf4\x3a\x6d\x1a\xf5\xc2\x3c\x7d\x58\x4e\x1c\x3f\x48\xa1\x25\x13\x36";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_237() {
    let public = b"\x04\
\x3c\xf0\x3d\x61\x4d\x89\x39\xcf\xd4\x99\xa0\x78\x73\xfa\xc2\x81\x61\x8f\x06\xb8\xff\x87\xe8\x01\x5c\x3f\x49\x72\x65\x00\x49\x35\
\x7b\x05\xe8\xb1\x86\xe3\x8d\x41\xd3\x1c\x77\xf5\x76\x9f\x22\xd5\x83\x85\xec\xc8\x57\xd0\x7a\x56\x1a\x63\x24\x21\x7f\xff\xff\xff";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x4d\x65\x73\x73\x61\x67\x65";
    let hash = b"\x2f\x77\x66\x8a\x9d\xfb\xf8\xd5\x84\x8b\x9e\xeb\x4a\x71\x45\xca\x94\xc6\xed\x92\x36\xe4\xa7\x73\xf6\xdc\xaf\xa5\x13\x2b\x2f\x91";
    let signature = b"\xb7\xb1\x6e\x76\x22\x86\xcb\x96\x44\x6a\xa8\xd4\xe6\xe7\x57\x8b\x0a\x34\x1a\x79\xf2\xdd\x1a\x22\x0a\xc6\xf0\xca\x4e\x24\xed\x86\xdd\xc6\x0a\x70\x0a\x13\x9b\x04\x66\x1c\x54\x7d\x07\xbb\xb0\x72\x17\x80\x14\x6d\xf7\x99\xcc\xf5\x5e\x55\x23\x4e\xcb\x8f\x12\xbc";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_238() {
    let public = b"\x04\
\x28\x29\xc3\x1f\xaa\x2e\x40\x0e\x34\x4e\xd9\x4b\xca\x3f\xcd\x05\x45\x95\x6e\xbc\xfe\x8a\xd0\xf6\xdf\xa5\xff\x8e\xff\xff\xff\xff\
\xa0\x1a\xaf\xaf\x00\x0e\x52\x58\x58\x55\xaf\xa7\x67\x6a\xde\x28\x41\x13\x09\x90\x52\xdf\x57\xe7\xeb\x3b\xd3\x7e\xbe\xb9\x22\x2e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x4d\x65\x73\x73\x61\x67\x65";
    let hash = b"\x2f\x77\x66\x8a\x9d\xfb\xf8\xd5\x84\x8b\x9e\xeb\x4a\x71\x45\xca\x94\xc6\xed\x92\x36\xe4\xa7\x73\xf6\xdc\xaf\xa5\x13\x2b\x2f\x91";
    let signature = b"\xd8\x2a\x7c\x27\x17\x26\x11\x87\xc8\xe0\x0d\x8d\xf9\x63\xff\x35\xd7\x96\xed\xad\x36\xbc\x6e\x6b\xd1\xc9\x1c\x67\x0d\x91\x05\xb4\x3d\xca\xbd\xda\xf8\xfc\xaa\x61\xf4\x60\x3e\x7c\xba\xc0\xf3\xc0\x35\x1e\xcd\x59\x88\xef\xb2\x3f\x68\x0d\x07\xde\xbd\x13\x99\x29";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_239() {
    let public = b"\x04\
\x28\x29\xc3\x1f\xaa\x2e\x40\x0e\x34\x4e\xd9\x4b\xca\x3f\xcd\x05\x45\x95\x6e\xbc\xfe\x8a\xd0\xf6\xdf\xa5\xff\x8e\xff\xff\xff\xff\
\xa0\x1a\xaf\xaf\x00\x0e\x52\x58\x58\x55\xaf\xa7\x67\x6a\xde\x28\x41\x13\x09\x90\x52\xdf\x57\xe7\xeb\x3b\xd3\x7e\xbe\xb9\x22\x2e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x4d\x65\x73\x73\x61\x67\x65";
    let hash = b"\x2f\x77\x66\x8a\x9d\xfb\xf8\xd5\x84\x8b\x9e\xeb\x4a\x71\x45\xca\x94\xc6\xed\x92\x36\xe4\xa7\x73\xf6\xdc\xaf\xa5\x13\x2b\x2f\x91";
    let signature = b"\x5e\xb9\xc8\x84\x5d\xe6\x8e\xb1\x3d\x5b\xef\xe7\x19\xf4\x62\xd7\x77\x87\x80\x2b\xaf\xf3\x0c\xe9\x6a\x5c\xba\x06\x32\x54\xaf\x78\x2c\x02\x6a\xe9\xbe\x2e\x2a\x5e\x7c\xa0\xff\x9b\xbd\x92\xfb\x6e\x44\x97\x21\x86\x22\x8e\xe9\xa6\x2b\x87\xdd\xbe\x2e\xf6\x6f\xb5";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_240() {
    let public = b"\x04\
\x28\x29\xc3\x1f\xaa\x2e\x40\x0e\x34\x4e\xd9\x4b\xca\x3f\xcd\x05\x45\x95\x6e\xbc\xfe\x8a\xd0\xf6\xdf\xa5\xff\x8e\xff\xff\xff\xff\
\xa0\x1a\xaf\xaf\x00\x0e\x52\x58\x58\x55\xaf\xa7\x67\x6a\xde\x28\x41\x13\x09\x90\x52\xdf\x57\xe7\xeb\x3b\xd3\x7e\xbe\xb9\x22\x2e";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x4d\x65\x73\x73\x61\x67\x65";
    let hash = b"\x2f\x77\x66\x8a\x9d\xfb\xf8\xd5\x84\x8b\x9e\xeb\x4a\x71\x45\xca\x94\xc6\xed\x92\x36\xe4\xa7\x73\xf6\xdc\xaf\xa5\x13\x2b\x2f\x91";
    let signature = b"\x96\x84\x3d\xd0\x3c\x22\xab\xd2\xf3\xb7\x82\xb1\x70\x23\x9f\x90\xf2\x77\x92\x1b\xec\xc1\x17\xd0\x40\x4a\x8e\x4e\x36\x23\x0c\x28\xf2\xbe\x37\x8f\x52\x6f\x74\xa5\x43\xf6\x71\x65\x97\x6d\xe9\xed\x9a\x31\x21\x4e\xb4\xd7\xe6\xdb\x19\xe1\xed\xe1\x23\xdd\x99\x1d";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_241() {
    let public = b"\x04\
\xff\xff\xff\xf9\x48\x08\x1e\x6a\x04\x58\xdd\x8f\x9e\x73\x8f\x26\x65\xff\x90\x59\xad\x6a\xac\x07\x08\x31\x8c\x4c\xa9\xa7\xa4\xf5\
\x5a\x8a\xbc\xba\x2d\xda\x84\x74\x31\x1e\xe5\x41\x49\xb9\x73\xca\xe0\xc0\xfb\x89\x55\x7a\xd0\xbf\x78\xe6\x52\x9a\x16\x63\xbd\x73";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x4d\x65\x73\x73\x61\x67\x65";
    let hash = b"\x2f\x77\x66\x8a\x9d\xfb\xf8\xd5\x84\x8b\x9e\xeb\x4a\x71\x45\xca\x94\xc6\xed\x92\x36\xe4\xa7\x73\xf6\xdc\xaf\xa5\x13\x2b\x2f\x91";
    let signature = b"\x76\x64\x56\xdc\xe1\x85\x7c\x90\x6f\x99\x96\xaf\x72\x93\x39\x46\x4d\x27\xe9\xd9\x8e\xdc\x2d\x0e\x3b\x76\x02\x97\x06\x74\x21\xf6\x40\x23\x85\xec\xad\xae\x0d\x80\x81\xdc\xca\xf5\xd1\x90\x37\xec\x4e\x55\x37\x6e\xce\xd6\x99\xe9\x36\x46\xbf\xbb\xf1\x9d\x0b\x41";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_242() {
    let public = b"\x04\
\xff\xff\xff\xf9\x48\x08\x1e\x6a\x04\x58\xdd\x8f\x9e\x73\x8f\x26\x65\xff\x90\x59\xad\x6a\xac\x07\x08\x31\x8c\x4c\xa9\xa7\xa4\xf5\
\x5a\x8a\xbc\xba\x2d\xda\x84\x74\x31\x1e\xe5\x41\x49\xb9\x73\xca\xe0\xc0\xfb\x89\x55\x7a\xd0\xbf\x78\xe6\x52\x9a\x16\x63\xbd\x73";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x4d\x65\x73\x73\x61\x67\x65";
    let hash = b"\x2f\x77\x66\x8a\x9d\xfb\xf8\xd5\x84\x8b\x9e\xeb\x4a\x71\x45\xca\x94\xc6\xed\x92\x36\xe4\xa7\x73\xf6\xdc\xaf\xa5\x13\x2b\x2f\x91";
    let signature = b"\xc6\x05\xc4\xb2\xed\xea\xb2\x04\x19\xe6\x51\x8a\x11\xb2\xdb\xc2\xb9\x7e\xd8\xb0\x7c\xce\xd0\xb1\x9c\x34\xf7\x77\xde\x7b\x9f\xd9\xed\xf0\xf6\x12\xc5\xf4\x6e\x03\xc7\x19\x64\x7b\xc8\xaf\x1b\x29\xb2\xcd\xe2\xed\xa7\x00\xfb\x1c\xff\x5e\x15\x9d\x47\x32\x6d\xba";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_243() {
    let public = b"\x04\
\xff\xff\xff\xf9\x48\x08\x1e\x6a\x04\x58\xdd\x8f\x9e\x73\x8f\x26\x65\xff\x90\x59\xad\x6a\xac\x07\x08\x31\x8c\x4c\xa9\xa7\xa4\xf5\
\x5a\x8a\xbc\xba\x2d\xda\x84\x74\x31\x1e\xe5\x41\x49\xb9\x73\xca\xe0\xc0\xfb\x89\x55\x7a\xd0\xbf\x78\xe6\x52\x9a\x16\x63\xbd\x73";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x4d\x65\x73\x73\x61\x67\x65";
    let hash = b"\x2f\x77\x66\x8a\x9d\xfb\xf8\xd5\x84\x8b\x9e\xeb\x4a\x71\x45\xca\x94\xc6\xed\x92\x36\xe4\xa7\x73\xf6\xdc\xaf\xa5\x13\x2b\x2f\x91";
    let signature = b"\xd4\x8b\x68\xe6\xca\xbf\xe0\x3c\xf6\x14\x1c\x9a\xc5\x41\x41\xf2\x10\xe6\x44\x85\xd9\x92\x9a\xd7\xb7\x32\xbf\xe3\xb7\xeb\x8a\x84\xfe\xed\xae\x50\xc6\x1b\xd0\x0e\x19\xdc\x26\xf9\xb7\xe2\x26\x5e\x45\x08\xc3\x89\x10\x9a\xd2\xf2\x08\xf0\x77\x23\x15\xb6\xc9\x41";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_244() {
    let public = b"\x04\
\x00\x00\x00\x03\xfa\x15\xf9\x63\x94\x9d\x5f\x03\xa6\xf5\xc7\xf8\x6f\x9e\x00\x15\xee\xb2\x3a\xeb\xbf\xf1\x17\x39\x37\xba\x74\x8e\
\x10\x99\x87\x20\x70\xe8\xe8\x7c\x55\x5f\xa1\x36\x59\xcc\xa5\xd7\xfa\xdc\xfc\xb0\x02\x3e\xa8\x89\x54\x8c\xa4\x8a\xf2\xba\x7e\x71";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x4d\x65\x73\x73\x61\x67\x65";
    let hash = b"\x2f\x77\x66\x8a\x9d\xfb\xf8\xd5\x84\x8b\x9e\xeb\x4a\x71\x45\xca\x94\xc6\xed\x92\x36\xe4\xa7\x73\xf6\xdc\xaf\xa5\x13\x2b\x2f\x91";
    let signature = b"\xb7\xc8\x14\x57\xd4\xae\xb6\xaa\x65\x95\x70\x98\x56\x9f\x04\x79\x71\x0a\xd7\xf6\x59\x5d\x58\x74\xc3\x5a\x93\xd1\x2a\x5d\xd4\xc7\xb7\x96\x1a\x0b\x65\x28\x78\xc2\xd5\x68\x06\x9a\x43\x2c\xa1\x8a\x1a\x91\x99\xf2\xca\x57\x4d\xad\x4b\x9e\x3a\x05\xc0\xa1\xcd\xb3";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_245() {
    let public = b"\x04\
\x00\x00\x00\x03\xfa\x15\xf9\x63\x94\x9d\x5f\x03\xa6\xf5\xc7\xf8\x6f\x9e\x00\x15\xee\xb2\x3a\xeb\xbf\xf1\x17\x39\x37\xba\x74\x8e\
\x10\x99\x87\x20\x70\xe8\xe8\x7c\x55\x5f\xa1\x36\x59\xcc\xa5\xd7\xfa\xdc\xfc\xb0\x02\x3e\xa8\x89\x54\x8c\xa4\x8a\xf2\xba\x7e\x71";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x4d\x65\x73\x73\x61\x67\x65";
    let hash = b"\x2f\x77\x66\x8a\x9d\xfb\xf8\xd5\x84\x8b\x9e\xeb\x4a\x71\x45\xca\x94\xc6\xed\x92\x36\xe4\xa7\x73\xf6\xdc\xaf\xa5\x13\x2b\x2f\x91";
    let signature = b"\x6b\x01\x33\x2d\xdb\x6e\xdf\xa9\xa3\x0a\x13\x21\xd5\x85\x8e\x1e\xe3\xcf\x97\xe2\x63\xe6\x69\xf8\xde\x5e\x96\x52\xe7\x6f\xf3\xf7\x59\x39\x54\x5f\xce\xd4\x57\x30\x9a\x6a\x04\xac\xe2\xbd\x0f\x70\x13\x9c\x8f\x7d\x86\xb0\x2c\xb1\xcc\x58\xf9\xe6\x9e\x96\xcd\x5a";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_246() {
    let public = b"\x04\
\x00\x00\x00\x03\xfa\x15\xf9\x63\x94\x9d\x5f\x03\xa6\xf5\xc7\xf8\x6f\x9e\x00\x15\xee\xb2\x3a\xeb\xbf\xf1\x17\x39\x37\xba\x74\x8e\
\x10\x99\x87\x20\x70\xe8\xe8\x7c\x55\x5f\xa1\x36\x59\xcc\xa5\xd7\xfa\xdc\xfc\xb0\x02\x3e\xa8\x89\x54\x8c\xa4\x8a\xf2\xba\x7e\x71";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x4d\x65\x73\x73\x61\x67\x65";
    let hash = b"\x2f\x77\x66\x8a\x9d\xfb\xf8\xd5\x84\x8b\x9e\xeb\x4a\x71\x45\xca\x94\xc6\xed\x92\x36\xe4\xa7\x73\xf6\xdc\xaf\xa5\x13\x2b\x2f\x91";
    let signature = b"\xef\xdb\x88\x47\x20\xea\xea\xdc\x34\x9f\x9f\xc3\x56\xb6\xc0\x34\x41\x01\xcd\x2f\xd8\x43\x6b\x7d\x0e\x6a\x4f\xb9\x3f\x10\x63\x61\xf2\x4b\xee\x6a\xd5\xdc\x05\xf7\x61\x39\x75\x47\x3a\xad\xf3\xaa\xcb\xa9\xe7\x7d\xe7\xd6\x9b\x6c\xe4\x8c\xb6\x0d\x81\x13\x38\x5d";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_247() {
    let public = b"\x04\
\xbc\xbb\x29\x14\xc7\x9f\x04\x5e\xaa\x6e\xcb\xbc\x61\x28\x16\xb3\xbe\x5d\x2d\x67\x96\x70\x7d\x81\x25\xe9\xf8\x51\xc1\x8a\xf0\x15\
\x00\x00\x00\x00\x13\x52\xbb\x4a\x0f\xa2\xea\x4c\xce\xb9\xab\x63\xdd\x68\x4a\xde\x5a\x11\x27\xbc\xf3\x00\xa6\x98\xa7\x19\x3b\xc2";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x4d\x65\x73\x73\x61\x67\x65";
    let hash = b"\x2f\x77\x66\x8a\x9d\xfb\xf8\xd5\x84\x8b\x9e\xeb\x4a\x71\x45\xca\x94\xc6\xed\x92\x36\xe4\xa7\x73\xf6\xdc\xaf\xa5\x13\x2b\x2f\x91";
    let signature = b"\x31\x23\x04\x28\x40\x55\x60\xdc\xb8\x8f\xb5\xa6\x46\x83\x6a\xea\x9b\x23\xa2\x3d\xd9\x73\xdc\xbe\x80\x14\xc8\x7b\x8b\x20\xeb\x07\x0f\x93\x44\xd6\xe8\x12\xce\x16\x66\x46\x74\x76\x94\xa4\x1b\x0a\xaf\x97\x37\x4e\x19\xf3\xc5\xfb\x8b\xd7\xae\x3d\x9b\xd0\xbe\xff";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_248() {
    let public = b"\x04\
\xbc\xbb\x29\x14\xc7\x9f\x04\x5e\xaa\x6e\xcb\xbc\x61\x28\x16\xb3\xbe\x5d\x2d\x67\x96\x70\x7d\x81\x25\xe9\xf8\x51\xc1\x8a\xf0\x15\
\x00\x00\x00\x00\x13\x52\xbb\x4a\x0f\xa2\xea\x4c\xce\xb9\xab\x63\xdd\x68\x4a\xde\x5a\x11\x27\xbc\xf3\x00\xa6\x98\xa7\x19\x3b\xc2";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x4d\x65\x73\x73\x61\x67\x65";
    let hash = b"\x2f\x77\x66\x8a\x9d\xfb\xf8\xd5\x84\x8b\x9e\xeb\x4a\x71\x45\xca\x94\xc6\xed\x92\x36\xe4\xa7\x73\xf6\xdc\xaf\xa5\x13\x2b\x2f\x91";
    let signature = b"\xca\xa7\x97\xda\x65\xb3\x20\xab\x0d\x5c\x47\x0c\xda\x0b\x36\xb2\x94\x35\x9c\x7d\xb9\x84\x1d\x67\x91\x74\xdb\x34\xc4\x85\x57\x43\xcf\x54\x3a\x62\xf2\x3e\x21\x27\x45\x39\x1a\xaf\x75\x05\xf3\x45\x12\x3d\x26\x85\xee\x3b\x94\x1d\x3d\xe6\xd9\xb3\x62\x42\xe5\xa0";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_249() {
    let public = b"\x04\
\xbc\xbb\x29\x14\xc7\x9f\x04\x5e\xaa\x6e\xcb\xbc\x61\x28\x16\xb3\xbe\x5d\x2d\x67\x96\x70\x7d\x81\x25\xe9\xf8\x51\xc1\x8a\xf0\x15\
\x00\x00\x00\x00\x13\x52\xbb\x4a\x0f\xa2\xea\x4c\xce\xb9\xab\x63\xdd\x68\x4a\xde\x5a\x11\x27\xbc\xf3\x00\xa6\x98\xa7\x19\x3b\xc2";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x4d\x65\x73\x73\x61\x67\x65";
    let hash = b"\x2f\x77\x66\x8a\x9d\xfb\xf8\xd5\x84\x8b\x9e\xeb\x4a\x71\x45\xca\x94\xc6\xed\x92\x36\xe4\xa7\x73\xf6\xdc\xaf\xa5\x13\x2b\x2f\x91";
    let signature = b"\x7e\x5f\x0a\xb5\xd9\x00\xd3\xd3\xd7\x86\x76\x57\xe5\xd6\xd3\x65\x19\xbc\x54\x08\x45\x36\xe7\xd2\x1c\x33\x6e\xd8\x00\x18\x59\x45\x94\x50\xc0\x7f\x20\x1f\xae\xc9\x4b\x82\xdf\xb3\x22\xe5\xac\x67\x66\x88\x29\x4a\xad\x35\xaa\x72\xe7\x27\xff\x0b\x19\xb6\x46\xaa";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_250() {
    let public = b"\x04\
\xbc\xbb\x29\x14\xc7\x9f\x04\x5e\xaa\x6e\xcb\xbc\x61\x28\x16\xb3\xbe\x5d\x2d\x67\x96\x70\x7d\x81\x25\xe9\xf8\x51\xc1\x8a\xf0\x15\
\xff\xff\xff\xfe\xec\xad\x44\xb6\xf0\x5d\x15\xb3\x31\x46\x54\x9c\x22\x97\xb5\x22\xa5\xee\xd8\x43\x0c\xff\x59\x67\x58\xe6\xc4\x3d";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x4d\x65\x73\x73\x61\x67\x65";
    let hash = b"\x2f\x77\x66\x8a\x9d\xfb\xf8\xd5\x84\x8b\x9e\xeb\x4a\x71\x45\xca\x94\xc6\xed\x92\x36\xe4\xa7\x73\xf6\xdc\xaf\xa5\x13\x2b\x2f\x91";
    let signature = b"\xd7\xd7\x0c\x58\x1a\xe9\xe3\xf6\x6d\xc6\xa4\x80\xbf\x03\x7a\xe2\x3f\x8a\x1e\x4a\x21\x36\xfe\x4b\x03\xaa\x69\xf0\xca\x25\xb3\x56\x89\xc4\x60\xf8\xa5\xa5\xc2\xbb\xba\x96\x2c\x8a\x3e\xe8\x33\xa4\x13\xe8\x56\x58\xe6\x2a\x59\xe2\xaf\x41\xd9\x12\x7c\xc4\x72\x24";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_251() {
    let public = b"\x04\
\xbc\xbb\x29\x14\xc7\x9f\x04\x5e\xaa\x6e\xcb\xbc\x61\x28\x16\xb3\xbe\x5d\x2d\x67\x96\x70\x7d\x81\x25\xe9\xf8\x51\xc1\x8a\xf0\x15\
\xff\xff\xff\xfe\xec\xad\x44\xb6\xf0\x5d\x15\xb3\x31\x46\x54\x9c\x22\x97\xb5\x22\xa5\xee\xd8\x43\x0c\xff\x59\x67\x58\xe6\xc4\x3d";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x4d\x65\x73\x73\x61\x67\x65";
    let hash = b"\x2f\x77\x66\x8a\x9d\xfb\xf8\xd5\x84\x8b\x9e\xeb\x4a\x71\x45\xca\x94\xc6\xed\x92\x36\xe4\xa7\x73\xf6\xdc\xaf\xa5\x13\x2b\x2f\x91";
    let signature = b"\x34\x1c\x1b\x9f\xf3\xc8\x3d\xd5\xe0\xdf\xa0\xbf\x68\xbc\xdf\x4b\xb7\xaa\x20\xc6\x25\x97\x5e\x5e\xee\xe3\x4b\xb3\x96\x26\x6b\x34\x72\xb6\x9f\x06\x1b\x75\x0f\xd5\x12\x1b\x22\xb1\x13\x66\xfa\xd5\x49\xc6\x34\xe7\x77\x65\xa0\x17\x90\x2a\x67\x09\x9e\x0a\x44\x69";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
#[test]
fn test_verify_ecdsa_p256_sha256_252() {
    let public = b"\x04\
\xbc\xbb\x29\x14\xc7\x9f\x04\x5e\xaa\x6e\xcb\xbc\x61\x28\x16\xb3\xbe\x5d\x2d\x67\x96\x70\x7d\x81\x25\xe9\xf8\x51\xc1\x8a\xf0\x15\
\xff\xff\xff\xfe\xec\xad\x44\xb6\xf0\x5d\x15\xb3\x31\x46\x54\x9c\x22\x97\xb5\x22\xa5\xee\xd8\x43\x0c\xff\x59\x67\x58\xe6\xc4\x3d";
    let public_key = VerifyingKey::<P256>::from_x962_uncompressed(public).unwrap();
    let _message = b"\x4d\x65\x73\x73\x61\x67\x65";
    let hash = b"\x2f\x77\x66\x8a\x9d\xfb\xf8\xd5\x84\x8b\x9e\xeb\x4a\x71\x45\xca\x94\xc6\xed\x92\x36\xe4\xa7\x73\xf6\xdc\xaf\xa5\x13\x2b\x2f\x91";
    let signature = b"\x70\xbe\xbe\x68\x4c\xdc\xb5\xca\x72\xa4\x2f\x0d\x87\x38\x79\x35\x9b\xd1\x78\x1a\x59\x18\x09\x94\x76\x28\xd3\x13\xa3\x81\x4f\x67\xae\xc0\x3a\xca\x8f\x55\x87\xa4\xd5\x35\xfa\x31\x02\x7b\xbe\x9c\xc0\xe4\x64\xb1\xc3\x57\x7f\x4c\x2d\xcd\xe6\xb2\x09\x47\x98\xa9";
    assert_eq!(public_key.verify(&hash[..], &signature[..]), Ok(()));
}
