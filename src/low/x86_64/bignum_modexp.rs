#![allow(non_upper_case_globals, unused_macros, unused_imports)]
use crate::low::macros::{Label, Q};

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0 OR ISC OR MIT-0

// ----------------------------------------------------------------------------
// Modular exponentiation for arbitrary odd modulus
// Inputs a[k], p[k], m[k]; output z[k], temporary buffer t[>=3*k]
//
//   extern void bignum_modexp
//    (uint64_t k,uint64_t *z, uint64_t *a,uint64_t *p,uint64_t *m,uint64_t *t);
//
// Does z := (a^p) mod m where all numbers are k-digit and m is odd
//
// Standard x86-64 ABI: RDI = k, RSI = z, RDX = a, RCX = p, R8 = m, R9 = t
// Microsoft x64 ABI:   RCX = k, RDX = z, R8 = a, R9 = p, [RSP+40] = m, [RSP+48] = t
// ----------------------------------------------------------------------------

// Local variables, all kept on the stack

macro_rules! k {
    () => {
        Q!("[rsp]")
    };
}
macro_rules! res {
    () => {
        Q!("[rsp + 8]")
    };
}
macro_rules! a {
    () => {
        Q!("[rsp + 16]")
    };
}
macro_rules! p {
    () => {
        Q!("[rsp + 24]")
    };
}
macro_rules! m {
    () => {
        Q!("[rsp + 32]")
    };
}
macro_rules! x {
    () => {
        Q!("[rsp + 40]")
    };
}
macro_rules! i {
    () => {
        Q!("[rsp + 48]")
    };
}
macro_rules! y {
    () => {
        Q!("[rsp + 56]")
    };
}
macro_rules! z {
    () => {
        Q!("[rsp + 64]")
    };
}

macro_rules! VARSIZE {
    () => {
        Q!("72")
    };
}

pub fn bignum_modexp(z: &mut [u64], a: &[u64], p: &[u64], m: &[u64], t: &mut [u64]) {
    debug_assert!(z.len() == a.len());
    debug_assert!(z.len() == p.len());
    debug_assert!(z.len() == m.len());
    debug_assert!(z.len() * 3 <= t.len());
    unsafe {
        core::arch::asm!(


        // The Windows version literally calls the standard ABI version.
        // This simplifies the proofs since subroutine offsets are fixed.



        // Real start of the standard ABI code.
        // Bump down the stack to make room for local variables

        Q!("    sub             " "rsp, " VARSIZE!()),

        // If size is zero (which falsifies the oddness condition) do nothing

        Q!("    test            " "rdi, rdi"),
        Q!("    jz              " Label!("end", 2, After)),

        // Set up local variables based on input parameters

        Q!("    mov             " k!() ", rdi"),
        Q!("    mov             " res!() ", rsi"),
        Q!("    mov             " a!() ", rdx"),
        Q!("    mov             " p!() ", rcx"),
        Q!("    mov             " m!() ", r8"),
        Q!("    mov             " x!() ", r9"),
        Q!("    lea             " "rax, [r9 + 8 * rdi]"),
        Q!("    mov             " y!() ", rax"),
        Q!("    lea             " "rax, [rax + 8 * rdi]"),
        Q!("    mov             " z!() ", rax"),

        // Let x == 2^64k * a (mod m) and initialize z == 2^64k * 1 (mod m)

        Q!("    mov             " "rdi, " k!()),
        Q!("    mov             " "rsi, " z!()),
        Q!("    mov             " "rdx, " m!()),
        Q!("    mov             " "rcx, " y!()),
        Q!("    call            " Label!("local_amontifier", 3, After)),

        Q!("    mov             " "rdi, " k!()),
        Q!("    mov             " "rsi, " x!()),
        Q!("    mov             " "rdx, " z!()),
        Q!("    mov             " "rcx, " a!()),
        Q!("    mov             " "r8, " m!()),
        Q!("    call            " Label!("local_amontmul", 4, After)),

        Q!("    mov             " "rdi, " k!()),
        Q!("    mov             " "rsi, " z!()),
        Q!("    mov             " "rdx, " z!()),
        Q!("    mov             " "rcx, " m!()),
        Q!("    call            " Label!("local_demont", 5, After)),

        // Main loop with z == 2^64k * a^(p >> 2^i) (mod m)

        Q!("    mov             " "rax, " k!()),
        Q!("    shl             " "rax, 6"),
        Q!("    mov             " i!() ", rax"),

        Q!(Label!("loop", 6) ":"),
        Q!("    sub             " "rax, 1"),
        Q!("    mov             " i!() ", rax"),

        Q!("    mov             " "rdi, " k!()),
        Q!("    mov             " "rsi, " y!()),
        Q!("    mov             " "rdx, " z!()),
        Q!("    mov             " "rcx, " z!()),
        Q!("    mov             " "r8, " m!()),
        Q!("    call            " Label!("local_amontmul", 4, After)),

        Q!("    mov             " "rdi, " k!()),
        Q!("    mov             " "rsi, " z!()),
        Q!("    mov             " "rdx, " x!()),
        Q!("    mov             " "rcx, " y!()),
        Q!("    mov             " "r8, " m!()),
        Q!("    call            " Label!("local_amontmul", 4, After)),

        Q!("    mov             " "rdx, " i!()),
        Q!("    mov             " "rcx, rdx"),
        Q!("    shr             " "rdx, 6"),
        Q!("    mov             " "rsi, " p!()),
        Q!("    mov             " "rdi, [rsi + 8 * rdx]"),
        Q!("    shr             " "rdi, cl"),
        Q!("    and             " "rdi, 1"),

        Q!("    mov             " "rsi, " k!()),
        Q!("    mov             " "rdx, " z!()),
        Q!("    mov             " "rcx, " z!()),
        Q!("    mov             " "r8, " y!()),
        Q!("    call            " Label!("local_mux", 7, After)),

        Q!("    mov             " "rax, " i!()),
        Q!("    test            " "rax, rax"),
        Q!("    jnz             " Label!("loop", 6, Before)),

        // Convert back from Montgomery representation and copy the result
        // (via a degenerate case of multiplexing) into the output buffer

        Q!("    mov             " "rdi, " k!()),
        Q!("    mov             " "rsi, " z!()),
        Q!("    mov             " "rdx, " z!()),
        Q!("    mov             " "rcx, " m!()),
        Q!("    call            " Label!("local_demont", 5, After)),

        Q!("    xor             " "edi, edi"),
        Q!("    mov             " "rsi, " k!()),
        Q!("    mov             " "rdx, " res!()),
        Q!("    mov             " "rcx, " z!()),
        Q!("    mov             " "r8, " z!()),
        Q!("    call            " Label!("local_mux", 7, After)),

        // Restore the stack pointer and return

        Q!(Label!("end", 2) ":"),
        Q!("    add             " "rsp, " VARSIZE!()),
        // proc hoisting in -> ret after muxend
        Q!("    jmp             " Label!("hoist_finish", 8, After)),

        // Local copy of bignum_amontifier

        Q!(Label!("local_amontifier", 3) ":"),
        Q!("    push            " "rbp"),
        Q!("    push            " "rbx"),
        Q!("    push            " "r12"),
        Q!("    push            " "r13"),
        Q!("    mov             " "r12, rdx"),
        Q!("    mov             " "r13, rcx"),
        Q!("    test            " "rdi, rdi"),
        Q!("    je              " Label!("amontifier_end", 9, After)),
        Q!("    xor             " "rbx, rbx"),
        Q!(Label!("copyinloop", 12) ":"),
        Q!("    mov             " "rcx, [r12 + 8 * rbx]"),
        Q!("    mov             " "[r13 + 8 * rbx], rcx"),
        Q!("    inc             " "rbx"),
        Q!("    cmp             " "rbx, rdi"),
        Q!("    jb              " Label!("copyinloop", 12, Before)),
        Q!("    mov             " "rbx, rdi"),
        Q!("    dec             " "rbx"),
        Q!("    je              " Label!("normalized", 13, After)),
        Q!(Label!("normloop", 14) ":"),
        Q!("    xor             " "rbp, rbp"),
        Q!("    mov             " "r11, rdi"),
        Q!("    neg             " "rcx"),
        Q!("    mov             " "eax, 0x0"),
        Q!(Label!("shufloop", 15) ":"),
        Q!("    mov             " "rcx, rax"),
        Q!("    mov             " "rax, [r13 + 8 * rbp]"),
        Q!("    cmovb           " "rcx, rax"),
        Q!("    mov             " "[r13 + 8 * rbp], rcx"),
        Q!("    inc             " "rbp"),
        Q!("    dec             " "r11"),
        Q!("    jne             " Label!("shufloop", 15, Before)),
        Q!("    dec             " "rbx"),
        Q!("    jne             " Label!("normloop", 14, Before)),
        Q!(Label!("normalized", 13) ":"),
        Q!("    bsr             " "rcx, rcx"),
        Q!("    xor             " "rcx, 0x3f"),
        Q!("    xor             " "r9, r9"),
        Q!("    xor             " "rbx, rbx"),
        Q!(Label!("bitloop", 16) ":"),
        Q!("    mov             " "rax, [r13 + 8 * rbx]"),
        Q!("    mov             " "rbp, rax"),
        Q!("    shld            " "rax, r9, cl"),
        Q!("    mov             " "[r13 + 8 * rbx], rax"),
        Q!("    mov             " "r9, rbp"),
        Q!("    inc             " "rbx"),
        Q!("    cmp             " "rbx, rdi"),
        Q!("    jb              " Label!("bitloop", 16, Before)),
        Q!("    mov             " "r11, [r13 + 8 * rdi -0x8]"),
        Q!("    mov             " "r8d, 0x1"),
        Q!("    mov             " "r9, r11"),
        Q!("    neg             " "r9"),
        Q!("    mov             " "ebx, 0x3e"),
        Q!(Label!("estloop", 17) ":"),
        Q!("    add             " "r8, r8"),
        Q!("    mov             " "rax, r11"),
        Q!("    sub             " "rax, r9"),
        Q!("    cmp             " "r9, rax"),
        Q!("    sbb             " "rax, rax"),
        Q!("    not             " "rax"),
        Q!("    sub             " "r8, rax"),
        Q!("    add             " "r9, r9"),
        Q!("    and             " "rax, r11"),
        Q!("    sub             " "r9, rax"),
        Q!("    dec             " "rbx"),
        Q!("    jne             " Label!("estloop", 17, Before)),
        Q!("    inc             " "r9"),
        Q!("    cmp             " "r11, r9"),
        Q!("    adc             " "r8, 0x0"),
        Q!("    xor             " "rcx, rcx"),
        Q!("    xor             " "rbx, rbx"),
        Q!(Label!("mulloop", 18) ":"),
        Q!("    mov             " "rax, [r13 + 8 * rbx]"),
        Q!("    mul             " "r8"),
        Q!("    add             " "rax, rcx"),
        Q!("    adc             " "rdx, 0x0"),
        Q!("    mov             " "[rsi + 8 * rbx], rax"),
        Q!("    mov             " "rcx, rdx"),
        Q!("    inc             " "rbx"),
        Q!("    cmp             " "rbx, rdi"),
        Q!("    jb              " Label!("mulloop", 18, Before)),
        Q!("    movabs          " "rax, 0x4000000000000000"),
        Q!("    sub             " "rcx, rax"),
        Q!("    sbb             " "r8, r8"),
        Q!("    not             " "r8"),
        Q!("    xor             " "rcx, rcx"),
        Q!("    xor             " "rbx, rbx"),
        Q!(Label!("remloop", 19) ":"),
        Q!("    mov             " "rax, [r13 + 8 * rbx]"),
        Q!("    and             " "rax, r8"),
        Q!("    neg             " "rcx"),
        Q!("    sbb             " "rax, [rsi + 8 * rbx]"),
        Q!("    sbb             " "rcx, rcx"),
        Q!("    mov             " "[rsi + 8 * rbx], rax"),
        Q!("    inc             " "rbx"),
        Q!("    cmp             " "rbx, rdi"),
        Q!("    jb              " Label!("remloop", 19, Before)),
        Q!("    xor             " "rcx, rcx"),
        Q!("    xor             " "rbp, rbp"),
        Q!("    xor             " "r9, r9"),
        Q!(Label!("dubloop1", 20) ":"),
        Q!("    mov             " "rax, [rsi + 8 * rbp]"),
        Q!("    shrd            " "rcx, rax, 0x3f"),
        Q!("    neg             " "r9"),
        Q!("    sbb             " "rcx, [r13 + 8 * rbp]"),
        Q!("    sbb             " "r9, r9"),
        Q!("    mov             " "[rsi + 8 * rbp], rcx"),
        Q!("    mov             " "rcx, rax"),
        Q!("    inc             " "rbp"),
        Q!("    cmp             " "rbp, rdi"),
        Q!("    jb              " Label!("dubloop1", 20, Before)),
        Q!("    shr             " "rcx, 0x3f"),
        Q!("    add             " "rcx, r9"),
        Q!("    xor             " "rbp, rbp"),
        Q!("    xor             " "r9, r9"),
        Q!(Label!("corrloop1", 21) ":"),
        Q!("    mov             " "rax, [r13 + 8 * rbp]"),
        Q!("    and             " "rax, rcx"),
        Q!("    neg             " "r9"),
        Q!("    adc             " "rax, [rsi + 8 * rbp]"),
        Q!("    sbb             " "r9, r9"),
        Q!("    mov             " "[rsi + 8 * rbp], rax"),
        Q!("    inc             " "rbp"),
        Q!("    cmp             " "rbp, rdi"),
        Q!("    jb              " Label!("corrloop1", 21, Before)),
        Q!("    xor             " "rcx, rcx"),
        Q!("    xor             " "rbp, rbp"),
        Q!("    xor             " "r9, r9"),
        Q!(Label!("dubloop2", 22) ":"),
        Q!("    mov             " "rax, [rsi + 8 * rbp]"),
        Q!("    shrd            " "rcx, rax, 0x3f"),
        Q!("    neg             " "r9"),
        Q!("    sbb             " "rcx, [r13 + 8 * rbp]"),
        Q!("    sbb             " "r9, r9"),
        Q!("    mov             " "[rsi + 8 * rbp], rcx"),
        Q!("    mov             " "rcx, rax"),
        Q!("    inc             " "rbp"),
        Q!("    cmp             " "rbp, rdi"),
        Q!("    jb              " Label!("dubloop2", 22, Before)),
        Q!("    shr             " "rcx, 0x3f"),
        Q!("    add             " "rcx, r9"),
        Q!("    xor             " "rbp, rbp"),
        Q!("    xor             " "r9, r9"),
        Q!(Label!("corrloop2", 23) ":"),
        Q!("    mov             " "rax, [r13 + 8 * rbp]"),
        Q!("    and             " "rax, rcx"),
        Q!("    neg             " "r9"),
        Q!("    adc             " "rax, [rsi + 8 * rbp]"),
        Q!("    sbb             " "r9, r9"),
        Q!("    mov             " "[rsi + 8 * rbp], rax"),
        Q!("    mov             " "[r13 + 8 * rbp], rax"),
        Q!("    inc             " "rbp"),
        Q!("    cmp             " "rbp, rdi"),
        Q!("    jb              " Label!("corrloop2", 23, Before)),
        Q!("    xor             " "r11, r11"),
        Q!("    mov             " "rbx, rdi"),
        Q!(Label!("modloop", 24) ":"),
        Q!("    xor             " "r9, r9"),
        Q!("    mov             " "r8, rdi"),
        Q!("    xor             " "rbp, rbp"),
        Q!("    xor             " "rcx, rcx"),
        Q!(Label!("cmaloop", 25) ":"),
        Q!("    adc             " "rcx, r9"),
        Q!("    sbb             " "r10, r10"),
        Q!("    mov             " "rax, [rsi + 8 * rbp]"),
        Q!("    mul             " "r11"),
        Q!("    sub             " "rdx, r10"),
        Q!("    add             " "rax, rcx"),
        Q!("    mov             " "r9, [r13 + 8 * rbp]"),
        Q!("    mov             " "[r13 + 8 * rbp], rax"),
        Q!("    mov             " "rcx, rdx"),
        Q!("    inc             " "rbp"),
        Q!("    dec             " "r8"),
        Q!("    jne             " Label!("cmaloop", 25, Before)),
        Q!("    adc             " "r9, rcx"),
        Q!("    mov             " "r11, r9"),
        Q!("    sbb             " "r10, r10"),
        Q!("    xor             " "rbp, rbp"),
        Q!("    xor             " "rcx, rcx"),
        Q!(Label!("oaloop", 26) ":"),
        Q!("    mov             " "rax, [r13 + 8 * rbp]"),
        Q!("    mov             " "r9, [rsi + 8 * rbp]"),
        Q!("    and             " "r9, r10"),
        Q!("    neg             " "rcx"),
        Q!("    adc             " "rax, r9"),
        Q!("    sbb             " "rcx, rcx"),
        Q!("    mov             " "[r13 + 8 * rbp], rax"),
        Q!("    inc             " "rbp"),
        Q!("    cmp             " "rbp, rdi"),
        Q!("    jb              " Label!("oaloop", 26, Before)),
        Q!("    sub             " "r11, rcx"),
        Q!("    dec             " "rbx"),
        Q!("    jne             " Label!("modloop", 24, Before)),
        Q!("    mov             " "rax, [r12]"),
        Q!("    mov             " "rcx, rax"),
        Q!("    mov             " "r9, rax"),
        Q!("    shl             " "rcx, 0x2"),
        Q!("    sub             " "r9, rcx"),
        Q!("    xor             " "r9, 0x2"),
        Q!("    mov             " "rcx, r9"),
        Q!("    imul            " "rcx, rax"),
        Q!("    mov             " "eax, 0x2"),
        Q!("    add             " "rax, rcx"),
        Q!("    add             " "rcx, 0x1"),
        Q!("    imul            " "r9, rax"),
        Q!("    imul            " "rcx, rcx"),
        Q!("    mov             " "eax, 0x1"),
        Q!("    add             " "rax, rcx"),
        Q!("    imul            " "r9, rax"),
        Q!("    imul            " "rcx, rcx"),
        Q!("    mov             " "eax, 0x1"),
        Q!("    add             " "rax, rcx"),
        Q!("    imul            " "r9, rax"),
        Q!("    imul            " "rcx, rcx"),
        Q!("    mov             " "eax, 0x1"),
        Q!("    add             " "rax, rcx"),
        Q!("    imul            " "r9, rax"),
        Q!("    mov             " "rcx, [r13]"),
        Q!("    imul            " "r9, rcx"),
        Q!("    mov             " "rax, [r12]"),
        Q!("    mul             " "r9"),
        Q!("    add             " "rax, rcx"),
        Q!("    mov             " "rcx, rdx"),
        Q!("    mov             " "ebp, 0x1"),
        Q!("    mov             " "r8, rdi"),
        Q!("    dec             " "r8"),
        Q!("    je              " Label!("montifend", 27, After)),
        Q!(Label!("montifloop", 28) ":"),
        Q!("    adc             " "rcx, [r13 + 8 * rbp]"),
        Q!("    sbb             " "r10, r10"),
        Q!("    mov             " "rax, [r12 + 8 * rbp]"),
        Q!("    mul             " "r9"),
        Q!("    sub             " "rdx, r10"),
        Q!("    add             " "rax, rcx"),
        Q!("    mov             " "[r13 + 8 * rbp -0x8], rax"),
        Q!("    mov             " "rcx, rdx"),
        Q!("    inc             " "rbp"),
        Q!("    dec             " "r8"),
        Q!("    jne             " Label!("montifloop", 28, Before)),
        Q!(Label!("montifend", 27) ":"),
        Q!("    adc             " "r11, rcx"),
        Q!("    sbb             " "r10, r10"),
        Q!("    mov             " "[r13 + 8 * rdi -0x8], r11"),
        Q!("    xor             " "rbp, rbp"),
        Q!("    xor             " "rcx, rcx"),
        Q!(Label!("osloop", 29) ":"),
        Q!("    mov             " "rax, [r13 + 8 * rbp]"),
        Q!("    mov             " "r9, [r12 + 8 * rbp]"),
        Q!("    and             " "r9, r10"),
        Q!("    neg             " "rcx"),
        Q!("    sbb             " "rax, r9"),
        Q!("    sbb             " "rcx, rcx"),
        Q!("    mov             " "[rsi + 8 * rbp], rax"),
        Q!("    inc             " "rbp"),
        Q!("    cmp             " "rbp, rdi"),
        Q!("    jb              " Label!("osloop", 29, Before)),
        Q!(Label!("amontifier_end", 9) ":"),
        Q!("    pop             " "r13"),
        Q!("    pop             " "r12"),
        Q!("    pop             " "rbx"),
        Q!("    pop             " "rbp"),
        Q!("    ret             " ),

        // Local copy of bignum_amontmul

        Q!(Label!("local_amontmul", 4) ":"),
        Q!("    push            " "rbx"),
        Q!("    push            " "rbp"),
        Q!("    push            " "r12"),
        Q!("    push            " "r13"),
        Q!("    push            " "r14"),
        Q!("    push            " "r15"),
        Q!("    sub             " "rsp, 0x8"),
        Q!("    test            " "rdi, rdi"),
        Q!("    je              " Label!("amont_end", 30, After)),
        Q!("    mov             " "r9, rdx"),
        Q!("    mov             " "rax, [r8]"),
        Q!("    mov             " "rdx, rax"),
        Q!("    mov             " "rbx, rax"),
        Q!("    shl             " "rdx, 0x2"),
        Q!("    sub             " "rbx, rdx"),
        Q!("    xor             " "rbx, 0x2"),
        Q!("    mov             " "rdx, rbx"),
        Q!("    imul            " "rdx, rax"),
        Q!("    mov             " "eax, 0x2"),
        Q!("    add             " "rax, rdx"),
        Q!("    add             " "rdx, 0x1"),
        Q!("    imul            " "rbx, rax"),
        Q!("    imul            " "rdx, rdx"),
        Q!("    mov             " "eax, 0x1"),
        Q!("    add             " "rax, rdx"),
        Q!("    imul            " "rbx, rax"),
        Q!("    imul            " "rdx, rdx"),
        Q!("    mov             " "eax, 0x1"),
        Q!("    add             " "rax, rdx"),
        Q!("    imul            " "rbx, rax"),
        Q!("    imul            " "rdx, rdx"),
        Q!("    mov             " "eax, 0x1"),
        Q!("    add             " "rax, rdx"),
        Q!("    imul            " "rbx, rax"),
        Q!("    mov             " "[rsp], rbx"),
        Q!("    xor             " "r13, r13"),
        Q!("    xor             " "rbx, rbx"),
        Q!(Label!("zoop", 31) ":"),
        Q!("    mov             " "[rsi + 8 * rbx], r13"),
        Q!("    inc             " "rbx"),
        Q!("    cmp             " "rbx, rdi"),
        Q!("    jb              " Label!("zoop", 31, Before)),
        Q!("    xor             " "r14, r14"),
        Q!(Label!("outeramontloop", 32) ":"),
        Q!("    mov             " "rbp, [r9 + 8 * r13]"),
        Q!("    xor             " "rbx, rbx"),
        Q!("    xor             " "r10, r10"),
        Q!("    xor             " "r15, r15"),
        Q!("    mov             " "r12, rdi"),
        Q!(Label!("maddloop", 33) ":"),
        Q!("    adc             " "r10, [rsi + 8 * rbx]"),
        Q!("    sbb             " "r11, r11"),
        Q!("    mov             " "rax, [rcx + 8 * rbx]"),
        Q!("    mul             " "rbp"),
        Q!("    sub             " "rdx, r11"),
        Q!("    add             " "rax, r10"),
        Q!("    mov             " "[rsi + 8 * rbx], rax"),
        Q!("    mov             " "r10, rdx"),
        Q!("    inc             " "rbx"),
        Q!("    dec             " "r12"),
        Q!("    jne             " Label!("maddloop", 33, Before)),
        Q!("    adc             " "r14, r10"),
        Q!("    adc             " "r15, r15"),
        Q!("    mov             " "r11, [rsi]"),
        Q!("    mov             " "rbp, [rsp]"),
        Q!("    imul            " "rbp, r11"),
        Q!("    mov             " "rax, [r8]"),
        Q!("    mul             " "rbp"),
        Q!("    add             " "rax, r11"),
        Q!("    mov             " "r10, rdx"),
        Q!("    mov             " "ebx, 0x1"),
        Q!("    mov             " "r12, rdi"),
        Q!("    dec             " "r12"),
        Q!("    je              " Label!("montend", 34, After)),
        Q!(Label!("montloop", 35) ":"),
        Q!("    adc             " "r10, [rsi + 8 * rbx]"),
        Q!("    sbb             " "r11, r11"),
        Q!("    mov             " "rax, [r8 + 8 * rbx]"),
        Q!("    mul             " "rbp"),
        Q!("    sub             " "rdx, r11"),
        Q!("    add             " "rax, r10"),
        Q!("    mov             " "[rsi + 8 * rbx -0x8], rax"),
        Q!("    mov             " "r10, rdx"),
        Q!("    inc             " "rbx"),
        Q!("    dec             " "r12"),
        Q!("    jne             " Label!("montloop", 35, Before)),
        Q!(Label!("montend", 34) ":"),
        Q!("    adc             " "r10, r14"),
        Q!("    adc             " "r15, 0x0"),
        Q!("    mov             " "r14, r15"),
        Q!("    mov             " "[rsi + 8 * rbx -0x8], r10"),
        Q!("    inc             " "r13"),
        Q!("    cmp             " "r13, rdi"),
        Q!("    jb              " Label!("outeramontloop", 32, Before)),
        Q!("    xor             " "rbp, rbp"),
        Q!("    sub             " "rbp, r14"),
        Q!("    xor             " "r11, r11"),
        Q!("    xor             " "rbx, rbx"),
        Q!(Label!("acorrloop", 36) ":"),
        Q!("    mov             " "rax, [r8 + 8 * rbx]"),
        Q!("    and             " "rax, rbp"),
        Q!("    neg             " "r11"),
        Q!("    sbb             " "[rsi + 8 * rbx], rax"),
        Q!("    sbb             " "r11, r11"),
        Q!("    inc             " "rbx"),
        Q!("    cmp             " "rbx, rdi"),
        Q!("    jb              " Label!("acorrloop", 36, Before)),
        Q!(Label!("amont_end", 30) ":"),
        Q!("    add             " "rsp, 0x8"),
        Q!("    pop             " "r15"),
        Q!("    pop             " "r14"),
        Q!("    pop             " "r13"),
        Q!("    pop             " "r12"),
        Q!("    pop             " "rbp"),
        Q!("    pop             " "rbx"),
        Q!("    ret             " ),

        // Local copy of bignum_demont

        Q!(Label!("local_demont", 5) ":"),
        Q!("    push            " "rbx"),
        Q!("    push            " "rbp"),
        Q!("    push            " "r12"),
        Q!("    test            " "rdi, rdi"),
        Q!("    je              " Label!("demont_end", 37, After)),
        Q!("    mov             " "rax, [rcx]"),
        Q!("    mov             " "rbx, rax"),
        Q!("    mov             " "r8, rax"),
        Q!("    shl             " "rbx, 0x2"),
        Q!("    sub             " "r8, rbx"),
        Q!("    xor             " "r8, 0x2"),
        Q!("    mov             " "rbx, r8"),
        Q!("    imul            " "rbx, rax"),
        Q!("    mov             " "eax, 0x2"),
        Q!("    add             " "rax, rbx"),
        Q!("    add             " "rbx, 0x1"),
        Q!("    imul            " "r8, rax"),
        Q!("    imul            " "rbx, rbx"),
        Q!("    mov             " "eax, 0x1"),
        Q!("    add             " "rax, rbx"),
        Q!("    imul            " "r8, rax"),
        Q!("    imul            " "rbx, rbx"),
        Q!("    mov             " "eax, 0x1"),
        Q!("    add             " "rax, rbx"),
        Q!("    imul            " "r8, rax"),
        Q!("    imul            " "rbx, rbx"),
        Q!("    mov             " "eax, 0x1"),
        Q!("    add             " "rax, rbx"),
        Q!("    imul            " "r8, rax"),
        Q!("    xor             " "rbx, rbx"),
        Q!(Label!("iloop", 38) ":"),
        Q!("    mov             " "rax, [rdx + 8 * rbx]"),
        Q!("    mov             " "[rsi + 8 * rbx], rax"),
        Q!("    inc             " "rbx"),
        Q!("    cmp             " "rbx, rdi"),
        Q!("    jb              " Label!("iloop", 38, Before)),
        Q!("    xor             " "r9, r9"),
        Q!(Label!("outerdemontloop", 39) ":"),
        Q!("    mov             " "r11, [rsi]"),
        Q!("    mov             " "rbp, r8"),
        Q!("    imul            " "rbp, r11"),
        Q!("    mov             " "rax, [rcx]"),
        Q!("    mul             " "rbp"),
        Q!("    add             " "rax, r11"),
        Q!("    mov             " "r10, rdx"),
        Q!("    mov             " "ebx, 0x1"),
        Q!("    mov             " "r12, rdi"),
        Q!("    dec             " "r12"),
        Q!("    je              " Label!("demontend", 40, After)),
        Q!(Label!("demontloop", 41) ":"),
        Q!("    adc             " "r10, [rsi + 8 * rbx]"),
        Q!("    sbb             " "r11, r11"),
        Q!("    mov             " "rax, [rcx + 8 * rbx]"),
        Q!("    mul             " "rbp"),
        Q!("    sub             " "rdx, r11"),
        Q!("    add             " "rax, r10"),
        Q!("    mov             " "[rsi + 8 * rbx -0x8], rax"),
        Q!("    mov             " "r10, rdx"),
        Q!("    inc             " "rbx"),
        Q!("    dec             " "r12"),
        Q!("    jne             " Label!("demontloop", 41, Before)),
        Q!(Label!("demontend", 40) ":"),
        Q!("    adc             " "r10, 0x0"),
        Q!("    mov             " "[rsi + 8 * rbx -0x8], r10"),
        Q!("    inc             " "r9"),
        Q!("    cmp             " "r9, rdi"),
        Q!("    jb              " Label!("outerdemontloop", 39, Before)),
        Q!("    xor             " "rbx, rbx"),
        Q!("    mov             " "r12, rdi"),
        Q!(Label!("cmploop", 42) ":"),
        Q!("    mov             " "rax, [rsi + 8 * rbx]"),
        Q!("    sbb             " "rax, [rcx + 8 * rbx]"),
        Q!("    inc             " "rbx"),
        Q!("    dec             " "r12"),
        Q!("    jne             " Label!("cmploop", 42, Before)),
        Q!("    sbb             " "rbp, rbp"),
        Q!("    not             " "rbp"),
        Q!("    xor             " "r11, r11"),
        Q!("    xor             " "rbx, rbx"),
        Q!(Label!("dcorrloop", 43) ":"),
        Q!("    mov             " "rax, [rcx + 8 * rbx]"),
        Q!("    and             " "rax, rbp"),
        Q!("    neg             " "r11"),
        Q!("    sbb             " "[rsi + 8 * rbx], rax"),
        Q!("    sbb             " "r11, r11"),
        Q!("    inc             " "rbx"),
        Q!("    cmp             " "rbx, rdi"),
        Q!("    jb              " Label!("dcorrloop", 43, Before)),
        Q!(Label!("demont_end", 37) ":"),
        Q!("    pop             " "r12"),
        Q!("    pop             " "rbp"),
        Q!("    pop             " "rbx"),
        Q!("    ret             " ),

        // Local copy of bignum_mux

        Q!(Label!("local_mux", 7) ":"),
        Q!("    test            " "rsi, rsi"),
        Q!("    je              " Label!("muxend", 44, After)),
        Q!("    xor             " "r9, r9"),
        Q!("    neg             " "rdi"),
        Q!(Label!("muxloop", 45) ":"),
        Q!("    mov             " "rax, [rcx + 8 * r9]"),
        Q!("    mov             " "rdi, [r8 + 8 * r9]"),
        Q!("    cmovae          " "rax, rdi"),
        Q!("    mov             " "[rdx + 8 * r9], rax"),
        Q!("    inc             " "r9"),
        Q!("    dec             " "rsi"),
        Q!("    jne             " Label!("muxloop", 45, Before)),
        Q!(Label!("muxend", 44) ":"),
        Q!("    ret             " ),
        Q!(Label!("hoist_finish", 8) ":"),
        inout("rdi") z.len() => _,
        inout("rsi") z.as_mut_ptr() => _,
        inout("rdx") a.as_ptr() => _,
        inout("rcx") p.as_ptr() => _,
        inout("r8") m.as_ptr() => _,
        inout("r9") t.as_mut_ptr() => _,
        // clobbers
        out("r10") _,
        out("r11") _,
        out("r12") _,
        out("r13") _,
        out("r14") _,
        out("r15") _,
        out("rax") _,
            )
    };
}
